{
    "components": {
        "schemas": {
            "AcurisPrimeIndustry": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Acuris Prime industry. If not provided while creating Acuris Prime industry the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Code",
                    "Name"
                ]
            },
            "AddressType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Address Type description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Address type. If not provided while creating Address type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Address Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "AnalysisCode": {
                "properties": {
                    "Active": {
                        "description": "Activation status. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "AnalyticsLocation": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Location. If not provided while creating Location the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "ParentLocation": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "type": "string"
                    }
                },
                "required": [
                    "DealogicId",
                    "Type",
                    "Code",
                    "Name"
                ]
            },
            "AttachmentBase": {
                "properties": {
                    "Attachments": {
                        "properties": {
                            "Attachment": {
                                "format": "binary",
                                "type": "string"
                            },
                            "Category": {
                                "type": "string"
                            },
                            "Confirmation": {
                                "type": "boolean"
                            },
                            "CreatedBy": {
                                "type": "string"
                            },
                            "CreatedOn": {
                                "format": "date-time"
                            },
                            "Description": {
                                "type": "string"
                            },
                            "DocType": {
                                "type": "string"
                            },
                            "Document": {
                                "type": "boolean"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "ModifiedBy": {
                                "type": "string"
                            },
                            "ModifiedOn": {
                                "format": "date-time"
                            },
                            "Notification": {
                                "type": "boolean"
                            },
                            "Type": {
                                "type": "string"
                            }
                        }
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "AttachmentBase.Attachment": {
                "properties": {
                    "Attachment": {
                        "format": "binary",
                        "type": "string"
                    },
                    "Category": {
                        "type": "string"
                    },
                    "Confirmation": {
                        "type": "boolean"
                    },
                    "CreatedBy": {
                        "type": "string"
                    },
                    "CreatedOn": {
                        "format": "date-time"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "DocType": {
                        "type": "string"
                    },
                    "Document": {
                        "type": "boolean"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "ModifiedBy": {
                        "type": "string"
                    },
                    "ModifiedOn": {
                        "format": "date-time"
                    },
                    "Notification": {
                        "type": "boolean"
                    },
                    "Type": {
                        "type": "string"
                    }
                }
            },
            "BIC": {
                "properties": {
                    "Active": {
                        "description": "When Event Type = BIC EXPIRED or BIC SUSPENDED then false, else true.. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "BIC": {
                        "type": "string"
                    },
                    "BicCode": {
                        "description": "BIC (bank, country and location code)",
                        "type": "string"
                    },
                    "BranchCode": {
                        "description": "BIC (branch code)",
                        "type": "string"
                    },
                    "BranchInfo1": {
                        "description": "Branch information",
                        "type": "string"
                    },
                    "BranchInfo2": {
                        "description": "Branch information",
                        "type": "string"
                    },
                    "CityHeading": {
                        "type": "string"
                    },
                    "CounterpartyList": {
                        "type": "string"
                    },
                    "CountryName1": {
                        "description": "Country name where the bank identified by this BIC is located",
                        "type": "string"
                    },
                    "CountryName2": {
                        "description": "Country name where the bank identified by this BIC is located",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EventDate": {
                        "description": "The date of the event.",
                        "format": "date"
                    },
                    "EventType": {
                        "description": "The event or change description related to the BIC that has occurred in the past, in the present, or will occur in the future.",
                        "type": "string"
                    },
                    "ExtraInformation": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "ImportTime": {
                        "description": "Date and time the BICplus file was imported into Message Manager.",
                        "format": "date-time"
                    },
                    "InstitutionName1": {
                        "description": "Institution Name",
                        "type": "string"
                    },
                    "InstitutionName2": {
                        "description": "Institution Name",
                        "type": "string"
                    },
                    "InstitutionName3": {
                        "description": "Institution Name",
                        "type": "string"
                    },
                    "Location1": {
                        "description": "Location",
                        "type": "string"
                    },
                    "Location2": {
                        "description": "Location",
                        "type": "string"
                    },
                    "Location3": {
                        "description": "Location",
                        "type": "string"
                    },
                    "PhysicalAddress1": {
                        "description": "Physical address",
                        "type": "string"
                    },
                    "PhysicalAddress2": {
                        "description": "Physical address",
                        "type": "string"
                    },
                    "PhysicalAddress3": {
                        "description": "Physical address",
                        "type": "string"
                    },
                    "PhysicalAddress4": {
                        "description": "Physical address",
                        "type": "string"
                    },
                    "POBCountry1": {
                        "description": "POB country name",
                        "type": "string"
                    },
                    "POBCountry2": {
                        "description": "POB country name",
                        "type": "string"
                    },
                    "POBLocation1": {
                        "description": "POB location",
                        "type": "string"
                    },
                    "POBLocation2": {
                        "description": "POB location",
                        "type": "string"
                    },
                    "POBLocation3": {
                        "description": "POB location",
                        "type": "string"
                    },
                    "POBNumber": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "SubtypeIndication": {
                        "type": "string"
                    },
                    "Unpublished": {
                        "description": "Indicates if the BIC is non-publicly available. A non-public available BIC is a still valid 11-char BIC code but the regular SWIFT files do not provide those. It can assume only two values: 1 if the BIC is NON-publicly available, 0 otherwise. ",
                        "format": "int32",
                        "type": "integer"
                    },
                    "ValueAddedServices": {
                        "type": "string"
                    }
                },
                "required": [
                    "BicCode"
                ]
            },
            "BICType": {
                "properties": {
                    "Default": {
                        "description": "BIC type is used as default.",
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "A meaningful BIC Type description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the BIC type. If not provided while creating BIC type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "BIC Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Bond": {
                "properties": {
                    "Country": {
                        "type": "string"
                    },
                    "CouponInterest": {
                        "description": "Coupon interest of the bond."
                    },
                    "CurrencyStr": {
                        "description": "Currency of the bond.",
                        "type": "string"
                    },
                    "Cusip": {
                        "description": "CUSIP of the bond.",
                        "type": "string"
                    },
                    "DateIssue": {
                        "description": "Issue date of the bond.",
                        "format": "date"
                    },
                    "DateMaturity": {
                        "description": "Maturity date of the bond.",
                        "format": "date"
                    },
                    "Description": {
                        "description": "Description of the bond.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Bond",
                        "type": "string"
                    },
                    "Isin": {
                        "description": "ISIN of the bond.",
                        "type": "string"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SecurityType": {
                        "description": "Security Type.. Possible values: 0 - Undef, 1 - Fwd, 2 - Cash, 3 - Basis, 4 - Future, 5 - Option, 6 - Swap, 7 - Switch, 8 - Repo, 11 - Strategy, 12 - CDS, 13 - Equity, 14 - Fund, 15 - FX, 16 - CDS Curve, 17 - Repo Basket, 18 - MMCurvePoint, 19 - MMCurve",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Ticker": {
                        "description": "The ticker of the issuer of the bond.",
                        "type": "string"
                    }
                }
            },
            "BondGroup": {
                "properties": {
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Bond group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "Book": {
                "properties": {
                    "AreaDate": {
                        "format": "date"
                    },
                    "AreaDate_ValueSource": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "BookOwner": {
                        "description": "Owner of the account.",
                        "type": "string"
                    },
                    "BusinessDate": {
                        "description": "Business date of the Book.",
                        "type": "string"
                    },
                    "BusinessUnitId": {
                        "type": "string"
                    },
                    "ClearingGroupId": {
                        "type": "string"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Contacts": {
                        "properties": {
                            "ContactTypeId": {
                                "description": "Classification of the contact according to the configurable contact types",
                                "type": "string"
                            },
                            "Description": {
                                "description": "Description of the contact",
                                "type": "string"
                            },
                            "Email": {
                                "description": "Main email address of the contact",
                                "type": "string"
                            },
                            "EntitySubtype": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "EntityType": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "Fax": {
                                "description": "Main fax number of the contact",
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Mobile": {
                                "description": "Mobile phone number of the contact.",
                                "type": "string"
                            },
                            "Name": {
                                "description": "Name of the contact",
                                "type": "string"
                            },
                            "NamePrefix": {
                                "description": "Prefix to apply to the contact name.",
                                "type": "string"
                            },
                            "Other": {
                                "description": "Free use text fields for comments, remarks etc",
                                "type": "string"
                            },
                            "Phone": {
                                "description": "Main phone number of the contact",
                                "type": "string"
                            },
                            "Signature": {
                                "description": "The image of the signature of the person identified by this contact",
                                "format": "binary",
                                "type": "string"
                            },
                            "SoftDeleted": {
                                "deprecated": true,
                                "description": "Soft deletion not supported.",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "CounterpartyId": {
                        "type": "string"
                    },
                    "CounterpartyId_ValueSource": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Currency": {
                        "description": "Currency of the book",
                        "type": "string"
                    },
                    "DealerBIC": {
                        "description": "The Bank Identifier Code, as a 4-character unique identifier for each bank that executed and reported an OTC trade, as required by MiFID.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the book used",
                        "type": "string"
                    },
                    "DeskId": {
                        "description": "Reference ID for the desk.",
                        "type": "string"
                    },
                    "DfCurveNPV": {
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Use 'Subtype' instead.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Use 'Type' instead.",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "InterGLCounterpartyId": {
                        "type": "string"
                    },
                    "IsArchived": {
                        "description": "Indicates whether the book is archived or live.",
                        "type": "boolean"
                    },
                    "LegalEntity": {
                        "description": "Legal entity of the Bank itself owning the Book ('Us')",
                        "type": "string"
                    },
                    "LocationId": {
                        "type": "string"
                    },
                    "MarkId": {
                        "description": "Default desk Mark Id associated with a user.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the book",
                        "type": "string"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RateGroup": {
                        "type": "string"
                    },
                    "RateGroup_ValueSource": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "ReportingCurrency": {
                        "type": "string"
                    },
                    "ReportingCurrency_ValueSource": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Subtype": {
                        "description": "Classification of the book according to the configurable book subtype",
                        "type": "string"
                    },
                    "TraderFirstName": {
                        "description": "Trader first name.",
                        "type": "string"
                    },
                    "TraderLastName": {
                        "description": "Trader last name.",
                        "type": "string"
                    },
                    "TradingAllowedFlag": {
                        "description": "Trading allowed on this account or not.. Possible values: 0 - Unknown, 1 - Yes, 2 - No",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "description": "Classification of the book according to the configurable book type",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Book.Contact": {
                "properties": {
                    "ContactTypeId": {
                        "description": "Classification of the contact according to the configurable contact types",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the contact",
                        "type": "string"
                    },
                    "Email": {
                        "description": "Main email address of the contact",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Fax": {
                        "description": "Main fax number of the contact",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Mobile": {
                        "description": "Mobile phone number of the contact.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the contact",
                        "type": "string"
                    },
                    "NamePrefix": {
                        "description": "Prefix to apply to the contact name.",
                        "type": "string"
                    },
                    "Other": {
                        "description": "Free use text fields for comments, remarks etc",
                        "type": "string"
                    },
                    "Phone": {
                        "description": "Main phone number of the contact",
                        "type": "string"
                    },
                    "Signature": {
                        "description": "The image of the signature of the person identified by this contact",
                        "format": "binary",
                        "type": "string"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BookGroup": {
                "properties": {
                    "BookExclude": {
                        "deprecated": true,
                        "description": "Use 'Exclude' instead.",
                        "type": "string"
                    },
                    "BookGroupInclude": {
                        "deprecated": true,
                        "description": "Use 'GroupInclude' instead.",
                        "type": "string"
                    },
                    "BookInclude": {
                        "deprecated": true,
                        "description": "Use 'Include' instead.",
                        "type": "string"
                    },
                    "DefaultBookTradeExpr": {
                        "description": "Expression defining in which Book a certain Trade should be inserted.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Book group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "BookHierarchy": {
                "properties": {
                    "Deleted": {
                        "description": "Hierarchy has been deleted and will be removed after the next restart",
                        "type": "boolean"
                    },
                    "Depth": {
                        "type": "string"
                    },
                    "Description": {
                        "description": "Human readable description for the hierarchy",
                        "type": "string"
                    },
                    "EnforcedType": {
                        "type": "string"
                    },
                    "EntityClassStr": {
                        "deprecated": true,
                        "description": "Use the native API instead, which has different entity types per class.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Book hierarchy",
                        "type": "string"
                    },
                    "IsDefault": {
                        "deprecated": true,
                        "description": "Not needed as Counterparties and Books don't have to belong to a hierarchy anymore.",
                        "type": "boolean"
                    },
                    "LevelDefault": {
                        "properties": {
                            "CustomField": {
                                "description": "Hidden field to keep reference of custom field entity.",
                                "type": "string"
                            },
                            "DefaultValue": {
                                "properties": {
                                    "DefaultValue": {
                                        "description": "The value of the default",
                                        "type": "string"
                                    },
                                    "Id": {
                                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                        "type": "string"
                                    },
                                    "Level": {
                                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "Level"
                                ]
                            },
                            "FieldName": {
                                "description": "Name of field to default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "FieldName"
                        ]
                    },
                    "Levels": {
                        "properties": {
                            "EnforcedSubtype": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Level": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "Name": {
                                "description": "Level Name",
                                "type": "string"
                            }
                        }
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "BookHierarchy.BookLevel": {
                "properties": {
                    "EnforcedSubtype": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Level": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "description": "Level Name",
                        "type": "string"
                    }
                }
            },
            "BookHierarchy.LevelDefault": {
                "properties": {
                    "CustomField": {
                        "description": "Hidden field to keep reference of custom field entity.",
                        "type": "string"
                    },
                    "DefaultValue": {
                        "properties": {
                            "DefaultValue": {
                                "description": "The value of the default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Level": {
                                "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Level"
                        ]
                    },
                    "FieldName": {
                        "description": "Name of field to default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    }
                },
                "required": [
                    "FieldName"
                ]
            },
            "BookHierarchy.LevelDefault.LevelDefaultValue": {
                "properties": {
                    "DefaultValue": {
                        "description": "The value of the default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Level": {
                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Level"
                ]
            },
            "BookSubtype": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Book Subtype description",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Book subtype. If not provided while creating Book subtype the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Book Subtype Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BookType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Book Type description",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Book type. If not provided while creating Book type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Book Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BunkerGrade": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the bunker grade. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Bunker grade. If not provided while creating Bunker grade the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MTToCO2": {
                        "description": "Amount of CO2 generated per MT consumed"
                    },
                    "Name": {
                        "description": "Bunker grade name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BunkerSpecification": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the bunker grade. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Bunker specification. If not provided while creating Bunker specification the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Bunker specification name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BusinessDate": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Business date. If not provided while creating Business date the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Unique name of the Business date.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "BusinessUnit": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Business Unit description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Business unit. If not provided while creating Business unit the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Business Unit Name",
                        "type": "string"
                    },
                    "RCFieldName": {
                        "description": "The fieldname of RefData where the Restricted Code is stored. Mainly used in RIL flow.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Calendar": {
                "properties": {
                    "Description": {
                        "description": "Description of the Calendar.",
                        "type": "string"
                    },
                    "Friday": {
                        "description": "Indicates if Friday is a working day or not for this calendar",
                        "type": "boolean"
                    },
                    "Holidays": {
                        "properties": {
                            "Description": {
                                "description": "Description of the Holiday.",
                                "type": "string"
                            },
                            "EventDate": {
                                "description": "Date of the Holiday.",
                                "format": "date"
                            },
                            "Id": {
                                "description": "Primary identifier of the Holiday",
                                "type": "string"
                            }
                        },
                        "required": [
                            "EventDate"
                        ]
                    },
                    "Id": {
                        "description": "Primary identifier of the Calendar",
                        "type": "string"
                    },
                    "Monday": {
                        "description": "Indicates if Monday is a working day or not for this calendar",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "Unique name of the Calendar.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Saturday": {
                        "description": "Indicates if Saturday is a working day or not for this calendar. By default, Saturday is not a working day",
                        "type": "boolean"
                    },
                    "Sunday": {
                        "description": "Indicates if Sunday is a working day or not for this calendar. By default, Sunday is not a working day",
                        "type": "boolean"
                    },
                    "Thursday": {
                        "description": "Indicates if Thursday is a working day or not for this calendar",
                        "type": "boolean"
                    },
                    "Tuesday": {
                        "description": "Indicates if Tuesday is a working day or not for this calendar",
                        "type": "boolean"
                    },
                    "Wednesday": {
                        "description": "Indicates if Wednesday is a working day or not for this calendar",
                        "type": "boolean"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Calendar.Holiday": {
                "properties": {
                    "Description": {
                        "description": "Description of the Holiday.",
                        "type": "string"
                    },
                    "EventDate": {
                        "description": "Date of the Holiday.",
                        "format": "date"
                    },
                    "Id": {
                        "description": "Primary identifier of the Holiday",
                        "type": "string"
                    }
                },
                "required": [
                    "EventDate"
                ]
            },
            "ClearingCodeType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Clearing Code Type description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Clearing code type. If not provided while creating Clearing code type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Clearing Code Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ClearingFormat": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Clearing Format description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Clearing format. If not provided while creating Clearing format the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MTCode": {
                        "description": "Code to be used in MT messages. This is an MT equivalent of the MX value provided in Code attribute",
                        "type": "string"
                    },
                    "MXCode": {
                        "description": "The code that should be output on financial messages. This corresponds to the code used in MX messages",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Clearing Format Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Structure": {
                        "description": "Code structure pattern",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ClearingSystem": {
                "properties": {
                    "Countries": {
                        "properties": {
                            "ClearingSystemType": {
                                "type": "string"
                            },
                            "Country": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Country",
                            "ClearingSystemType"
                        ]
                    },
                    "Description": {
                        "description": "A meaningful Clearing System description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Clearing system. If not provided while creating Clearing system the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Clearing System Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "SupportedClearingFormats": {
                        "items": {
                            "description": "List of clearing formats associated to this clearing system",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ClearingSystem.ClearingSystemCountryRelation": {
                "properties": {
                    "ClearingSystemType": {
                        "type": "string"
                    },
                    "Country": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    }
                },
                "required": [
                    "Country",
                    "ClearingSystemType"
                ]
            },
            "ClearingSystemType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Clearing System Type description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Clearing system type. If not provided while creating Clearing system type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Clearing System Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "CodeTypeField": {
                "properties": {
                    "Deleted": {
                        "description": "Code Type has been deleted and will be removed after the next restart.",
                        "type": "boolean"
                    },
                    "EntityTypes": {
                        "items": {
                            "description": "Entity types for which this code type can be used for.",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "EntityTypesOrig": {
                        "items": {
                            "description": "Image of EntityTypes when run started",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Code type",
                        "type": "string"
                    },
                    "Identifier": {
                        "description": "Additional Identifier of the Code type used as record field name and within other technical APIs. Only alpha-numeric characters and underscores are allowed.",
                        "type": "string"
                    },
                    "IsUnique": {
                        "description": "If true, each code is checked for uniqueness across all codes of the same code type and entity type.",
                        "type": "boolean"
                    },
                    "LegacyId": {
                        "description": "The legacy Id of the code type. If set, the code type will be available as part of the legacy data structures.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "description": "Display name of the code type",
                        "type": "string"
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SetOfCodes": {
                        "description": "Specify whether the code type accepts only one code or multiple.",
                        "type": "boolean"
                    },
                    "SourceNames": {
                        "items": {
                            "description": "List of component source names which shall use this code type.",
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "EntityTypes",
                    "Identifier"
                ]
            },
            "Commodity": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the commodity. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CargoType": {
                        "description": "Type of cargo. Possible values: 0 - Unknown, 1 - Dirty, 2 - Clean, 3 - Grain, 4 - Bale, 5 - Ore, 6 - Gas",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CASNumber": {
                        "description": "Unique numerical identifier assigned by the Chemical Abstracts Service (CAS)",
                        "type": "string"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Conversion": {
                        "properties": {
                            "Conversion": {
                                "description": "Conversion factor between the configured units of measure"
                            },
                            "DisplayName": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "UOMFrom": {
                                "description": "Unit of measure to convert from",
                                "type": "string"
                            },
                            "UOMTo": {
                                "description": "Unit of measure to convert to",
                                "type": "string"
                            }
                        },
                        "required": [
                            "UOMFrom",
                            "UOMTo",
                            "Conversion"
                        ]
                    },
                    "Description": {
                        "description": "Description of the commodity",
                        "type": "string"
                    },
                    "FlashPoint": {
                        "description": "Temperature the commodity ignites in air"
                    },
                    "GradeFactors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Grades": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "IBCCodeName": {
                        "description": "International bulk chemical code",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Commodity. If not provided while creating Commodity the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MarpolAnnex": {
                        "description": "The marpol annex the commodity relates to 1 to 6",
                        "format": "int32",
                        "type": "integer"
                    },
                    "MarpolPollutionCategory": {
                        "description": "Marpol pollution catergory",
                        "type": "string"
                    },
                    "MeltingPoint": {
                        "description": "Melting temperature"
                    },
                    "Name": {
                        "description": "Full name of the commodity",
                        "type": "string"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Prewash": {
                        "description": "Do tanks need to be prewashed before loading this cargo",
                        "type": "boolean"
                    },
                    "Remarks": {
                        "description": "General Remarks",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "StowageFactor": {
                        "description": "Stowage factor or specific gravity of the commodity"
                    },
                    "Temperature": {
                        "description": "Temperature required"
                    },
                    "UNNumber": {
                        "description": "United Nations number of the commodity",
                        "type": "string"
                    },
                    "UOMMass": {
                        "description": "Unit of measure mass",
                        "type": "string"
                    },
                    "UOMVolume": {
                        "description": "Unit of measure volume",
                        "type": "string"
                    },
                    "USCoastGuardCompatibility": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "VesselType": {
                        "description": "Type of vessel. Possible values: 0 - Dry, 1 - Tank, 2 - Gas, 3 - Dry/Tank",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Viscosity": {
                        "description": "Resistance of fluid to flow"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Commodity.UOMConversion": {
                "properties": {
                    "Conversion": {
                        "description": "Conversion factor between the configured units of measure"
                    },
                    "DisplayName": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "UOMFrom": {
                        "description": "Unit of measure to convert from",
                        "type": "string"
                    },
                    "UOMTo": {
                        "description": "Unit of measure to convert to",
                        "type": "string"
                    }
                },
                "required": [
                    "UOMFrom",
                    "UOMTo",
                    "Conversion"
                ]
            },
            "CommodityGroup": {
                "properties": {
                    "Classification": {
                        "description": "Enable Class for Commodity Group",
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Commodity group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "Oil": {
                        "description": "Enable Oil for Commodity Group",
                        "type": "boolean"
                    },
                    "Packaging": {
                        "description": "Enable Packaging for Commodity Group",
                        "type": "boolean"
                    },
                    "Protein": {
                        "description": "Enable Protein for Commodity Group",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "CommodityStrategy": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the index. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "description": "Description or long name of the strategy",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Strategy. If not provided while creating Strategy the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the strategy",
                        "type": "string"
                    },
                    "Reporting": {
                        "description": "Strategy is only used for reporting",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "description": "Classification of the strategy according to the configurable strategy type",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "CommodityStrategyHierarchy": {
                "properties": {
                    "Deleted": {
                        "description": "Hierarchy has been deleted and will be removed after the next restart",
                        "type": "boolean"
                    },
                    "Depth": {
                        "type": "string"
                    },
                    "Description": {
                        "description": "Human readable description for the hierarchy",
                        "type": "string"
                    },
                    "EnforcedType": {
                        "type": "string"
                    },
                    "EntityClassStr": {
                        "deprecated": true,
                        "description": "Use the native API instead, which has different entity types per class.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Strategy hierarchy",
                        "type": "string"
                    },
                    "IsDefault": {
                        "deprecated": true,
                        "description": "Not needed as Counterparties and Books don't have to belong to a hierarchy anymore.",
                        "type": "boolean"
                    },
                    "LevelDefault": {
                        "properties": {
                            "CustomField": {
                                "description": "Hidden field to keep reference of custom field entity.",
                                "type": "string"
                            },
                            "DefaultValue": {
                                "properties": {
                                    "DefaultValue": {
                                        "description": "The value of the default",
                                        "type": "string"
                                    },
                                    "Id": {
                                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                        "type": "string"
                                    },
                                    "Level": {
                                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "Level"
                                ]
                            },
                            "FieldName": {
                                "description": "Name of field to default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "FieldName"
                        ]
                    },
                    "Levels": {
                        "properties": {
                            "Id": {
                                "type": "string"
                            },
                            "Level": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "Name": {
                                "description": "Level Name",
                                "type": "string"
                            }
                        }
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "CommodityStrategyHierarchy.Level": {
                "properties": {
                    "Id": {
                        "type": "string"
                    },
                    "Level": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "description": "Level Name",
                        "type": "string"
                    }
                }
            },
            "CommodityStrategyHierarchy.LevelDefault": {
                "properties": {
                    "CustomField": {
                        "description": "Hidden field to keep reference of custom field entity.",
                        "type": "string"
                    },
                    "DefaultValue": {
                        "properties": {
                            "DefaultValue": {
                                "description": "The value of the default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Level": {
                                "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Level"
                        ]
                    },
                    "FieldName": {
                        "description": "Name of field to default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    }
                },
                "required": [
                    "FieldName"
                ]
            },
            "CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue": {
                "properties": {
                    "DefaultValue": {
                        "description": "The value of the default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Level": {
                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Level"
                ]
            },
            "CommodityStrategyType": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Strategy type. If not provided while creating Strategy type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the strategy type",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ConfirmationFieldType": {
                "properties": {
                    "Default": {
                        "description": "When true, defines this confirmation field type as the default.  Only one record may be set as true.",
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "Description or long name of the Confirmation field type.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Confirmation field type. If not provided while creating Confirmation field type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or code of the Confirmation field type.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ConfirmationPlatform": {
                "properties": {
                    "BIC": {
                        "description": "BIC for the Confirmation platform.",
                        "type": "string"
                    },
                    "Closed": {
                        "description": "When true, this Confirmation platform is not active and will not appear in drop-downs.",
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "Description or long name of the Confirmation platform.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Confirmation platform. If not provided while creating Confirmation platform the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Confirmation platform.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ContactType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Contact Type description",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Contact type. If not provided while creating Contact type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Contact Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ContractGroup": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the contract group. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Contract group. If not provided while creating Contract group the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Contract group name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "ContractStatus": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the contract status. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "ContractGroups": {
                        "items": {
                            "description": "Contract groups used to determine the functionality the contract status allows",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ControlTypes": {
                        "items": {
                            "description": "Status controls. Possible values: 1 - Rules, 2 - COA, 3 - Default, 4 - Lock, 5 - Cancelled, 6 - Fixed, 7 - Running, 8 - Redelivered, 9 - Nominated, 10 - Last Voyage, 11 - Loaded, 12 - Discharged, 13 - Started, 14 - Finalized",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14
                            ],
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Contract status. If not provided while creating Contract status the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Contract status name",
                        "type": "string"
                    },
                    "NextStatus": {
                        "items": {
                            "description": "Allowable next status",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Counterparty": {
                "properties": {
                    "__RESERVED_ALL_CPTYS_HrcParent": {
                        "deprecated": true,
                        "description": "To be used by RefData only.",
                        "type": "string"
                    },
                    "AccountId": {
                        "description": "Reference ID of the account.",
                        "type": "string"
                    },
                    "AccountType": {
                        "description": "Type of account.. Possible values: 0 - Unknown, 1 - Broker, 2 - Retail, 3 - Strip/Recon, 4 - Breakdown, 5 - Intradesk, 6 - In-House, 7 - Entity, 8 - ExecBroker, 9 - ClearingHouse",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Active": {
                        "description": "Activation status of the counterparty. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Addresses": {
                        "properties": {
                            "AddressLine1": {
                                "description": "Address line 1.",
                                "type": "string"
                            },
                            "AddressLine2": {
                                "description": "Address line 2.",
                                "type": "string"
                            },
                            "AddressLine3": {
                                "description": "Address line 3.",
                                "type": "string"
                            },
                            "AddressLine4": {
                                "description": "Address line 4.",
                                "type": "string"
                            },
                            "AddressLine5": {
                                "description": "Address line 5.",
                                "type": "string"
                            },
                            "AddressLine6": {
                                "description": "(Temp) Address line 6.",
                                "type": "string"
                            },
                            "AddressLine7": {
                                "description": "(Temp) Address line 7.",
                                "type": "string"
                            },
                            "AddressTypeId": {
                                "type": "string"
                            },
                            "Area": {
                                "description": "Specifies the account owner's resident geographical region or area.",
                                "type": "string"
                            },
                            "Block": {
                                "description": "Area of land bounded by streets.",
                                "type": "string"
                            },
                            "BuildingName": {
                                "description": "Name of the building or house.",
                                "type": "string"
                            },
                            "BuildingNumber": {
                                "description": "Number that identifies the position of a building on a street.",
                                "type": "string"
                            },
                            "Country": {
                                "description": "Country of the address",
                                "type": "string"
                            },
                            "CountrySubDivision": {
                                "description": "Codified representation of the jurisdiction as published in ISO 3166-2.",
                                "type": "string"
                            },
                            "CountyIdentification": {
                                "description": "Identifier of a county.",
                                "type": "string"
                            },
                            "Department": {
                                "description": "Identification of a division of a large organization or building.",
                                "type": "string"
                            },
                            "Description": {
                                "description": "Description of the address",
                                "type": "string"
                            },
                            "DistrictName": {
                                "description": "Name of a district, i.e. a part of a town or region.",
                                "type": "string"
                            },
                            "Email": {
                                "description": "Email of the address",
                                "type": "string"
                            },
                            "EntitySubtype": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "EntityType": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "Fax": {
                                "description": "Fax Number of the address",
                                "type": "string"
                            },
                            "Floor": {
                                "description": "Floor or store within a building.",
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Lot": {
                                "description": "Identification of an allotment of land.",
                                "type": "string"
                            },
                            "Phone": {
                                "description": "Phone number of the address",
                                "type": "string"
                            },
                            "PostCode": {
                                "description": "Post code of the address",
                                "type": "string"
                            },
                            "PostOfficeBox": {
                                "description": "Numbered box in a post office, assigned to a person or organization, where letters are kept until called for.",
                                "type": "string"
                            },
                            "Province": {
                                "description": "A territory governed as an administrative or political unit of a country.",
                                "type": "string"
                            },
                            "RegionIdentification": {
                                "description": "Identification of an administrative division of a country, state, or territory.",
                                "type": "string"
                            },
                            "ShortAddressLine1": {
                                "description": "Short address line 1.",
                                "type": "string"
                            },
                            "ShortAddressLine2": {
                                "description": "Short address line 2.",
                                "type": "string"
                            },
                            "ShortAddressLine3": {
                                "description": "Short address line 3.",
                                "type": "string"
                            },
                            "ShortAddressLine4": {
                                "description": "Short address line 4.",
                                "type": "string"
                            },
                            "SoftDeleted": {
                                "deprecated": true,
                                "description": "Soft deletion not supported.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "State": {
                                "description": "State of the address",
                                "type": "string"
                            },
                            "Street": {
                                "description": "Street of the address",
                                "type": "string"
                            },
                            "SubDepartment": {
                                "description": "Identification of a sub-division of a large organization or building.",
                                "type": "string"
                            },
                            "Town": {
                                "description": "Town of the address",
                                "type": "string"
                            }
                        },
                        "required": [
                            "AddressTypeId"
                        ]
                    },
                    "BankAccounts": {
                        "properties": {
                            "ABANumber": {
                                "description": "ABA routing number for the account",
                                "type": "string"
                            },
                            "AccountName": {
                                "description": "The account name for this account",
                                "type": "string"
                            },
                            "AccountNumber": {
                                "type": "string"
                            },
                            "Default": {
                                "description": "Default account for the counterparty",
                                "type": "boolean"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Name": {
                                "description": "Display name of the Bank account",
                                "type": "string"
                            },
                            "Remarks": {
                                "description": "General remarks",
                                "type": "string"
                            },
                            "SwiftCode": {
                                "type": "string"
                            },
                            "ViaBank": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "BICs": {
                        "properties": {
                            "BIC": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Type": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Type",
                            "BIC"
                        ]
                    },
                    "BlockId": {
                        "description": "Associated block counterparty ID.",
                        "type": "string"
                    },
                    "BulkConfirmationExpected": {
                        "description": "When true, this counterparty expects to receive bulk confirmations.",
                        "type": "boolean"
                    },
                    "BusinessUnits": {
                        "properties": {
                            "BusinessUnit": {
                                "type": "string"
                            },
                            "Currency": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "BusinessUnit"
                        ]
                    },
                    "ClearingAgent": {
                        "description": "When true, this counterparty is also a clearing agent.",
                        "type": "boolean"
                    },
                    "ClearingCodes": {
                        "properties": {
                            "ClearingFormat": {
                                "type": "string"
                            },
                            "ClearingSystem": {
                                "type": "string"
                            },
                            "Code": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Type": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "ClearingFormat",
                            "Type",
                            "Code",
                            "ClearingSystem"
                        ]
                    },
                    "ClearingFCM": {
                        "description": "When true, this counterparty is also a clearing member firm of one or more exchanges.",
                        "type": "boolean"
                    },
                    "ClearingMatcher": {
                        "description": "The third party provider that performs matching for clearing eligible trades against the counterparty.",
                        "type": "string"
                    },
                    "ClearingMemberGroup": {
                        "description": "Clearing member group.",
                        "type": "string"
                    },
                    "CLSParticipantType": {
                        "description": "Kind of member the counterparty engages in CLS session.. Possible values: 2 - Settlement, 4 - Third party",
                        "enum": [
                            2,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Code": {
                        "description": "Code or abbreviation of the counterparty",
                        "type": "string"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "ConfirmationNeeded": {
                        "description": "When true, confirmations should be produced and a confirmation profile should be selected on trades with this counterparty.",
                        "type": "boolean"
                    },
                    "ConfirmationPlatform": {
                        "description": "Confirmation platform used by the counterparty",
                        "type": "string"
                    },
                    "Contacts": {
                        "properties": {
                            "ContactTypeId": {
                                "description": "Classification of the contact according to the configurable contact types",
                                "type": "string"
                            },
                            "Description": {
                                "description": "Description of the contact",
                                "type": "string"
                            },
                            "Email": {
                                "description": "Main email address of the contact",
                                "type": "string"
                            },
                            "EntitySubtype": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "EntityType": {
                                "deprecated": true,
                                "description": "Not required.",
                                "type": "string"
                            },
                            "Fax": {
                                "description": "Main fax number of the contact",
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Mobile": {
                                "description": "Mobile phone number of the contact.",
                                "type": "string"
                            },
                            "Name": {
                                "description": "Name of the contact",
                                "type": "string"
                            },
                            "NamePrefix": {
                                "description": "Prefix to apply to the contact name.",
                                "type": "string"
                            },
                            "Other": {
                                "description": "Free use text fields for comments, remarks etc",
                                "type": "string"
                            },
                            "Phone": {
                                "description": "Main phone number of the contact",
                                "type": "string"
                            },
                            "Signature": {
                                "description": "The image of the signature of the person identified by this contact",
                                "format": "binary",
                                "type": "string"
                            },
                            "SoftDeleted": {
                                "deprecated": true,
                                "description": "Soft deletion not supported.",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "CounterpartyConfirmationForCLSRequired": {
                        "description": "When true, this counterparty requires a confirmation for CLS trades.",
                        "type": "boolean"
                    },
                    "Country": {
                        "description": "Country of the counterparty",
                        "type": "string"
                    },
                    "Custodian": {
                        "type": "string"
                    },
                    "CustomerAccountCode": {
                        "description": "Customer Account Code",
                        "type": "string"
                    },
                    "DateLastReviewed": {
                        "description": "Date the counterparty data has been reviewed the last time by an authorized user.",
                        "format": "date"
                    },
                    "DealerBIC": {
                        "description": "The Bank Identifier Code, as a 4-character unique identifier for each bank that executed and reported an OTC trade, as required by MiFID.",
                        "type": "string"
                    },
                    "DepositoryCodes": {
                        "properties": {
                            "Code": {
                                "type": "string"
                            },
                            "Format": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Format",
                            "Code"
                        ]
                    },
                    "DvPSettlement": {
                        "description": "When true, this counterparty settles using Delivery versus Payment.",
                        "type": "boolean"
                    },
                    "EconomicArea": {
                        "description": "Economic are for reporting purposes",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Use 'Subtype' instead.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Use 'Type' instead.",
                        "type": "string"
                    },
                    "Farms": {
                        "properties": {
                            "Description": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Name": {
                                "type": "string"
                            },
                            "SplitDefaults": {
                                "properties": {
                                    "Counterparty": {
                                        "type": "string"
                                    },
                                    "Id": {
                                        "type": "string"
                                    },
                                    "Percentage": {
                                    }
                                },
                                "required": [
                                    "Counterparty",
                                    "Percentage"
                                ]
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "Field50FormatOption": {
                        "description": "Ordering customer format code.. Possible values: 0 - F, 1 - K",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Field50Line1": {
                        "description": "Ordering customer line 1",
                        "type": "string"
                    },
                    "Field50Line2": {
                        "description": "Ordering customer line 2",
                        "type": "string"
                    },
                    "Field50Line3": {
                        "description": "Ordering customer line 3",
                        "type": "string"
                    },
                    "Field50Line4": {
                        "description": "Ordering customer line 4",
                        "type": "string"
                    },
                    "Field50Line5": {
                        "description": "Ordering customer line 5",
                        "type": "string"
                    },
                    "FunctionalCurrency": {
                        "description": "Currency of the counterparty",
                        "type": "string"
                    },
                    "FundManager": {
                        "description": "True when this counterparty is also a fund manager.",
                        "type": "boolean"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "IndirectOnly": {
                        "description": "When true, a counterparty usually trades indirect but capable of trading direct.",
                        "type": "boolean"
                    },
                    "InvestmentManagers": {
                        "properties": {
                            "Default": {
                                "type": "boolean"
                            },
                            "Id": {
                                "description": "Primary identifier of the Investment manager. If not provided while creating Investment manager the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "InvestmentManager": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "InvestmentManager"
                        ]
                    },
                    "LegalEntity": {
                        "description": "Legal entity identifier of the bank managing the counterparty ('Us')",
                        "type": "string"
                    },
                    "LegalEntityIdentifier": {
                        "description": "Global identifier of the legal entity (LEI)",
                        "type": "string"
                    },
                    "MultimanagedAccount": {
                        "description": "True when this counterparty is managed by more than one fund manager.",
                        "type": "boolean"
                    },
                    "Name": {
                        "description": "Full name of the counterparty",
                        "type": "string"
                    },
                    "NotDefaultConfirmProfile": {
                        "description": "When true, a confirmation profile should not be assigned for this counterparty unless it is configured directly on the counterparty.",
                        "type": "boolean"
                    },
                    "ParentCompany": {
                        "description": "Parent company of the counterparty",
                        "type": "string"
                    },
                    "ParentKey": {
                        "description": "Parent key.",
                        "type": "string"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "PrioritySettlement": {
                        "description": "When true, this counterparty's settlements should be processed with priority.",
                        "type": "boolean"
                    },
                    "Remarks": {
                        "description": "General remarks",
                        "type": "string"
                    },
                    "RequiresInternalTradeMessage": {
                        "type": "boolean"
                    },
                    "ReviewOneOffSSIAttach": {
                        "description": "When true, third party payment counterparty one-off SSIs must be reviewed.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SalesRepresentatives": {
                        "items": {
                            "description": "List of sales representatives associated to this counterparty.",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ShortName": {
                        "description": "Short name of the counterparty used for display when full name is too long",
                        "type": "string"
                    },
                    "SkipSettle": {
                        "description": "When true, trades for this counterparty should not settle in the back office.",
                        "type": "boolean"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "SplitComments": {
                        "type": "string"
                    },
                    "SplitDefaults": {
                        "properties": {
                            "Counterparty": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Percentage": {
                            }
                        },
                        "required": [
                            "Counterparty",
                            "Percentage"
                        ]
                    },
                    "SSIParent": {
                        "type": "string"
                    },
                    "StatusCMD": {
                        "description": "Status of the counterparty for commodities",
                        "type": "string"
                    },
                    "StatusStr": {
                        "type": "string"
                    },
                    "Subcustodian": {
                        "type": "string"
                    },
                    "Subtype": {
                        "description": "Classification of the counterparty according to the configurable counterparty subtype",
                        "type": "string"
                    },
                    "SuppressTBAAmendConfirmations": {
                        "description": "When true, this counterparty should not receive TBA confirmation amendments.",
                        "type": "boolean"
                    },
                    "SWIFTFields": {
                        "properties": {
                            "ConfirmationFieldType": {
                                "type": "string"
                            },
                            "Field72Line1": {
                                "type": "string"
                            },
                            "Field72Line2": {
                                "type": "string"
                            },
                            "Field72Line3": {
                                "type": "string"
                            },
                            "Field72Line4": {
                                "type": "string"
                            },
                            "Field72Line5": {
                                "type": "string"
                            },
                            "Field72Line6": {
                                "type": "string"
                            },
                            "Field83FormatOption": {
                                "description": "null. Possible values: 0 - A, 1 - J",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Field83Line1": {
                                "type": "string"
                            },
                            "Field83Line2": {
                                "type": "string"
                            },
                            "Field83Line3": {
                                "type": "string"
                            },
                            "Field83Line4": {
                                "type": "string"
                            },
                            "Field83Line5": {
                                "type": "string"
                            },
                            "Field87FormatOption": {
                                "description": "null. Possible values: 0 - A, 1 - J",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Field87Line1": {
                                "type": "string"
                            },
                            "Field87Line2": {
                                "type": "string"
                            },
                            "Field87Line3": {
                                "type": "string"
                            },
                            "Field87Line4": {
                                "type": "string"
                            },
                            "Field87Line5": {
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the SWIFT fields",
                                "type": "string"
                            }
                        },
                        "required": [
                            "ConfirmationFieldType"
                        ]
                    },
                    "TaxCode": {
                        "description": "Classification of the tax number according to the configurable tax types",
                        "type": "string"
                    },
                    "TaxNumber": {
                        "type": "string"
                    },
                    "TBAConfirmation": {
                        "description": "When true, this counterparty expects to receive TBA confirmations.",
                        "type": "boolean"
                    },
                    "ThirdPartyPayments": {
                        "description": "When true, counterparty one-off instructions can be extracted from the counterparty MT300 and saved on a trade automatically (provided SSI data is correct).",
                        "type": "boolean"
                    },
                    "ThirdPartyProvider": {
                        "description": "When CLS participant type = Third Party, the identifier of the Third Party Provider. Either the Third party provider identifier or the Third party provider BIC will be populated.",
                        "type": "string"
                    },
                    "ThirdPartyProviderBIC": {
                        "description": "When CLS participant type = Third Party, the BIC of the Third Party Provider. Either the Third party provider identifier or the Third party provider BIC will be populated.",
                        "type": "string"
                    },
                    "TrustBank": {
                        "type": "string"
                    },
                    "Type": {
                        "description": "Classification of the counterparty according to the configurable counterparty type",
                        "type": "string"
                    },
                    "TypeCMD": {
                        "items": {
                            "description": "Type of the counterparty for commodities",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "VendorAccountCode": {
                        "description": "Vendor Account Code",
                        "type": "string"
                    },
                    "VerifySignature": {
                        "description": "When true, a captured image to manually compare against signed confirm is required.",
                        "type": "boolean"
                    },
                    "WithholdingTaxExemptionReason": {
                        "description": "Why this counterparty is exempt from withholding tax.",
                        "type": "string"
                    },
                    "WithholdingTaxLiable": {
                        "description": "When true, this counterparty is liable for withholding tax.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "ShortName",
                    "Name"
                ]
            },
            "Counterparty.Address": {
                "properties": {
                    "AddressLine1": {
                        "description": "Address line 1.",
                        "type": "string"
                    },
                    "AddressLine2": {
                        "description": "Address line 2.",
                        "type": "string"
                    },
                    "AddressLine3": {
                        "description": "Address line 3.",
                        "type": "string"
                    },
                    "AddressLine4": {
                        "description": "Address line 4.",
                        "type": "string"
                    },
                    "AddressLine5": {
                        "description": "Address line 5.",
                        "type": "string"
                    },
                    "AddressLine6": {
                        "description": "(Temp) Address line 6.",
                        "type": "string"
                    },
                    "AddressLine7": {
                        "description": "(Temp) Address line 7.",
                        "type": "string"
                    },
                    "AddressTypeId": {
                        "type": "string"
                    },
                    "Area": {
                        "description": "Specifies the account owner's resident geographical region or area.",
                        "type": "string"
                    },
                    "Block": {
                        "description": "Area of land bounded by streets.",
                        "type": "string"
                    },
                    "BuildingName": {
                        "description": "Name of the building or house.",
                        "type": "string"
                    },
                    "BuildingNumber": {
                        "description": "Number that identifies the position of a building on a street.",
                        "type": "string"
                    },
                    "Country": {
                        "description": "Country of the address",
                        "type": "string"
                    },
                    "CountrySubDivision": {
                        "description": "Codified representation of the jurisdiction as published in ISO 3166-2.",
                        "type": "string"
                    },
                    "CountyIdentification": {
                        "description": "Identifier of a county.",
                        "type": "string"
                    },
                    "Department": {
                        "description": "Identification of a division of a large organization or building.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the address",
                        "type": "string"
                    },
                    "DistrictName": {
                        "description": "Name of a district, i.e. a part of a town or region.",
                        "type": "string"
                    },
                    "Email": {
                        "description": "Email of the address",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Fax": {
                        "description": "Fax Number of the address",
                        "type": "string"
                    },
                    "Floor": {
                        "description": "Floor or store within a building.",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Lot": {
                        "description": "Identification of an allotment of land.",
                        "type": "string"
                    },
                    "Phone": {
                        "description": "Phone number of the address",
                        "type": "string"
                    },
                    "PostCode": {
                        "description": "Post code of the address",
                        "type": "string"
                    },
                    "PostOfficeBox": {
                        "description": "Numbered box in a post office, assigned to a person or organization, where letters are kept until called for.",
                        "type": "string"
                    },
                    "Province": {
                        "description": "A territory governed as an administrative or political unit of a country.",
                        "type": "string"
                    },
                    "RegionIdentification": {
                        "description": "Identification of an administrative division of a country, state, or territory.",
                        "type": "string"
                    },
                    "ShortAddressLine1": {
                        "description": "Short address line 1.",
                        "type": "string"
                    },
                    "ShortAddressLine2": {
                        "description": "Short address line 2.",
                        "type": "string"
                    },
                    "ShortAddressLine3": {
                        "description": "Short address line 3.",
                        "type": "string"
                    },
                    "ShortAddressLine4": {
                        "description": "Short address line 4.",
                        "type": "string"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "State": {
                        "description": "State of the address",
                        "type": "string"
                    },
                    "Street": {
                        "description": "Street of the address",
                        "type": "string"
                    },
                    "SubDepartment": {
                        "description": "Identification of a sub-division of a large organization or building.",
                        "type": "string"
                    },
                    "Town": {
                        "description": "Town of the address",
                        "type": "string"
                    }
                },
                "required": [
                    "AddressTypeId"
                ]
            },
            "Counterparty.BankAccount": {
                "properties": {
                    "ABANumber": {
                        "description": "ABA routing number for the account",
                        "type": "string"
                    },
                    "AccountName": {
                        "description": "The account name for this account",
                        "type": "string"
                    },
                    "AccountNumber": {
                        "type": "string"
                    },
                    "Default": {
                        "description": "Default account for the counterparty",
                        "type": "boolean"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "description": "Display name of the Bank account",
                        "type": "string"
                    },
                    "Remarks": {
                        "description": "General remarks",
                        "type": "string"
                    },
                    "SwiftCode": {
                        "type": "string"
                    },
                    "ViaBank": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Counterparty.BICTypeRelation": {
                "properties": {
                    "BIC": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Type": {
                        "type": "string"
                    }
                },
                "required": [
                    "Type",
                    "BIC"
                ]
            },
            "Counterparty.BusinessUnitSubEntity": {
                "properties": {
                    "BusinessUnit": {
                        "type": "string"
                    },
                    "Currency": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    }
                },
                "required": [
                    "BusinessUnit"
                ]
            },
            "Counterparty.ClearingCode": {
                "properties": {
                    "ClearingFormat": {
                        "type": "string"
                    },
                    "ClearingSystem": {
                        "type": "string"
                    },
                    "Code": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Type": {
                        "type": "string"
                    }
                },
                "required": [
                    "ClearingFormat",
                    "Type",
                    "Code",
                    "ClearingSystem"
                ]
            },
            "Counterparty.Contact": {
                "properties": {
                    "ContactTypeId": {
                        "description": "Classification of the contact according to the configurable contact types",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the contact",
                        "type": "string"
                    },
                    "Email": {
                        "description": "Main email address of the contact",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Fax": {
                        "description": "Main fax number of the contact",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Mobile": {
                        "description": "Mobile phone number of the contact.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the contact",
                        "type": "string"
                    },
                    "NamePrefix": {
                        "description": "Prefix to apply to the contact name.",
                        "type": "string"
                    },
                    "Other": {
                        "description": "Free use text fields for comments, remarks etc",
                        "type": "string"
                    },
                    "Phone": {
                        "description": "Main phone number of the contact",
                        "type": "string"
                    },
                    "Signature": {
                        "description": "The image of the signature of the person identified by this contact",
                        "format": "binary",
                        "type": "string"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Counterparty.DepositoryCode": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "Format": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    }
                },
                "required": [
                    "Format",
                    "Code"
                ]
            },
            "Counterparty.Farm": {
                "properties": {
                    "Description": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "SplitDefaults": {
                        "properties": {
                            "Counterparty": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Percentage": {
                            }
                        },
                        "required": [
                            "Counterparty",
                            "Percentage"
                        ]
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Counterparty.Farm.Split": {
                "properties": {
                    "Counterparty": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Percentage": {
                    }
                },
                "required": [
                    "Counterparty",
                    "Percentage"
                ]
            },
            "Counterparty.InvestmentManager": {
                "properties": {
                    "Default": {
                        "type": "boolean"
                    },
                    "Id": {
                        "description": "Primary identifier of the Investment manager. If not provided while creating Investment manager the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "InvestmentManager": {
                        "type": "string"
                    }
                },
                "required": [
                    "InvestmentManager"
                ]
            },
            "Counterparty.Split": {
                "properties": {
                    "Counterparty": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Percentage": {
                    }
                },
                "required": [
                    "Counterparty",
                    "Percentage"
                ]
            },
            "Counterparty.SWIFTFields": {
                "properties": {
                    "ConfirmationFieldType": {
                        "type": "string"
                    },
                    "Field72Line1": {
                        "type": "string"
                    },
                    "Field72Line2": {
                        "type": "string"
                    },
                    "Field72Line3": {
                        "type": "string"
                    },
                    "Field72Line4": {
                        "type": "string"
                    },
                    "Field72Line5": {
                        "type": "string"
                    },
                    "Field72Line6": {
                        "type": "string"
                    },
                    "Field83FormatOption": {
                        "description": "null. Possible values: 0 - A, 1 - J",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Field83Line1": {
                        "type": "string"
                    },
                    "Field83Line2": {
                        "type": "string"
                    },
                    "Field83Line3": {
                        "type": "string"
                    },
                    "Field83Line4": {
                        "type": "string"
                    },
                    "Field83Line5": {
                        "type": "string"
                    },
                    "Field87FormatOption": {
                        "description": "null. Possible values: 0 - A, 1 - J",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Field87Line1": {
                        "type": "string"
                    },
                    "Field87Line2": {
                        "type": "string"
                    },
                    "Field87Line3": {
                        "type": "string"
                    },
                    "Field87Line4": {
                        "type": "string"
                    },
                    "Field87Line5": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the SWIFT fields",
                        "type": "string"
                    }
                },
                "required": [
                    "ConfirmationFieldType"
                ]
            },
            "CounterpartyGroup": {
                "properties": {
                    "CounterpartyExclude": {
                        "deprecated": true,
                        "description": "Use 'Exclude' instead.",
                        "type": "string"
                    },
                    "CounterpartyGroupInclude": {
                        "deprecated": true,
                        "description": "Use 'GroupInclude' instead.",
                        "type": "string"
                    },
                    "CounterpartyInclude": {
                        "deprecated": true,
                        "description": "Use 'Include' instead.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Counterparty group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "CounterpartyHierarchy": {
                "properties": {
                    "Deleted": {
                        "description": "Hierarchy has been deleted and will be removed after the next restart",
                        "type": "boolean"
                    },
                    "Depth": {
                        "type": "string"
                    },
                    "Description": {
                        "description": "Human readable description for the hierarchy",
                        "type": "string"
                    },
                    "EnforcedType": {
                        "type": "string"
                    },
                    "EntityClassStr": {
                        "deprecated": true,
                        "description": "Use the native API instead, which has different entity types per class.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Counterparty hierarchy",
                        "type": "string"
                    },
                    "IsDefault": {
                        "deprecated": true,
                        "description": "Not needed as Counterparties and Books don't have to belong to a hierarchy anymore.",
                        "type": "boolean"
                    },
                    "LevelDefault": {
                        "properties": {
                            "CustomField": {
                                "description": "Hidden field to keep reference of custom field entity.",
                                "type": "string"
                            },
                            "DefaultValue": {
                                "properties": {
                                    "DefaultValue": {
                                        "description": "The value of the default",
                                        "type": "string"
                                    },
                                    "Id": {
                                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                        "type": "string"
                                    },
                                    "Level": {
                                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "Level"
                                ]
                            },
                            "FieldName": {
                                "description": "Name of field to default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "FieldName"
                        ]
                    },
                    "Levels": {
                        "properties": {
                            "EnforcedSubtype": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "Level": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "Name": {
                                "description": "Level Name",
                                "type": "string"
                            }
                        }
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "CounterpartyHierarchy.CounterpartyLevel": {
                "properties": {
                    "EnforcedSubtype": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Level": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "description": "Level Name",
                        "type": "string"
                    }
                }
            },
            "CounterpartyHierarchy.LevelDefault": {
                "properties": {
                    "CustomField": {
                        "description": "Hidden field to keep reference of custom field entity.",
                        "type": "string"
                    },
                    "DefaultValue": {
                        "properties": {
                            "DefaultValue": {
                                "description": "The value of the default",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Level": {
                                "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Level"
                        ]
                    },
                    "FieldName": {
                        "description": "Name of field to default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default. If not provided while creating Level default the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    }
                },
                "required": [
                    "FieldName"
                ]
            },
            "CounterpartyHierarchy.LevelDefault.LevelDefaultValue": {
                "properties": {
                    "DefaultValue": {
                        "description": "The value of the default",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Level default value. If not provided while creating Level default value the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Level": {
                        "description": "The level in the hierarchy that the entity must occupy to trigger the default",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Level"
                ]
            },
            "CounterpartyStatusCMD": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the CMD status. If not provided while creating CMD status the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Full name of counterparty status",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "CounterpartySubtype": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Counterparty Subtype description",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Counterparty subtype. If not provided while creating Counterparty subtype the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Counterparty Subtype Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "CounterpartyType": {
                "properties": {
                    "Description": {
                        "description": "A meaningful Counterparty Type description",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Counterparty type. If not provided while creating Counterparty type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Counterparty Type Name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "CounterpartyTypeCMD": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the CMD type. If not provided while creating CMD type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of counterparty type",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Country": {
                "properties": {
                    "Alpha2": {
                        "description": "ISO 3166-1 alpha-2 code",
                        "type": "string"
                    },
                    "Alpha3": {
                        "description": "ISO 3166-1 alpha-3 code",
                        "type": "string"
                    },
                    "Calendar": {
                        "description": "Calendar for country.",
                        "type": "string"
                    },
                    "Currency": {
                        "description": "The main currency of this country.",
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Country. If not provided while creating Country the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "NumericCode": {
                        "description": "ISO 3166-1 numeric code",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SEPA": {
                        "description": "Is this country a member of the 'Single Euro Payments Area' (SEPA)?",
                        "type": "boolean"
                    }
                }
            },
            "Currency": {
                "properties": {
                    "ActiveCMD": {
                        "description": "Activation status of the currency for commodities. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "BusinessDate": {
                        "description": "Business date for currency.",
                        "type": "string"
                    },
                    "Calendar": {
                        "description": "Calendar for currency.",
                        "type": "string"
                    },
                    "CLSEnabled": {
                        "description": "CLS (Continuous Linked Settlement) enabled flag. This flag identifies whether risk is associated with the currency.",
                        "type": "boolean"
                    },
                    "DayCntConvention": {
                        "description": "null. Possible values: 0 - Undef, 2 - ACT/365, 3 - ACT/360, 11 - 30/360",
                        "enum": [
                            0,
                            2,
                            3,
                            11
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "DisplayName": {
                        "type": "string"
                    },
                    "FinancialCenter": {
                        "description": "The Principal Financial Center of the currency.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Currency. If not provided while creating Currency the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "ISOCode": {
                        "description": "ISO 4217 alpha code",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "NumericCode": {
                        "description": "ISO 4217 numeric code",
                        "type": "string"
                    },
                    "Ranking": {
                        "description": "Ranking is used to set the order or priority.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SettlDays": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Symbol": {
                        "description": "Currency symbol",
                        "type": "string"
                    },
                    "Type": {
                        "description": "null. Possible values: 0 - Currency, 1 - Complementary currency, 2 - Precious metal, 3 - Funds code, 4 - Bond market unit, 5 - Unit of account, 6 - Special",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "ValueDec": {
                        "description": "Number of decimal places in value",
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "CustomField": {
                "properties": {
                    "DefaultValueExpr": {
                        "description": "Expression to calculate the default value of the custom field",
                        "type": "string"
                    },
                    "Deleted": {
                        "description": "Custom field has been deleted and will be removed after the next restart",
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "Human readable description for the custom field",
                        "type": "string"
                    },
                    "Editable": {
                        "description": "Flag indicating the editability of the field",
                        "type": "boolean"
                    },
                    "EntityClass": {
                        "description": "Entity type to which the custom field needs to be added to",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Identifier": {
                        "description": "Additional Identifier of the Custom field used as record field name and within other technical APIs. Only alpha-numeric characters and underscores are allowed.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Display name of the custom field",
                        "type": "string"
                    },
                    "Overridden": {
                        "description": "Custom field overrides an existing native field",
                        "type": "boolean"
                    },
                    "ReferenceType": {
                        "description": "The entity type of the reference, in case the type of the field is Reference or ReferenceSet.",
                        "type": "string"
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "description": "Field type of custom field. Possible values: 0 - String, 1 - Real, 2 - Integer, 3 - Date, 4 - Time, 5 - Boolean, 6 - Date and time, 7 - Reference, 8 - Set of references",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "ValidationExpr": {
                        "description": "Custom Field value validator expression",
                        "type": "string"
                    },
                    "ValidationFailureMessage": {
                        "description": "Validation failure message ",
                        "type": "string"
                    }
                },
                "required": [
                    "Type",
                    "Identifier",
                    "EntityClass"
                ]
            },
            "DealogicIndustry": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Dealogic industry. If not provided while creating Dealogic industry the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "DealogicId",
                    "Code",
                    "Name"
                ]
            },
            "DepositoryCodeFormat": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Depository code format. If not provided while creating Depository code format the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MTCode": {
                        "description": "Code to be used on the MT messages.",
                        "type": "string"
                    },
                    "MXCode": {
                        "description": "Code to be used on the MX messages.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Descriptive name of the format",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "EconomicArea": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Economic area. If not provided while creating Economic area the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Full name of the economic area",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "EntityConfig": {
                "properties": {
                    "EntityCategory": {
                        "type": "string"
                    },
                    "EntityClass": {
                        "type": "string"
                    },
                    "FeedConfigs": {
                        "properties": {
                            "ChainName": {
                                "type": "string"
                            },
                            "Feed": {
                                "type": "string"
                            },
                            "FeedIdField": {
                                "description": "RDX entity field used to map feed data to entity instances",
                                "type": "string"
                            },
                            "FeedSourceType": {
                                "description": "null. Possible values: 0 - Plain, 1 - Golden",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "FeedType": {
                                "description": "null. Possible values: 1 - Chain, 2 - Pattern, 3 - Queue",
                                "enum": [
                                    1,
                                    2,
                                    3
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Filter": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "QueueFunctionName": {
                                "type": "string"
                            },
                            "QueueParam": {
                                "type": "string"
                            },
                            "TriggerType": {
                                "description": "null. Possible values: 1 - None, 2 - Service, 3 - xRS Context, 4 - CMStatus",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "TriggerValue": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Feed"
                        ]
                    },
                    "FieldConfigs": {
                        "properties": {
                            "Feed": {
                                "type": "string"
                            },
                            "FeedField": {
                                "type": "string"
                            },
                            "FieldConfigIdentifier": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "RDXFieldName": {
                                "type": "string"
                            },
                            "ReferenceCreation": {
                                "description": "null. Possible values: 1 - No, 2 - Auto",
                                "enum": [
                                    1,
                                    2
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "ReferenceFieldId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "RDXFieldName",
                            "Feed"
                        ]
                    },
                    "Id": {
                        "type": "string"
                    },
                    "NumberOfFeeds": {
                        "type": "string"
                    },
                    "NumberOfFields": {
                        "type": "string"
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "EntityClass"
                ]
            },
            "EntityConfig.FeedConfig": {
                "properties": {
                    "ChainName": {
                        "type": "string"
                    },
                    "Feed": {
                        "type": "string"
                    },
                    "FeedIdField": {
                        "description": "RDX entity field used to map feed data to entity instances",
                        "type": "string"
                    },
                    "FeedSourceType": {
                        "description": "null. Possible values: 0 - Plain, 1 - Golden",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "FeedType": {
                        "description": "null. Possible values: 1 - Chain, 2 - Pattern, 3 - Queue",
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Filter": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "QueueFunctionName": {
                        "type": "string"
                    },
                    "QueueParam": {
                        "type": "string"
                    },
                    "TriggerType": {
                        "description": "null. Possible values: 1 - None, 2 - Service, 3 - xRS Context, 4 - CMStatus",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "TriggerValue": {
                        "type": "string"
                    }
                },
                "required": [
                    "Feed"
                ]
            },
            "EntityConfig.FieldConfig": {
                "properties": {
                    "Feed": {
                        "type": "string"
                    },
                    "FeedField": {
                        "type": "string"
                    },
                    "FieldConfigIdentifier": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "RDXFieldName": {
                        "type": "string"
                    },
                    "ReferenceCreation": {
                        "description": "null. Possible values: 1 - No, 2 - Auto",
                        "enum": [
                            1,
                            2
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "ReferenceFieldId": {
                        "type": "string"
                    }
                },
                "required": [
                    "RDXFieldName",
                    "Feed"
                ]
            },
            "EventDate": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the Event date. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "CustomSortOrder": {
                        "description": "Fractional number defining the custom sort order"
                    },
                    "Default": {
                        "type": "boolean"
                    },
                    "Description": {
                        "description": "Name of event in a textual form",
                        "type": "string"
                    },
                    "Group": {
                        "description": "null. Possible values: 0 - Arrival, 1 - Ballast, 2 - Berthing, 3 - Bunker, 4 - Cargo, 5 - Contract, 6 - Depart, 7 - Inspection, 8 - Lightering, 9 - Miscellaneous, 10 - Pilot, 11 - Shift, 12 - Stop, 13 - STS, 14 - Tugs, 15 - Waiting, 16 - Weather",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Event date. If not provided while creating Event date the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "NextDate": {
                        "description": "Activity this Event date must be less than",
                        "type": "string"
                    },
                    "Offset": {
                        "description": "Days +- the configured Offset date"
                    },
                    "OffsetDate": {
                        "description": "The Event date the offset is applied to",
                        "type": "string"
                    },
                    "PreviousDate": {
                        "description": "Activity this Event date must be greater than",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Special": {
                        "description": "Used to indicate arrival or departure time in schedule. Possible values: 0 - Arrival, 1 - Departure, 2 - Arrived port, 3 - Departed port, 4 - ETB, 5 - ETS, 6 - Commenced, 7 - Completed, 8 - Laytime begin, 9 - Laytime end",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Stoppage": {
                        "items": {
                            "description": "Stops cargo operation from counting. Possible values: 0 - Start, 1 - Stop",
                            "enum": [
                                0,
                                1
                            ],
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "Type": {
                        "items": {
                            "description": "Type of vessel. Possible values: 0 - Dry, 1 - Tank, 2 - Gas, 3 - Dry/Tank",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "Group",
                    "Type",
                    "Name"
                ]
            },
            "Exchange": {
                "properties": {
                    "Description": {
                        "description": "Description or long name of the Exchange.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Exchange. If not provided while creating Exchange the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Exchange.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Feed": {
                "properties": {
                    "Currency": {
                        "type": "string"
                    },
                    "FeedSourceType": {
                        "description": "null. Possible values: 0 - Plain, 1 - Golden",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "FeedType": {
                        "description": "null. Possible values: 1 - Chain, 2 - Pattern, 3 - Queue",
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RequiresRestart": {
                        "description": "Configuration entity has recently been added and requires a restart.",
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Source": {
                        "type": "string"
                    },
                    "TriggerType": {
                        "description": "null. Possible values: 1 - None, 2 - Service, 3 - xRS Context, 4 - CMStatus",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "TriggerValue": {
                        "type": "string"
                    }
                },
                "required": [
                    "FeedType",
                    "Name"
                ]
            },
            "FreightCharge": {
                "properties": {
                    "AccountType": {
                        "description": "null. Possible values: 0 - Detail, 1 - Group",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Active": {
                        "description": "Activation status of the Charge. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "DisplayName": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SignIndicator": {
                        "description": "null. Possible values: 0 - +1, 1 - -1",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "TotalTo": {
                        "type": "string"
                    },
                    "Unit": {
                        "description": "null. Possible values: 0 - Lumpsum, 1 - Unit",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "VoyageTypes": {
                        "items": {
                            "description": "null. Possible values: 0 - Cargo, 1 - TC, 2 - Voyage, 3 - Port, 4 - Freight, 5 - Hire, 6 - Owner",
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "VoyageTypes",
                    "Unit",
                    "AccountType",
                    "Code",
                    "Name"
                ]
            },
            "FreightIndex": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the index. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Calculated": {
                        "description": "Rate is calculated based on a formula",
                        "type": "boolean"
                    },
                    "Calendar": {
                        "description": "Trading calendar of the index",
                        "type": "string"
                    },
                    "CommissionPercent": {
                    },
                    "DefaultPrecission": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "description": "Description of the index",
                        "type": "string"
                    },
                    "DueDateCalendar": {
                        "type": "string"
                    },
                    "Exchange": {
                        "type": "string"
                    },
                    "Formula": {
                        "description": "Rate formula",
                        "type": "string"
                    },
                    "ForwardRate": {
                        "description": "Forward rates available",
                        "type": "boolean"
                    },
                    "Id": {
                        "description": "Primary identifier of the Freight index. If not provided while creating Freight index the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "LinkedEstimate": {
                        "type": "string"
                    },
                    "MTPerDay": {
                    },
                    "Name": {
                        "description": "Name of the index",
                        "type": "string"
                    },
                    "PeriodsToRemain": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "RateCurrency": {
                        "type": "string"
                    },
                    "RateValueType": {
                        "description": "null. Possible values: 0 - Worldscale, 1 - Day, 2 - MT, 3 - Volatiltiy, 4 - Lots, 5 - Lumpsum, 6 - BBL, 7 - Box",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Remarks": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SizeClass": {
                        "type": "string"
                    },
                    "StandardVoyageDuration": {
                    },
                    "StandardVoyageQuantity": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "TradingPlace": {
                        "type": "string"
                    },
                    "Type": {
                        "description": "null. Possible values: 0 - Tanker, 1 - Dry, 2 - Bunker, 3 - Volatiltiy, 4 - Volume",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "VolatilityPercent": {
                    },
                    "VolatilityRoute": {
                        "type": "string"
                    }
                },
                "required": [
                    "RateCurrency",
                    "Name"
                ]
            },
            "FreightPaymentTerm": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the Freight payment term. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "DaysOfMonth": {
                        "items": {
                            "description": "One or multiple days of a month [1..31]",
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Freight payment term. If not provided while creating Freight payment term the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Description of Payment term",
                        "type": "string"
                    },
                    "Payment1Event": {
                        "description": "1st Payment event. Possible values: 0 - Loading completed, 1 - Before breaking bulk, 2 - Arrival load port, 3 - Departure load port, 4 - Arrival discharge port, 5 - Departure discharge port, 6 - Bill of lading date, 7 - Invoice date, 8 - Discharge completed, 9 - Laytime agreed",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment1Offset": {
                        "description": "Payment 1 offset in days",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment1Percent": {
                        "description": "1st Payment %",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment1Timing": {
                        "description": "Payment is before or after Payment 1 event. Possible values: 0 - Before, 1 - After",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment2Event": {
                        "description": "2nd Payment event. Possible values: 0 - Loading completed, 1 - Before breaking bulk, 2 - Arrival load port, 3 - Departure load port, 4 - Arrival discharge port, 5 - Departure discharge port, 6 - Bill of lading date, 7 - Invoice date, 8 - Discharge completed, 9 - Laytime agreed",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment2Offset": {
                        "description": "Payment 2 offset in days",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment2Percent": {
                        "description": "2nd Payment %",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Payment2Timing": {
                        "description": "Payment is before or after Payment 2 event. Possible values: 0 - Before, 1 - After",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Reaccuring": {
                        "description": "Reaccuring every X days.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "TimeCharterType": {
                        "description": "null. Possible values: 0 - Semi monthly, 1 - Every X days, 2 - On X days of month, 3 - Every X months",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "description": "Type of the freight payment: Voyage charter or Time charter.. Possible values: 0 - Voyage charter, 1 - Time charter",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Type",
                    "Name"
                ]
            },
            "Future": {
                "properties": {
                    "Country": {
                        "description": "Country of the future.",
                        "type": "string"
                    },
                    "CurrencyStr": {
                        "description": "Currency of the future.",
                        "type": "string"
                    },
                    "Description": {
                        "description": "Description of the future.",
                        "type": "string"
                    },
                    "FutureProductCode": {
                        "description": "Future Type.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Future",
                        "type": "string"
                    },
                    "MaturityMonthYear": {
                        "description": "Year and month of the contract month (YYYYMM).",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SecurityType": {
                        "description": "Security Type.. Possible values: 0 - Undef, 1 - Fwd, 2 - Cash, 3 - Basis, 4 - Future, 5 - Option, 6 - Swap, 7 - Switch, 8 - Repo, 11 - Strategy, 12 - CDS, 13 - Equity, 14 - Fund, 15 - FX, 16 - CDS Curve, 17 - Repo Basket, 18 - MMCurvePoint, 19 - MMCurve",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Ticker": {
                        "type": "string"
                    }
                },
                "required": [
                    "MaturityMonthYear",
                    "FutureProductCode"
                ]
            },
            "GeoZone": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Geo zone. If not provided while creating Geo zone the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Zone": {
                        "type": "string"
                    }
                },
                "required": [
                    "Zone"
                ]
            },
            "GICSIndustry": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the GICS industry. If not provided while creating GICS industry the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Parent": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Type": {
                        "description": "null. Possible values: 0 - Sector, 1 - Industry group, 2 - Industry, 3 - Sub-Industry",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Type",
                    "Code",
                    "Name"
                ]
            },
            "Grade": {
                "properties": {
                    "Description": {
                        "description": "Description or long name of the Grade.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Grade. If not provided while creating Grade the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Grade.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Standard": {
                        "description": "Department that defines the grades acceptable to use for the Commodity",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "GradeFactor": {
                "properties": {
                    "Description": {
                        "description": "Description or long name of the Grade factor.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Grade factor. If not provided while creating Grade factor the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Grade factor.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Incoterm": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the term. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "description": "Description of the term",
                        "type": "string"
                    },
                    "DisplayName": {
                        "description": "Name and version of the term",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Incoterm. If not provided while creating Incoterm the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the term",
                        "type": "string"
                    },
                    "Remarks": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Version": {
                        "description": "Version of the term",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "InheritableField": {
                "properties": {
                    "CodeTypeField": {
                        "description": "Hidden field to keep reference of codeType field entity.",
                        "type": "string"
                    },
                    "CustomField": {
                        "description": "Hidden field to keep reference of custom field entity.",
                        "type": "string"
                    },
                    "EntityClass": {
                        "description": "Entity Type to which the Inheritable field needs to be added to",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the inheritable field",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "EntityClass",
                    "Name"
                ]
            },
            "InvestorType": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Investor type. If not provided while creating Investor type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "DealogicId",
                    "Code",
                    "Name"
                ]
            },
            "IonUser": {
                "properties": {
                    "BusinessUnitId": {
                        "description": "The BusinessUnit linked to this user. Mainly used in RIL flow",
                        "type": "string"
                    },
                    "BusinessUnitName": {
                        "description": "The BusinessUnit 'Name' field linked to this user.",
                        "type": "string"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "EntitySubtype": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "EntityType": {
                        "deprecated": true,
                        "description": "Not required.",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "Name": {
                        "description": "The name of the user. It is taken from the ION platform user 'UserName' field.",
                        "type": "string"
                    },
                    "PlatformUserId": {
                        "description": "Contains the same value as the UserID field of the platform user.",
                        "type": "string"
                    },
                    "RCFieldName": {
                        "description": "The BusinessUnit 'RCFieldName' field linked to this user.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SoftDeleted": {
                        "deprecated": true,
                        "description": "Soft deletion not supported.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "LaytimeTerm": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the Laytime term. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Days": {
                    },
                    "DaysFrom": {
                        "description": "null. Possible values: 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "DaysTo": {
                        "description": "null. Possible values: 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "description": "Description of the Laytime term",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Laytime term. If not provided while creating Laytime term the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the Laytime term",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "TimeFrom": {
                        "format": "time"
                    },
                    "TimeTo": {
                        "format": "time"
                    }
                },
                "required": [
                    "TimeFrom",
                    "TimeTo",
                    "DaysTo",
                    "DaysFrom",
                    "Name"
                ]
            },
            "LegalEntity": {
                "properties": {
                    "AcurisCreditRubricId": {
                        "type": "string"
                    },
                    "AcurisPrimeId": {
                        "type": "string"
                    },
                    "AcurisPrimeIndustry": {
                        "type": "string"
                    },
                    "Bank": {
                        "type": "boolean"
                    },
                    "BrandName": {
                        "type": "string"
                    },
                    "BusinessDescription": {
                        "type": "string"
                    },
                    "BusinessLocation": {
                        "type": "string"
                    },
                    "BusinessVersions": {
                        "properties": {
                            "Comment": {
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Business version. If not provided while creating Business version the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "LegalName": {
                                "type": "string"
                            },
                            "SourceURL": {
                                "type": "string"
                            },
                            "ValidTo": {
                                "type": "string"
                            },
                            "VersionId": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "VersionId",
                            "LegalName"
                        ]
                    },
                    "CentralIndexKey": {
                        "description": "The Central Index Key (CIK) is used on the SEC's computer systems to identify corporations and individual people who have filed disclosure with the SEC",
                        "type": "string"
                    },
                    "CompanyRegistrationId": {
                        "type": "string"
                    },
                    "ControlParent": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "DealogicIndustry": {
                        "type": "string"
                    },
                    "DisplayName": {
                        "description": "Brand name or Legal name, if Brand name is not available (read only)",
                        "type": "string"
                    },
                    "FinancialSponsor": {
                        "type": "boolean"
                    },
                    "FitchRating": {
                        "type": "string"
                    },
                    "GIC": {
                        "type": "string"
                    },
                    "GICSIndustry": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Legal entity. If not provided while creating Legal entity the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "IncorporationLocation": {
                        "type": "string"
                    },
                    "InvestmentStrategyDescription": {
                        "type": "string"
                    },
                    "InvestorStyle": {
                        "type": "string"
                    },
                    "InvestorType": {
                        "type": "string"
                    },
                    "IsInActive": {
                        "type": "boolean"
                    },
                    "LegalEntityIdentifier": {
                        "description": "Global identifier of the legal entity (LEI)",
                        "type": "string"
                    },
                    "LegalName": {
                        "type": "string"
                    },
                    "Logo": {
                        "format": "binary",
                        "type": "string"
                    },
                    "LogoURL": {
                        "type": "string"
                    },
                    "MajorityOwner": {
                        "type": "string"
                    },
                    "MoodysRating": {
                        "type": "string"
                    },
                    "OwnershipStakes": {
                        "properties": {
                            "Id": {
                                "description": "Primary identifier of the Ownership stake. If not provided while creating Ownership stake the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Owner": {
                                "type": "string"
                            },
                            "OwnershipPercent": {
                            }
                        },
                        "required": [
                            "Owner"
                        ]
                    },
                    "OwnershipType": {
                        "type": "string"
                    },
                    "PrimaryNAICS2017Industry": {
                        "type": "string"
                    },
                    "PrimaryTicker": {
                        "type": "string"
                    },
                    "ProperName": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SecondaryNAICS2017Industries": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "SelerityId": {
                        "type": "string"
                    },
                    "SnPRating": {
                        "type": "string"
                    },
                    "Synonyms": {
                        "properties": {
                            "Id": {
                                "description": "Primary identifier of the Legal entity synonym. If not provided while creating Legal entity synonym the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Name": {
                                "description": "Name of the Synonym",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "WebsiteAddress": {
                        "type": "string"
                    },
                    "XtractCompanyId": {
                        "type": "string"
                    },
                    "XtractEntityId": {
                        "type": "string"
                    },
                    "XtractSponsorId": {
                        "type": "string"
                    },
                    "XtractUnderwriterId": {
                        "type": "string"
                    }
                },
                "required": [
                    "DealogicId",
                    "LegalName"
                ]
            },
            "LegalEntity.AnalyticsBusinessVersion": {
                "properties": {
                    "Comment": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Business version. If not provided while creating Business version the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "LegalName": {
                        "type": "string"
                    },
                    "SourceURL": {
                        "type": "string"
                    },
                    "ValidTo": {
                        "type": "string"
                    },
                    "VersionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "VersionId",
                    "LegalName"
                ]
            },
            "LegalEntity.LegalEntitySynonym": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Legal entity synonym. If not provided while creating Legal entity synonym the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name of the Synonym",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "LegalEntity.OwnershipStake": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Ownership stake. If not provided while creating Ownership stake the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Owner": {
                        "type": "string"
                    },
                    "OwnershipPercent": {
                    }
                },
                "required": [
                    "Owner"
                ]
            },
            "ModeOfTransport": {
                "properties": {
                    "Description": {
                        "description": "Description or long name of the Mode of transport.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Mode of transport. If not provided while creating Mode of transport the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Mode of transport.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "UnitOfMeasure": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "NAICS2017Industry": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the NAICS 2017 industry. If not provided while creating NAICS 2017 industry the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "DealogicId",
                    "Code",
                    "Name"
                ]
            },
            "OwnershipType": {
                "properties": {
                    "Code": {
                        "type": "string"
                    },
                    "DealogicId": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Ownership type. If not provided while creating Ownership type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "DealogicId",
                    "Code",
                    "Name"
                ]
            },
            "Packaging": {
                "properties": {
                    "Description": {
                        "description": "Description or long name of the Packaging.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Packaging. If not provided while creating Packaging the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Name or short name of the Packaging.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Port": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "AlternativeNames": {
                        "properties": {
                            "Active": {
                                "description": "null. Possible values: 0 - Inactive, 1 - Active",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Id": {
                                "description": "Primary identifier of the Alternative port name. If not provided while creating Alternative port name the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "Canal": {
                        "type": "boolean"
                    },
                    "CO2Zone": {
                        "description": "null. Possible values: 0 - Europe, 1 - Other",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Country": {
                        "type": "string"
                    },
                    "GeoZoneNumber": {
                        "description": "Geo zone",
                        "format": "int32",
                        "type": "integer"
                    },
                    "IceClass": {
                        "type": "boolean"
                    },
                    "Id": {
                        "description": "Primary identifier of the Port. If not provided while creating Port the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Latitude": {
                    },
                    "Longitude": {
                    },
                    "LSZone": {
                        "description": "Low Sulphur Zone",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Full name of the Location",
                        "type": "string"
                    },
                    "OpenLoopScrubberRestricted": {
                        "type": "boolean"
                    },
                    "Remarks": {
                        "type": "string"
                    },
                    "RestrictBallast": {
                        "type": "boolean"
                    },
                    "RestrictLaden": {
                        "type": "boolean"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "RiverLake": {
                        "type": "string"
                    },
                    "Terminals": {
                        "properties": {
                            "Active": {
                                "description": "null. Possible values: 0 - Inactive, 1 - Active",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "AllowedCommodities": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "Beam": {
                            },
                            "Default": {
                                "description": "Default terminal",
                                "type": "boolean"
                            },
                            "Draft": {
                            },
                            "Id": {
                                "description": "Primary identifier of the Port terminal. If not provided while creating Port terminal the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Latitude": {
                            },
                            "LOA": {
                            },
                            "Longitude": {
                            },
                            "Name": {
                                "description": "Terminal name",
                                "type": "string"
                            },
                            "Owner": {
                                "type": "string"
                            },
                            "PilotDistance": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "PilotDuration": {
                            },
                            "Restrictions": {
                                "type": "string"
                            },
                            "SeasonalZone": {
                                "description": "null. Possible values: 0 - Summer, 1 - Winter",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "WaterType": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "TimeZone": {
                    },
                    "TimeZoneGroup": {
                        "type": "string"
                    },
                    "UNCode": {
                        "description": "UNCode",
                        "type": "string"
                    },
                    "Zones": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "TimeZone",
                    "Country",
                    "GeoZoneNumber",
                    "Name"
                ]
            },
            "Port.AlternativePortName": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Alternative port name. If not provided while creating Alternative port name the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Port.PortTerminal": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "AllowedCommodities": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Beam": {
                    },
                    "Default": {
                        "description": "Default terminal",
                        "type": "boolean"
                    },
                    "Draft": {
                    },
                    "Id": {
                        "description": "Primary identifier of the Port terminal. If not provided while creating Port terminal the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Latitude": {
                    },
                    "LOA": {
                    },
                    "Longitude": {
                    },
                    "Name": {
                        "description": "Terminal name",
                        "type": "string"
                    },
                    "Owner": {
                        "type": "string"
                    },
                    "PilotDistance": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "PilotDuration": {
                    },
                    "Restrictions": {
                        "type": "string"
                    },
                    "SeasonalZone": {
                        "description": "null. Possible values: 0 - Summer, 1 - Winter",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "WaterType": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Rest4EyesMessage": {
                "properties": {
                    "Message": {
                        "description": "Message",
                        "type": "string"
                    }
                }
            },
            "RestServiceError": {
                "properties": {
                    "ErrCode": {
                        "description": "Error code",
                        "format": "int32",
                        "type": "integer"
                    },
                    "ErrorMessage": {
                        "description": "Error message",
                        "type": "string"
                    }
                }
            },
            "SalesRep": {
                "properties": {
                    "Active": {
                        "description": "Activation status of the Sales representative. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "AssistantFirstName": {
                        "type": "string"
                    },
                    "AssistantLastName": {
                        "type": "string"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "FirstName": {
                        "description": "Salesperson first name",
                        "type": "string"
                    },
                    "FullName": {
                        "description": "Salesperson first and last name (read only)",
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "LastName": {
                        "description": "Salesperson last name",
                        "type": "string"
                    },
                    "Number": {
                        "description": "Sales representative number",
                        "type": "string"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Phone": {
                        "description": "Sales representative's phone number",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "SalesRepGroup": {
                "properties": {
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Sales representative group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "TaxCode": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Tax code. If not provided while creating Tax code the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Tax code name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "TaxCode": {
                        "type": "string"
                    },
                    "TaxRate": {
                    }
                },
                "required": [
                    "TaxCode",
                    "TaxRate",
                    "Name"
                ]
            },
            "UnitOfMeasure": {
                "properties": {
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Unit of measure. If not provided while creating Unit of measure the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Unit of meassure name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "UOMType": {
                        "description": "Type of unit of measure",
                        "type": "string"
                    },
                    "VesselTypeDry": {
                        "description": "Vessel type 'Dry' supports the unit of meassure",
                        "type": "boolean"
                    },
                    "VesselTypeGas": {
                        "description": "Vessel type 'Gas' supports the unit of meassure",
                        "type": "boolean"
                    },
                    "VesselTypeTank": {
                        "description": "Vessel type 'Tank' supports the unit of meassure",
                        "type": "boolean"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "UnitOfMeasureType": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Unit of measure type. If not provided while creating Unit of measure type the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Unit of meassure type name",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel": {
                "properties": {
                    "A60": {
                        "description": "A60",
                        "type": "boolean"
                    },
                    "AirDraught": {
                        "description": "Maximum air draught of the ship. Air draught is the distance from the surface of the water to the highest point on a ship."
                    },
                    "AuxiliaryConsumptions": {
                        "properties": {
                            "AtSea": {
                                "description": "Additional consumption at sea"
                            },
                            "Clean": {
                                "description": "Tank Cleaning",
                                "format": "int32",
                                "type": "integer"
                            },
                            "Discharge": {
                                "description": "Tank Discharge Consumption"
                            },
                            "EngineType": {
                                "description": "Engine Type. Possible values: 0 - Main, 1 - Aux1, 2 - Aux2, 3 - Aux3",
                                "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Heat": {
                                "description": "Tank Heating",
                                "format": "int32",
                                "type": "integer"
                            },
                            "Id": {
                                "description": "Primary identifier of the Vessel auxiliary consumption. If not provided while creating Vessel auxiliary consumption the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Idle": {
                                "description": "Idle Consumption"
                            },
                            "Inert": {
                                "description": "Tank Inerting",
                                "format": "int32",
                                "type": "integer"
                            },
                            "Load": {
                                "description": "Tank Loading Consumption"
                            },
                            "MaintTemp": {
                                "description": "Tank Maintain Temperature",
                                "format": "int32",
                                "type": "integer"
                            },
                            "Work": {
                                "description": "Dry Working Consumption"
                            }
                        },
                        "required": [
                            "EngineType"
                        ]
                    },
                    "BaleCubic": {
                        "description": "Bale capacity of cargo holds",
                        "format": "int32",
                        "type": "integer"
                    },
                    "BallastCapacity": {
                        "description": "Ballast capasity",
                        "format": "int32",
                        "type": "integer"
                    },
                    "BallastTanks": {
                        "description": "Double of Ballast tanks",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Beam": {
                        "description": "Beam (M)"
                    },
                    "BowThrusters": {
                        "description": "Number of bow thrusters",
                        "format": "int32",
                        "type": "integer"
                    },
                    "BuiltDate": {
                        "description": "Date vessel was delivered to owner",
                        "format": "date"
                    },
                    "BunkerTanks": {
                        "properties": {
                            "Capacity": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "CapacityUnit": {
                                "description": "Unit of measure",
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Bunker tank. If not provided while creating Bunker tank the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "CallSign": {
                        "description": "Call Sign of vessel",
                        "type": "string"
                    },
                    "Cars": {
                        "description": "Car carrying capacity",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Classification": {
                        "description": "Ship classification society",
                        "type": "string"
                    },
                    "CO2": {
                        "type": "boolean"
                    },
                    "CodeMappingJsonFmt": {
                        "description": "List of all available code type values. DEPRECATED: Use native CT_ fields instead.",
                        "type": "string"
                    },
                    "Constants": {
                        "description": "Standard constant value (MT)",
                        "format": "int32",
                        "type": "integer"
                    },
                    "CountryOfBuilder": {
                        "description": "Country of Builder",
                        "type": "string"
                    },
                    "Cranes": {
                        "description": "No. of Cranes",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Deadweight": {
                        "description": "Dead weight",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "Displacement": {
                        "description": "The amount of water (in tons) displaced by the ship (light ship)",
                        "format": "int32",
                        "type": "integer"
                    },
                    "DoubleHull": {
                        "type": "boolean"
                    },
                    "Draft": {
                        "description": "Maximum draft of the ship. Draft is the distance between the waterline and the bottom of the hull (keel)."
                    },
                    "EEXI": {
                        "description": "Energy Efficiency Existing Ship Index"
                    },
                    "Emissions": {
                        "properties": {
                            "CIIRating": {
                                "description": "Carbon Intensity Indicator (CII) rating grade YTD. Possible values: 0 - A, 1 - B, 2 - C, 3 - D, 4 - E",
                                "enum": [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "CIIValue": {
                                "description": "Carbon Intensity Indicator (CII) rating value"
                            },
                            "CIIValueYTD": {
                                "description": "Carbon Intensity Indicator (CII) rating value current YTD"
                            },
                            "CO2YTD": {
                                "description": "CO2 consumed YTD"
                            },
                            "DistanceYTD": {
                                "description": "Distance travelled YTD"
                            },
                            "EEXI": {
                                "description": "Energy Efficiency Existing Ship Index"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "MTYTD": {
                                "description": "MT cargo YTD"
                            },
                            "RequiredCIIValue": {
                                "description": "Required Carbon Intensity Indicator (CII) rating value"
                            },
                            "RequiredEEXI": {
                                "description": "Required Energy Efficiency Existing Ship Index"
                            },
                            "Year": {
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "Year"
                        ]
                    },
                    "EngineBuilder": {
                        "description": "Engine Builder",
                        "type": "string"
                    },
                    "EngineMake": {
                        "description": "Engine designer",
                        "type": "string"
                    },
                    "EngineModel": {
                        "type": "string"
                    },
                    "Engines": {
                        "description": "Double of engines",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Flag": {
                        "type": "string"
                    },
                    "FreshWater": {
                        "description": "Fresh water on board (MT)",
                        "format": "int32",
                        "type": "integer"
                    },
                    "GasCubic": {
                        "description": "The gas cubic capacity of the cargo tanks when filled to 100% of capacity",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Gear": {
                        "description": "Is ship geared",
                        "type": "boolean"
                    },
                    "GrainCubic": {
                        "description": "Cubic capacity of cargo holds for grain (and other loose dry commodities)",
                        "format": "int32",
                        "type": "integer"
                    },
                    "GrossTonnage": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Holds": {
                        "properties": {
                            "Coating": {
                                "type": "string"
                            },
                            "HatchCenterDistance": {
                            },
                            "HatchDimensionX": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "HatchDimensionY": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "Hatches": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "HatchType": {
                                "type": "string"
                            },
                            "Id": {
                                "description": "Primary identifier of the Hold. If not provided while creating Hold the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "HullNumber": {
                        "description": "The Hull Identification Number (HIN) is a unique 12-digit number assigned by the manufacturer to vessels built after 1972.",
                        "type": "string"
                    },
                    "IceClassed": {
                        "description": "Indicates if the vessel ice classed (Yes/No)",
                        "type": "boolean"
                    },
                    "IceClassID": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "IMO": {
                        "description": "International Maritime Organization number",
                        "format": "int32",
                        "type": "integer"
                    },
                    "KeelLaid": {
                        "format": "date"
                    },
                    "KTM": {
                        "description": "Keel To Mast of the ship."
                    },
                    "LaneMeters": {
                        "description": "Lane meter capacity each vehicle deck",
                        "format": "int32",
                        "type": "integer"
                    },
                    "LastNameChange": {
                        "description": "Vessel name date (for history of name changes, etc.)",
                        "format": "date"
                    },
                    "LaunchDate": {
                        "format": "date"
                    },
                    "LBP": {
                        "description": "Length betweeen perpendiculars"
                    },
                    "LiquidCubic": {
                        "description": "The liquid cubic capacity of the cargo tanks when filled to 98% of capacity",
                        "format": "int32",
                        "type": "integer"
                    },
                    "LOA": {
                        "description": "Length Over All of the ship."
                    },
                    "MaxOutput": {
                        "description": "Maximum continuous output (power unit, e.g. KW)",
                        "type": "string"
                    },
                    "MaxOutputPower": {
                        "description": "Maximum continuous output (power)"
                    },
                    "MaxOutputRPM": {
                        "description": "Maximum continuous output RPM"
                    },
                    "MaxWorkingLoad": {
                        "description": "Max Working Load",
                        "format": "int32",
                        "type": "integer"
                    },
                    "MMSI": {
                        "description": "Maritime Mobile Service Identity",
                        "type": "string"
                    },
                    "MoldedDepth": {
                    },
                    "Name": {
                        "description": "Ship Name",
                        "type": "string"
                    },
                    "NameHistory": {
                        "properties": {
                            "Classification": {
                                "description": "Previous vessel classification society",
                                "type": "string"
                            },
                            "DateOfChange": {
                                "description": "Date vessel stopped using name",
                                "format": "date-time"
                            },
                            "Flag": {
                                "type": "string"
                            },
                            "Id": {
                                "type": "string"
                            },
                            "MMSI": {
                                "description": "Maritime Mobile Service Identity",
                                "type": "string"
                            },
                            "Name": {
                                "description": "Previous vessel name",
                                "type": "string"
                            },
                            "PortOfRegistry": {
                                "type": "string"
                            },
                            "RegisteredOwner": {
                                "description": "Previously registered owner of the vessel",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "NetTonnage": {
                        "description": "Vessel net tonnage",
                        "format": "int32",
                        "type": "integer"
                    },
                    "NumberOfHolds": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "PartOfGroups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "PortOfRegistry": {
                        "type": "string"
                    },
                    "Propellers": {
                        "description": "Double of propellers",
                        "format": "int32",
                        "type": "integer"
                    },
                    "PropellerType": {
                        "type": "string"
                    },
                    "PropulsionType": {
                        "description": "Propulsion type code (e.g. Motor, Gas Turbine)",
                        "type": "string"
                    },
                    "Range": {
                        "description": "Range of the vessel NM assuming full fuel tanks [NM]",
                        "format": "int32",
                        "type": "integer"
                    },
                    "ReeferCubic": {
                        "description": "Cubic meter capacity of the refrigerated cargo space",
                        "format": "int32",
                        "type": "integer"
                    },
                    "RegisteredOwner": {
                        "description": "Registered owner of the vessel",
                        "type": "string"
                    },
                    "RequiredEEXI": {
                        "description": "Required Energy Efficiency Existing Ship Index"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "SBT": {
                        "type": "boolean"
                    },
                    "ScrappedDate": {
                        "description": "Date vessel was scrapped or destroyed",
                        "format": "date"
                    },
                    "ScrubberType": {
                        "description": "Type of scrubber. Possible values: 0 - Unknown, 1 - None, 2 - Hybrid, 3 - Closed Loop, 4 - Open Loop, 5 - Open Loop (Clean)",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "SelfUnloading": {
                        "description": "Is vessel self-unloading",
                        "type": "boolean"
                    },
                    "ShipBuilder": {
                        "description": "Full name of ship builder",
                        "type": "string"
                    },
                    "ShipsGears": {
                        "properties": {
                            "Id": {
                                "description": "Primary identifier of the Ships gear. If not provided while creating Ships gear the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "MaxWeight": {
                                "description": "Max weight crane can lift in MT",
                                "format": "int32",
                                "type": "integer"
                            },
                            "Name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "Slops": {
                        "description": "Slops 98 %",
                        "format": "int32",
                        "type": "integer"
                    },
                    "SpeedAndConsumptions": {
                        "properties": {
                            "Active": {
                                "description": "null. Possible values: 0 - Inactive, 1 - Active",
                                "enum": [
                                    0,
                                    1
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "BallastConsumption": {
                                "description": "Consumption of fuel per day while in ballast (MT)"
                            },
                            "BallastRPM": {
                                "description": "RPM at ballast speed",
                                "format": "int32",
                                "type": "integer"
                            },
                            "BallastSpeed": {
                                "description": "Ballast speed of vessel in (KN)"
                            },
                            "Default": {
                                "description": "Default instance",
                                "type": "boolean"
                            },
                            "Id": {
                                "description": "Primary identifier of the Vessel speed and consumption. If not provided while creating Vessel speed and consumption the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "LadenConsumption": {
                                "description": "Consumption of fuel per day while laden (MT)"
                            },
                            "LadenRPM": {
                                "description": "RPM at Laden speed",
                                "format": "int32",
                                "type": "integer"
                            },
                            "LadenSpeed": {
                                "description": "Laden speed of vessel in (KN)"
                            },
                            "Name": {
                                "description": "Name to identify Speed and Consumption",
                                "type": "string"
                            }
                        },
                        "required": [
                            "Name"
                        ]
                    },
                    "SternThrusters": {
                        "description": "Number of stern thrusters",
                        "format": "int32",
                        "type": "integer"
                    },
                    "TankCount": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "TanksCoated": {
                        "description": "Indicated if the vessel tanks are coated (Yes/No)",
                        "type": "boolean"
                    },
                    "TEU": {
                        "description": "Twentyfoot Equivalent Unit (measurement of container carrying capacity)",
                        "format": "int32",
                        "type": "integer"
                    },
                    "TPC": {
                        "description": "Tons per Centimeter - how many tons are required to increase the draught by 1 cm - (useful for trying to estimate the volume of cargo onboard)"
                    },
                    "TPCMinus1": {
                        "description": "Tons per Centimeter -1"
                    },
                    "TradingStatus": {
                        "type": "string"
                    },
                    "TropicDeadweight": {
                        "description": "Tropic Deadweight",
                        "format": "int32",
                        "type": "integer"
                    },
                    "TropicDraft": {
                        "description": "Tropic Draft"
                    },
                    "VesselClass": {
                        "description": "Class of vessel",
                        "type": "string"
                    },
                    "VesselImage": {
                        "description": "Picture of vessel",
                        "format": "binary",
                        "type": "string"
                    },
                    "VesselSubtype": {
                        "description": "Vessel Sub type",
                        "type": "string"
                    },
                    "VesselType": {
                        "description": "Vessel Type. Possible values: 0 - Dry, 1 - Tank, 2 - Gas, 3 - Dry/Tank",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Vettings": {
                        "properties": {
                            "Category": {
                                "description": "null. Possible values: 1 - Safety score, 2 - GHG, 3 - EVDI, 4 - Inspection outcome",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "Checked": {
                                "format": "date-time"
                            },
                            "Comments": {
                                "type": "string"
                            },
                            "Counterparty": {
                                "type": "string"
                            },
                            "Expiry": {
                                "format": "date"
                            },
                            "Id": {
                                "description": "Primary identifier of the Vetting. If not provided while creating Vetting the id is internally generated. This field cannot be edited.",
                                "type": "string"
                            },
                            "Modified": {
                                "format": "date-time"
                            },
                            "Type": {
                                "description": "null. Possible values: 1 - Rightship, 2 - Oil major, 3 - Other",
                                "enum": [
                                    1,
                                    2,
                                    3
                                ],
                                "format": "int32",
                                "type": "integer"
                            },
                            "User": {
                                "type": "string"
                            },
                            "Value": {
                                "type": "string"
                            }
                        }
                    },
                    "WinterDeadweight": {
                        "description": "Winter Deadweight",
                        "format": "int32",
                        "type": "integer"
                    },
                    "WinterDraft": {
                        "description": "Winter Draft"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.BunkerTank": {
                "properties": {
                    "Capacity": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "CapacityUnit": {
                        "description": "Unit of measure",
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Bunker tank. If not provided while creating Bunker tank the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.Emission": {
                "properties": {
                    "CIIRating": {
                        "description": "Carbon Intensity Indicator (CII) rating grade YTD. Possible values: 0 - A, 1 - B, 2 - C, 3 - D, 4 - E",
                        "enum": [
                            0,
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CIIValue": {
                        "description": "Carbon Intensity Indicator (CII) rating value"
                    },
                    "CIIValueYTD": {
                        "description": "Carbon Intensity Indicator (CII) rating value current YTD"
                    },
                    "CO2YTD": {
                        "description": "CO2 consumed YTD"
                    },
                    "DistanceYTD": {
                        "description": "Distance travelled YTD"
                    },
                    "EEXI": {
                        "description": "Energy Efficiency Existing Ship Index"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "MTYTD": {
                        "description": "MT cargo YTD"
                    },
                    "RequiredCIIValue": {
                        "description": "Required Carbon Intensity Indicator (CII) rating value"
                    },
                    "RequiredEEXI": {
                        "description": "Required Energy Efficiency Existing Ship Index"
                    },
                    "Year": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Year"
                ]
            },
            "Vessel.Hold": {
                "properties": {
                    "Coating": {
                        "type": "string"
                    },
                    "HatchCenterDistance": {
                    },
                    "HatchDimensionX": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "HatchDimensionY": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Hatches": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "HatchType": {
                        "type": "string"
                    },
                    "Id": {
                        "description": "Primary identifier of the Hold. If not provided while creating Hold the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.ShipsGear": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Ships gear. If not provided while creating Ships gear the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MaxWeight": {
                        "description": "Max weight crane can lift in MT",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.VesselAuxiliaryConsumption": {
                "properties": {
                    "AtSea": {
                        "description": "Additional consumption at sea"
                    },
                    "Clean": {
                        "description": "Tank Cleaning",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Discharge": {
                        "description": "Tank Discharge Consumption"
                    },
                    "EngineType": {
                        "description": "Engine Type. Possible values: 0 - Main, 1 - Aux1, 2 - Aux2, 3 - Aux3",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Heat": {
                        "description": "Tank Heating",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Vessel auxiliary consumption. If not provided while creating Vessel auxiliary consumption the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Idle": {
                        "description": "Idle Consumption"
                    },
                    "Inert": {
                        "description": "Tank Inerting",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Load": {
                        "description": "Tank Loading Consumption"
                    },
                    "MaintTemp": {
                        "description": "Tank Maintain Temperature",
                        "format": "int32",
                        "type": "integer"
                    },
                    "Work": {
                        "description": "Dry Working Consumption"
                    }
                },
                "required": [
                    "EngineType"
                ]
            },
            "Vessel.VesselNameOwnershipHistory": {
                "properties": {
                    "Classification": {
                        "description": "Previous vessel classification society",
                        "type": "string"
                    },
                    "DateOfChange": {
                        "description": "Date vessel stopped using name",
                        "format": "date-time"
                    },
                    "Flag": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "MMSI": {
                        "description": "Maritime Mobile Service Identity",
                        "type": "string"
                    },
                    "Name": {
                        "description": "Previous vessel name",
                        "type": "string"
                    },
                    "PortOfRegistry": {
                        "type": "string"
                    },
                    "RegisteredOwner": {
                        "description": "Previously registered owner of the vessel",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.VesselSpeedAndConsumption": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "BallastConsumption": {
                        "description": "Consumption of fuel per day while in ballast (MT)"
                    },
                    "BallastRPM": {
                        "description": "RPM at ballast speed",
                        "format": "int32",
                        "type": "integer"
                    },
                    "BallastSpeed": {
                        "description": "Ballast speed of vessel in (KN)"
                    },
                    "Default": {
                        "description": "Default instance",
                        "type": "boolean"
                    },
                    "Id": {
                        "description": "Primary identifier of the Vessel speed and consumption. If not provided while creating Vessel speed and consumption the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "LadenConsumption": {
                        "description": "Consumption of fuel per day while laden (MT)"
                    },
                    "LadenRPM": {
                        "description": "RPM at Laden speed",
                        "format": "int32",
                        "type": "integer"
                    },
                    "LadenSpeed": {
                        "description": "Laden speed of vessel in (KN)"
                    },
                    "Name": {
                        "description": "Name to identify Speed and Consumption",
                        "type": "string"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Vessel.Vetting": {
                "properties": {
                    "Category": {
                        "description": "null. Possible values: 1 - Safety score, 2 - GHG, 3 - EVDI, 4 - Inspection outcome",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Checked": {
                        "format": "date-time"
                    },
                    "Comments": {
                        "type": "string"
                    },
                    "Counterparty": {
                        "type": "string"
                    },
                    "Expiry": {
                        "format": "date"
                    },
                    "Id": {
                        "description": "Primary identifier of the Vetting. If not provided while creating Vetting the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Modified": {
                        "format": "date-time"
                    },
                    "Type": {
                        "description": "null. Possible values: 1 - Rightship, 2 - Oil major, 3 - Other",
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "User": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string"
                    }
                }
            },
            "VesselClass": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Vessel class. If not provided while creating Vessel class the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "MaxSize": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "MinSize": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "VesselType": {
                        "description": "null. Possible values: 0 - Dry, 1 - Tank, 2 - Gas, 3 - Dry/Tank",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "MinSize",
                    "MaxSize",
                    "Name"
                ]
            },
            "VesselGroup": {
                "properties": {
                    "Description": {
                        "description": "Description of the group used",
                        "type": "string"
                    },
                    "EntitlementGroup": {
                        "type": "boolean"
                    },
                    "Exclude": {
                        "items": {
                            "description": "List of entities to be excluded from the group in spite of falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "GroupInclude": {
                        "items": {
                            "description": "List of groups to be included (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Id": {
                        "description": "Primary identifier of the Vessel group",
                        "type": "string"
                    },
                    "Include": {
                        "items": {
                            "description": "List of entities to be included in the group in spite of not falling into the rule criteria (JSON array)",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "Name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Rule": {
                        "type": "string"
                    }
                },
                "required": [
                    "Id"
                ]
            },
            "VesselReportingFact": {
                "properties": {
                    "Active": {
                        "description": "Activation status. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "BunkerGrade": {
                        "description": "Bunker grade this fact relates to",
                        "type": "string"
                    },
                    "ControlType": {
                        "description": "Specific functionality in Softmar this fact relates to. Possible values: 1 - Off Hire From, 2 - Off Hire to, 3 - Off Hire, 4 - Boil Off, 5 - Consumed, 6 - Off Hire Consumed, 7 - ROB, 8 - Stemmed, 9 - ETA, 10 - ETB, 11 - ETS",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "CustomSortOrder": {
                        "description": "Fractional number defining the custom sort order"
                    },
                    "DataType": {
                        "description": "null. Possible values: 1 - General, 2 - Port, 3 - Speed, 4 - Distance, 5 - Weather, 6 - Sea Condition, 7 - Fuel ROB, 8 - Fuel Consumed, 9 - Water, 10 - Emissions, 11 - LNG, 12 - Unit, 13 - With/Against, 14 - Date, 15 - IMO, 16 - Text, 17 - Position, 18 - Voyage",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "Id": {
                        "type": "string"
                    },
                    "ISO19848ID": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "ShownByDefault": {
                        "description": "Should this fact be shown by default?",
                        "type": "boolean"
                    },
                    "ValidationMax": {
                    },
                    "ValidationMin": {
                    },
                    "VesselType": {
                        "items": {
                            "description": "Type of vessel the fact is applicable for. Possible values: 0 - Dry, 1 - Tank, 2 - Gas, 3 - Dry/Tank",
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "DataType",
                    "Name"
                ]
            },
            "VesselSpeedDescription": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Vessel speed description. If not provided while creating Vessel speed description the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "VesselSubType": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Vessel subtype. If not provided while creating Vessel subtype the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "VesselTradingStatus": {
                "properties": {
                    "Id": {
                        "description": "Primary identifier of the Vessel trading status. If not provided while creating Vessel trading status the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Trading": {
                        "description": "Vessel is trading and can be used in applications",
                        "type": "boolean"
                    }
                },
                "required": [
                    "Name"
                ]
            },
            "Water": {
                "properties": {
                    "Active": {
                        "description": "null. Possible values: 0 - Inactive, 1 - Active",
                        "enum": [
                            0,
                            1
                        ],
                        "format": "int32",
                        "type": "integer"
                    },
                    "Id": {
                        "description": "Primary identifier of the Water. If not provided while creating Water the id is internally generated. This field cannot be edited.",
                        "type": "string"
                    },
                    "RevisionId": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "Salinity": {
                    },
                    "WaterType": {
                        "description": "Water Type",
                        "type": "string"
                    }
                },
                "required": [
                    "Salinity",
                    "WaterType"
                ]
            }
        }
    },
    "info": {
        "description": "List of endpoints and schemas to create, update, delete and search entities and their sub-entities supported by RDX server",
        "title": "RDX Rest API",
        "version": "V31"
    },
    "openapi": "3.0.1",
    "paths": {
        "/AcurisPrimeIndustry": {
            "get": {
                "operationId": "getEntityAcurisPrimeIndustry",
                "parameters": [
                    {
                        "description": "Comma separated list of Acuris Prime industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AcurisPrimeIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Acuris Prime industry field. For possible fields, refer to the schema section for AcurisPrimeIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Acuris Prime industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AcurisPrimeIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Acuris Prime industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "200": {
			    "content": {
				"application/json": {
				    "schema": {
					"items": {
					    "$ref": "#/components/schemas/AcurisPrimeIndustry"
					}
				    }
				}
			    },
			    "description": "Indicates successful  in receiving  all matching Acuris Prime industries. The response body would be a json containing resultant set.",
			    "headers": {
				"ETag": {
				    "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
				    "style": "simple"
				},
				"Location": {
				    "description": "Location of the existing resource if a specific resource is asked",
				    "style": "simple"
				}
			    }
			}
                },
                "summary": "Returns latest versions of all matching Acuris Prime industries in json format. This action requires the caller entitled to view Acuris Prime industries",
                "tags": [
                    "/AcurisPrimeIndustry"
                ]
            },
            "post": {
                "description": "Creates a new  Acuris Prime industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Code,Name.\n For possible entity Fields, refer to the schema section for AcurisPrimeIndustry. This action requires the caller entitled to create Acuris Prime industries",
                "operationId": "createEntityAcurisPrimeIndustry",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AcurisPrimeIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Acuris Prime industry",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AcurisPrimeIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Acuris Prime industry. The response body would contain the created Acuris Prime industry",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Acuris Prime industry. This action requires the caller entitled to create Acuris Prime industries",
                "tags": [
                    "/AcurisPrimeIndustry"
                ]
            }
        },
        "/AcurisPrimeIndustry/{Id}": {
            "delete": {
                "description": "Deletes a existing Acuris Prime industry.\n. This action is subject to caller is entitled to delete Acuris Prime industries",
                "operationId": "deleteEntitySpecificAcurisPrimeIndustry",
                "parameters": [
                    {
                        "description": "Id of Acuris Prime industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Acuris Prime industry"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Acuris Prime industry subject to caller is entitled to delete Acuris Prime industries",
                "tags": [
                    "/AcurisPrimeIndustry/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAcurisPrimeIndustry",
                "parameters": [
                    {
                        "description": "Id of Acuris Prime industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Acuris Prime industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AcurisPrimeIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Acuris Prime industry field. For possible fields, refer to the schema section for AcurisPrimeIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Acuris Prime industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AcurisPrimeIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Acuris Prime industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AcurisPrimeIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Acuris Prime industry. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Acuris Prime industry in json format. This action requires the caller entitled to view Acuris Prime industries",
                "tags": [
                    "/AcurisPrimeIndustry/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Acuris Prime industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Code,Name.\n For possible entity Fields, refer to the schema section for AcurisPrimeIndustry in json format, subject to caller is entitled to edit Acuris Prime industries",
                "operationId": "updateEntitySpecificAcurisPrimeIndustry",
                "parameters": [
                    {
                        "description": "Id of Acuris Prime industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AcurisPrimeIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Acuris Prime industry",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AcurisPrimeIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Acuris Prime industry. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Acuris Prime industry subject to caller is entitled to edit Acuris Prime industries",
                "tags": [
                    "/AcurisPrimeIndustry/{Id}"
                ]
            }
        },
        "/AddressType": {
            "get": {
                "operationId": "getEntityAddressType",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AddressType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Address types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address type field. For possible fields, refer to the schema section for AddressType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Address type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AddressType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AddressType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Address types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Address types in json format. This action requires the caller entitled to view Address types",
                "tags": [
                    "/AddressType"
                ]
            },
            "post": {
                "description": "Creates a new  Address type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for AddressType. This action requires the caller entitled to create Address types",
                "operationId": "createEntityAddressType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Address type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AddressType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Address type. The response body would contain the created Address type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Address type. This action requires the caller entitled to create Address types",
                "tags": [
                    "/AddressType"
                ]
            }
        },
        "/AddressType/{Id}": {
            "delete": {
                "description": "Deletes a existing Address type.\n. This action is subject to caller is entitled to delete Address types",
                "operationId": "deleteEntitySpecificAddressType",
                "parameters": [
                    {
                        "description": "Id of Address type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Address type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Address type subject to caller is entitled to delete Address types",
                "tags": [
                    "/AddressType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAddressType",
                "parameters": [
                    {
                        "description": "Id of Address type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AddressType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Address types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address type field. For possible fields, refer to the schema section for AddressType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Address type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AddressType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AddressType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Address type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Address type in json format. This action requires the caller entitled to view Address types",
                "tags": [
                    "/AddressType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Address type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for AddressType in json format, subject to caller is entitled to edit Address types",
                "operationId": "updateEntitySpecificAddressType",
                "parameters": [
                    {
                        "description": "Id of Address type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Address type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AddressType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Address type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Address type subject to caller is entitled to edit Address types",
                "tags": [
                    "/AddressType/{Id}"
                ]
            }
        },
        "/AnalysisCode": {
            "get": {
                "operationId": "getEntityAnalysisCode",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Analysis code field. For possible fields, refer to the schema section for AnalysisCode",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Analysis code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalysisCode",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Analysis code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalysisCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Analysis codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalysisCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Analysis codes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Analysis codes in json format. This action requires the caller entitled to view Analysis codes",
                "tags": [
                    "/AnalysisCode"
                ]
            },
            "post": {
                "description": "Creates a new  Analysis code.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for AnalysisCode. This action requires the caller entitled to create Analysis codes",
                "operationId": "createEntityAnalysisCode",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalysisCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Analysis code",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalysisCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Analysis code. The response body would contain the created Analysis code",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Analysis code. This action requires the caller entitled to create Analysis codes",
                "tags": [
                    "/AnalysisCode"
                ]
            }
        },
        "/AnalysisCode/{Id}": {
            "delete": {
                "description": "Deletes a existing Analysis code.\n. This action is subject to caller is entitled to delete Analysis codes",
                "operationId": "deleteEntitySpecificAnalysisCode",
                "parameters": [
                    {
                        "description": "Id of Analysis code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Analysis code"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Analysis code subject to caller is entitled to delete Analysis codes",
                "tags": [
                    "/AnalysisCode/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAnalysisCode",
                "parameters": [
                    {
                        "description": "Id of Analysis code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Analysis code field. For possible fields, refer to the schema section for AnalysisCode",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Analysis code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalysisCode",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Analysis code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalysisCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Analysis codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalysisCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Analysis code. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Analysis code in json format. This action requires the caller entitled to view Analysis codes",
                "tags": [
                    "/AnalysisCode/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Analysis code.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for AnalysisCode in json format, subject to caller is entitled to edit Analysis codes",
                "operationId": "updateEntitySpecificAnalysisCode",
                "parameters": [
                    {
                        "description": "Id of Analysis code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalysisCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Analysis code",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalysisCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Analysis code. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Analysis code subject to caller is entitled to edit Analysis codes",
                "tags": [
                    "/AnalysisCode/{Id}"
                ]
            }
        },
        "/AnalyticsLocation": {
            "get": {
                "operationId": "getEntityAnalyticsLocation",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Locations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Location field. For possible fields, refer to the schema section for AnalyticsLocation",
                        "examples": {
                            "Sort by Type, ascending order": {
                                "description": "Sort by Type, ascending order",
                                "value": "Type:ASC"
                            },
                            "Sort by Type, descending order": {
                                "description": "Sort by Type, descending order",
                                "value": "Type:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Location fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalyticsLocation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Location field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalyticsLocation",
                        "examples": {
                            "Filter by Type, in operator": {
                                "description": "Filter by Type, in operator",
                                "value": "Type,IN,A,B,C"
                            },
                            "Filter by Type, not in operator": {
                                "description": "Filter by Type, not in operator",
                                "value": "Type,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalyticsLocation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Locations. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Locations in json format. This action requires the caller entitled to view Locations",
                "tags": [
                    "/AnalyticsLocation"
                ]
            },
            "post": {
                "description": "Creates a new  Location.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,Type,Code,Name.\n For possible entity Fields, refer to the schema section for AnalyticsLocation. This action requires the caller entitled to create Locations",
                "operationId": "createEntityAnalyticsLocation",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalyticsLocation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Location",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalyticsLocation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Location. The response body would contain the created Location",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Location. This action requires the caller entitled to create Locations",
                "tags": [
                    "/AnalyticsLocation"
                ]
            }
        },
        "/AnalyticsLocation/{Id}": {
            "delete": {
                "description": "Deletes a existing Location.\n. This action is subject to caller is entitled to delete Locations",
                "operationId": "deleteEntitySpecificAnalyticsLocation",
                "parameters": [
                    {
                        "description": "Id of Location",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Location"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Location subject to caller is entitled to delete Locations",
                "tags": [
                    "/AnalyticsLocation/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAnalyticsLocation",
                "parameters": [
                    {
                        "description": "Id of Location",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Locations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Location field. For possible fields, refer to the schema section for AnalyticsLocation",
                        "examples": {
                            "Sort by Type, ascending order": {
                                "description": "Sort by Type, ascending order",
                                "value": "Type:ASC"
                            },
                            "Sort by Type, descending order": {
                                "description": "Sort by Type, descending order",
                                "value": "Type:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Location fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalyticsLocation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Location field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalyticsLocation",
                        "examples": {
                            "Filter by Type, in operator": {
                                "description": "Filter by Type, in operator",
                                "value": "Type,IN,A,B,C"
                            },
                            "Filter by Type, not in operator": {
                                "description": "Filter by Type, not in operator",
                                "value": "Type,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalyticsLocation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Location. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Location in json format. This action requires the caller entitled to view Locations",
                "tags": [
                    "/AnalyticsLocation/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Location.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,Type,Code,Name.\n For possible entity Fields, refer to the schema section for AnalyticsLocation in json format, subject to caller is entitled to edit Locations",
                "operationId": "updateEntitySpecificAnalyticsLocation",
                "parameters": [
                    {
                        "description": "Id of Location",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnalyticsLocation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Location",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AnalyticsLocation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Location. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Location subject to caller is entitled to edit Locations",
                "tags": [
                    "/AnalyticsLocation/{Id}"
                ]
            }
        },
        "/AttachmentBase": {
            "get": {
                "operationId": "getEntityAttachmentBase",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment base field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AttachmentBase",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Attachment base fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AttachmentBase",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment base field. For possible fields, refer to the schema section for AttachmentBase",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Attachment bases",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Attachment bases. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Attachment bases in json format. This action requires the caller entitled to view Attachment bases",
                "tags": [
                    "/AttachmentBase"
                ]
            },
            "post": {
                "description": "Creates a new  Attachment base.\n For possible entity Fields, refer to the schema section for AttachmentBase. This action requires the caller entitled to create Attachment bases",
                "operationId": "createEntityAttachmentBase",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttachmentBase"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Attachment base. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Attachment base. The response body would contain the created Attachment base",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Attachment base. This action requires the caller entitled to create Attachment bases",
                "tags": [
                    "/AttachmentBase"
                ]
            }
        },
        "/AttachmentBase/{Id}": {
            "delete": {
                "description": "Deletes a existing Attachment base.\n. This action is subject to caller is entitled to delete Attachment bases",
                "operationId": "deleteEntitySpecificAttachmentBase",
                "parameters": [
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Attachment base"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Attachment base subject to caller is entitled to delete Attachment bases",
                "tags": [
                    "/AttachmentBase/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAttachmentBase",
                "parameters": [
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment base field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AttachmentBase",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Attachment base fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AttachmentBase",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment base field. For possible fields, refer to the schema section for AttachmentBase",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Attachment bases",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Attachment base. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Attachment base in json format. This action requires the caller entitled to view Attachment bases",
                "tags": [
                    "/AttachmentBase/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Attachment base.\n For possible entity Fields, refer to the schema section for AttachmentBase in json format, subject to caller is entitled to edit Attachment bases",
                "operationId": "updateEntitySpecificAttachmentBase",
                "parameters": [
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttachmentBase"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Attachment base. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Attachment base. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Attachment base subject to caller is entitled to edit Attachment bases",
                "tags": [
                    "/AttachmentBase/{Id}"
                ]
            }
        },
        "/AttachmentBase/{Id}/Attachments": {
            "get": {
                "operationId": "getEntityAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Attachment",
                        "examples": {
                            "Filter by Type, in operator": {
                                "description": "Filter by Type, in operator",
                                "value": "Type,IN,A,B,C"
                            },
                            "Filter by Type, not in operator": {
                                "description": "Filter by Type, not in operator",
                                "value": "Type,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment field. For possible fields, refer to the schema section for Attachment",
                        "examples": {
                            "Sort by Type, ascending order": {
                                "description": "Sort by Type, ascending order",
                                "value": "Type:ASC"
                            },
                            "Sort by Type, descending order": {
                                "description": "Sort by Type, descending order",
                                "value": "Type:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Attachment fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Attachment",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Attachments",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Attachments belonging to the parent Attachment base. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Attachments belonging to the parent Attachment base in json format. This action requires the caller entitled to view Attachments",
                "tags": [
                    "/AttachmentBase/{Id}/Attachments"
                ]
            },
            "post": {
                "description": "Creates a new  Attachment.\nAttachment is a sub-entity of  Attachment base For possible entity Fields, refer to the schema section for Attachment. This action requires the caller entitled to create Attachments",
                "operationId": "createEntityAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttachmentBase.Attachment"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Attachment",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Attachment for the parent Attachment base. The response body would contain the created Attachment",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Attachment belonging to Attachment base. This action requires the caller entitled to create Attachments",
                "tags": [
                    "/AttachmentBase/{Id}/Attachments"
                ]
            }
        },
        "/AttachmentBase/{Id}/Attachments/{AttachmentsId}": {
            "delete": {
                "description": "Deletes a existing Attachment.\nAttachment is a sub-entity of Attachment base. This action is subject to caller is entitled to delete Attachments",
                "operationId": "deleteEntitySpecificAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Attachment belonging to the parent Attachment base"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Attachment belonging to Attachment base subject to caller is entitled to delete Attachments",
                "tags": [
                    "/AttachmentBase/{Id}/Attachments/{AttachmentsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Attachment",
                        "examples": {
                            "Filter by Type, in operator": {
                                "description": "Filter by Type, in operator",
                                "value": "Type,IN,A,B,C"
                            },
                            "Filter by Type, not in operator": {
                                "description": "Filter by Type, not in operator",
                                "value": "Type,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment field. For possible fields, refer to the schema section for Attachment",
                        "examples": {
                            "Sort by Type, ascending order": {
                                "description": "Sort by Type, ascending order",
                                "value": "Type:ASC"
                            },
                            "Sort by Type, descending order": {
                                "description": "Sort by Type, descending order",
                                "value": "Type:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Attachment fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Attachment",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Attachments",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Attachment belonging to the parent Attachment base. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Attachment belonging to the parent Attachment base in json format. This action requires the caller entitled to view Attachments",
                "tags": [
                    "/AttachmentBase/{Id}/Attachments/{AttachmentsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Attachment.\nAttachment is a sub-entity of Attachment base For possible entity Fields, refer to the schema section for Attachment in json format, subject to caller is entitled to edit Attachments",
                "operationId": "updateEntitySpecificAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttachmentBase.Attachment"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Attachment",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Attachment belonging to the parent Attachment base. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Attachment belonging to Attachment base subject to caller is entitled to edit Attachments",
                "tags": [
                    "/AttachmentBase/{Id}/Attachments/{AttachmentsId}"
                ]
            }
        },
        "/BIC": {
            "get": {
                "operationId": "getEntityBIC",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BIC",
                        "examples": {
                            "Filter by ValueAddedServices, in operator": {
                                "description": "Filter by ValueAddedServices, in operator",
                                "value": "ValueAddedServices,IN,A,B,C"
                            },
                            "Filter by ValueAddedServices, not in operator": {
                                "description": "Filter by ValueAddedServices, not in operator",
                                "value": "ValueAddedServices,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BIC",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC field. For possible fields, refer to the schema section for BIC",
                        "examples": {
                            "Sort by ValueAddedServices, ascending order": {
                                "description": "Sort by ValueAddedServices, ascending order",
                                "value": "ValueAddedServices:ASC"
                            },
                            "Sort by ValueAddedServices, descending order": {
                                "description": "Sort by ValueAddedServices, descending order",
                                "value": "ValueAddedServices:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BICs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BIC"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching BICs. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching BICs in json format. This action requires the caller entitled to view BICs",
                "tags": [
                    "/BIC"
                ]
            },
            "post": {
                "description": "Creates a new  BIC.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is BicCode.\n For possible entity Fields, refer to the schema section for BIC. This action requires the caller entitled to create BICs",
                "operationId": "createEntityBIC",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BIC"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the BIC",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BIC"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of BIC. The response body would contain the created BIC",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new BIC. This action requires the caller entitled to create BICs",
                "tags": [
                    "/BIC"
                ]
            }
        },
        "/BIC/{Id}": {
            "delete": {
                "description": "Deletes a existing BIC.\n. This action is subject to caller is entitled to delete BICs",
                "operationId": "deleteEntitySpecificBIC",
                "parameters": [
                    {
                        "description": "Id of BIC",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific BIC"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing BIC subject to caller is entitled to delete BICs",
                "tags": [
                    "/BIC/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBIC",
                "parameters": [
                    {
                        "description": "Id of BIC",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BIC",
                        "examples": {
                            "Filter by ValueAddedServices, in operator": {
                                "description": "Filter by ValueAddedServices, in operator",
                                "value": "ValueAddedServices,IN,A,B,C"
                            },
                            "Filter by ValueAddedServices, not in operator": {
                                "description": "Filter by ValueAddedServices, not in operator",
                                "value": "ValueAddedServices,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BIC",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC field. For possible fields, refer to the schema section for BIC",
                        "examples": {
                            "Sort by ValueAddedServices, ascending order": {
                                "description": "Sort by ValueAddedServices, ascending order",
                                "value": "ValueAddedServices:ASC"
                            },
                            "Sort by ValueAddedServices, descending order": {
                                "description": "Sort by ValueAddedServices, descending order",
                                "value": "ValueAddedServices:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BICs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BIC"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific BIC. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific BIC in json format. This action requires the caller entitled to view BICs",
                "tags": [
                    "/BIC/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing BIC.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is BicCode.\n For possible entity Fields, refer to the schema section for BIC in json format, subject to caller is entitled to edit BICs",
                "operationId": "updateEntitySpecificBIC",
                "parameters": [
                    {
                        "description": "Id of BIC",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BIC"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified BIC",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BIC"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific BIC. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing BIC subject to caller is entitled to edit BICs",
                "tags": [
                    "/BIC/{Id}"
                ]
            }
        },
        "/BICType": {
            "get": {
                "operationId": "getEntityBICType",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BIC types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC type field. For possible fields, refer to the schema section for BICType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BICType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching BIC types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching BIC types in json format. This action requires the caller entitled to view BIC types",
                "tags": [
                    "/BICType"
                ]
            },
            "post": {
                "description": "Creates a new  BIC type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BICType. This action requires the caller entitled to create BIC types",
                "operationId": "createEntityBICType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BICType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the BIC type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BICType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of BIC type. The response body would contain the created BIC type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new BIC type. This action requires the caller entitled to create BIC types",
                "tags": [
                    "/BICType"
                ]
            }
        },
        "/BICType/{Id}": {
            "delete": {
                "description": "Deletes a existing BIC type.\n. This action is subject to caller is entitled to delete BIC types",
                "operationId": "deleteEntitySpecificBICType",
                "parameters": [
                    {
                        "description": "Id of BIC type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific BIC type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing BIC type subject to caller is entitled to delete BIC types",
                "tags": [
                    "/BICType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBICType",
                "parameters": [
                    {
                        "description": "Id of BIC type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BIC types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC type field. For possible fields, refer to the schema section for BICType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BICType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific BIC type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific BIC type in json format. This action requires the caller entitled to view BIC types",
                "tags": [
                    "/BICType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing BIC type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BICType in json format, subject to caller is entitled to edit BIC types",
                "operationId": "updateEntitySpecificBICType",
                "parameters": [
                    {
                        "description": "Id of BIC type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BICType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified BIC type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BICType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific BIC type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing BIC type subject to caller is entitled to edit BIC types",
                "tags": [
                    "/BICType/{Id}"
                ]
            }
        },
        "/binary/AttachmentBase/{Id}/Attachments/{AttachmentsId}/Attachment": {
            "delete": {
                "description": "Deletes a existing Attachment.\nAttachment is a sub-entity of Attachment. This action is subject to caller is entitled to delete Attachments",
                "operationId": "removeBinaryAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of Attachment of Attachment"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Attachment belonging to Attachment subject to caller is entitled to delete Attachments",
                "tags": [
                    "/binary/AttachmentBase/{Id}/Attachments/{AttachmentsId}/Attachment"
                ]
            },
            "get": {
                "operationId": "downloadBinaryAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  downloading of Attachment of Attachment. The response body would contain the downloaded Attachment",
                        "headers": {
                            "Location": {
                                "description": "Location of the existing binary resource",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of the Attachment of Attachment, subject to caller's view entitlements",
                "tags": [
                    "/binary/AttachmentBase/{Id}/Attachments/{AttachmentsId}/Attachment"
                ]
            },
            "patch": {
                "description": "Updates a existing Attachment.\nAttachment is a sub-entity of Attachment For possible entity Fields, refer to the schema section for Attachment in json format, subject to caller is entitled to edit Attachments",
                "operationId": "uploadBinaryAttachmentBaseAttachment",
                "parameters": [
                    {
                        "description": "Id of Attachment",
                        "in": "path",
                        "name": "AttachmentsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Attachment base",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                            }
                        }
                    },
                    "description": "Binary file to be set as Attachment for Attachment",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttachmentBase.Attachment"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of Attachment of Attachment. The response body would contain the updated entity with the Attachment containing the generated id of the updated file",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the resource in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated resource",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Attachment belonging to Attachment subject to caller is entitled to edit Attachments",
                "tags": [
                    "/binary/AttachmentBase/{Id}/Attachments/{AttachmentsId}/Attachment"
                ]
            }
        },
        "/binary/Book/{Id}/Contacts/{ContactsId}/Signature": {
            "delete": {
                "description": "Deletes a existing Contact.\nContact is a sub-entity of Contact. This action is subject to caller is entitled to delete Contacts",
                "operationId": "removeBinaryBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of Signature of Contact"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contact belonging to Contact subject to caller is entitled to delete Contacts",
                "tags": [
                    "/binary/Book/{Id}/Contacts/{ContactsId}/Signature"
                ]
            },
            "get": {
                "operationId": "downloadBinaryBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  downloading of Signature of Contact. The response body would contain the downloaded Signature",
                        "headers": {
                            "Location": {
                                "description": "Location of the existing binary resource",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of the Signature of Contact, subject to caller's view entitlements",
                "tags": [
                    "/binary/Book/{Id}/Contacts/{ContactsId}/Signature"
                ]
            },
            "patch": {
                "description": "Updates a existing Contact.\nContact is a sub-entity of Contact The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Contact in json format, subject to caller is entitled to edit Contacts",
                "operationId": "uploadBinaryBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                            }
                        }
                    },
                    "description": "Binary file to be set as Signature for Contact",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of Signature of Contact. The response body would contain the updated entity with the Signature containing the generated id of the updated file",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the resource in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated resource",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contact belonging to Contact subject to caller is entitled to edit Contacts",
                "tags": [
                    "/binary/Book/{Id}/Contacts/{ContactsId}/Signature"
                ]
            }
        },
        "/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature": {
            "delete": {
                "description": "Deletes a existing Contact.\nContact is a sub-entity of Contact. This action is subject to caller is entitled to delete Contacts",
                "operationId": "removeBinaryCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of Signature of Contact"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contact belonging to Contact subject to caller is entitled to delete Contacts",
                "tags": [
                    "/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature"
                ]
            },
            "get": {
                "operationId": "downloadBinaryCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  downloading of Signature of Contact. The response body would contain the downloaded Signature",
                        "headers": {
                            "Location": {
                                "description": "Location of the existing binary resource",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of the Signature of Contact, subject to caller's view entitlements",
                "tags": [
                    "/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature"
                ]
            },
            "patch": {
                "description": "Updates a existing Contact.\nContact is a sub-entity of Contact The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Contact in json format, subject to caller is entitled to edit Contacts",
                "operationId": "uploadBinaryCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                            }
                        }
                    },
                    "description": "Binary file to be set as Signature for Contact",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of Signature of Contact. The response body would contain the updated entity with the Signature containing the generated id of the updated file",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the resource in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated resource",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contact belonging to Contact subject to caller is entitled to edit Contacts",
                "tags": [
                    "/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature"
                ]
            }
        },
        "/binary/LegalEntity/{Id}/Logo": {
            "delete": {
                "description": "Deletes a existing Legal entity.\nLegal entity is a sub-entity of Legal entity. This action is subject to caller is entitled to delete Legal entities",
                "operationId": "removeBinaryLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of Logo of Legal entity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Legal entity belonging to Legal entity subject to caller is entitled to delete Legal entities",
                "tags": [
                    "/binary/LegalEntity/{Id}/Logo"
                ]
            },
            "get": {
                "operationId": "downloadBinaryLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  downloading of Logo of Legal entity. The response body would contain the downloaded Logo",
                        "headers": {
                            "Location": {
                                "description": "Location of the existing binary resource",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of the Logo of Legal entity, subject to caller's view entitlements",
                "tags": [
                    "/binary/LegalEntity/{Id}/Logo"
                ]
            },
            "patch": {
                "description": "Updates a existing Legal entity.\nLegal entity is a sub-entity of Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,LegalName.\n For possible entity Fields, refer to the schema section for LegalEntity in json format, subject to caller is entitled to edit Legal entities",
                "operationId": "uploadBinaryLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                            }
                        }
                    },
                    "description": "Binary file to be set as Logo for Legal entity",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of Logo of Legal entity. The response body would contain the updated entity with the Logo containing the generated id of the updated file",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the resource in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated resource",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Legal entity belonging to Legal entity subject to caller is entitled to edit Legal entities",
                "tags": [
                    "/binary/LegalEntity/{Id}/Logo"
                ]
            }
        },
        "/binary/Vessel/{Id}/VesselImage": {
            "delete": {
                "description": "Deletes a existing Vessel.\nVessel is a sub-entity of Vessel. This action is subject to caller is entitled to delete Vessels",
                "operationId": "removeBinaryVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of VesselImage of Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel belonging to Vessel subject to caller is entitled to delete Vessels",
                "tags": [
                    "/binary/Vessel/{Id}/VesselImage"
                ]
            },
            "get": {
                "operationId": "downloadBinaryVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  downloading of VesselImage of Vessel. The response body would contain the downloaded VesselImage",
                        "headers": {
                            "Location": {
                                "description": "Location of the existing binary resource",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of the VesselImage of Vessel, subject to caller's view entitlements",
                "tags": [
                    "/binary/Vessel/{Id}/VesselImage"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel.\nVessel is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Vessel in json format, subject to caller is entitled to edit Vessels",
                "operationId": "uploadBinaryVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                            }
                        }
                    },
                    "description": "Binary file to be set as VesselImage for Vessel",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of VesselImage of Vessel. The response body would contain the updated entity with the VesselImage containing the generated id of the updated file",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the resource in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated resource",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel belonging to Vessel subject to caller is entitled to edit Vessels",
                "tags": [
                    "/binary/Vessel/{Id}/VesselImage"
                ]
            }
        },
        "/Bond": {
            "get": {
                "operationId": "getEntityBond",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bonds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond field. For possible fields, refer to the schema section for Bond",
                        "examples": {
                            "Sort by Ticker, ascending order": {
                                "description": "Sort by Ticker, ascending order",
                                "value": "Ticker:ASC"
                            },
                            "Sort by Ticker, descending order": {
                                "description": "Sort by Ticker, descending order",
                                "value": "Ticker:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Bond",
                        "examples": {
                            "Filter by Ticker, in operator": {
                                "description": "Filter by Ticker, in operator",
                                "value": "Ticker,IN,A,B,C"
                            },
                            "Filter by Ticker, not in operator": {
                                "description": "Filter by Ticker, not in operator",
                                "value": "Ticker,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bond fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Bond",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bond"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bonds. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bonds in json format. This action requires the caller entitled to view Bonds",
                "tags": [
                    "/Bond"
                ]
            },
            "post": {
                "description": "Creates a new  Bond.\n For possible entity Fields, refer to the schema section for Bond. This action requires the caller entitled to create Bonds",
                "operationId": "createEntityBond",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bond"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bond",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bond"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bond. The response body would contain the created Bond",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bond. This action requires the caller entitled to create Bonds",
                "tags": [
                    "/Bond"
                ]
            }
        },
        "/Bond/{Id}": {
            "delete": {
                "description": "Deletes a existing Bond.\n. This action is subject to caller is entitled to delete Bonds",
                "operationId": "deleteEntitySpecificBond",
                "parameters": [
                    {
                        "description": "Id of Bond",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bond"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bond subject to caller is entitled to delete Bonds",
                "tags": [
                    "/Bond/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBond",
                "parameters": [
                    {
                        "description": "Id of Bond",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bonds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond field. For possible fields, refer to the schema section for Bond",
                        "examples": {
                            "Sort by Ticker, ascending order": {
                                "description": "Sort by Ticker, ascending order",
                                "value": "Ticker:ASC"
                            },
                            "Sort by Ticker, descending order": {
                                "description": "Sort by Ticker, descending order",
                                "value": "Ticker:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Bond",
                        "examples": {
                            "Filter by Ticker, in operator": {
                                "description": "Filter by Ticker, in operator",
                                "value": "Ticker,IN,A,B,C"
                            },
                            "Filter by Ticker, not in operator": {
                                "description": "Filter by Ticker, not in operator",
                                "value": "Ticker,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bond fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Bond",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bond"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bond. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bond in json format. This action requires the caller entitled to view Bonds",
                "tags": [
                    "/Bond/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bond.\n For possible entity Fields, refer to the schema section for Bond in json format, subject to caller is entitled to edit Bonds",
                "operationId": "updateEntitySpecificBond",
                "parameters": [
                    {
                        "description": "Id of Bond",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Bond"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bond",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bond"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bond. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bond subject to caller is entitled to edit Bonds",
                "tags": [
                    "/Bond/{Id}"
                ]
            }
        },
        "/BondGroup": {
            "get": {
                "operationId": "getEntityBondGroup",
                "parameters": [
                    {
                        "description": "Maximum number of returned Bond groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bond group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BondGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond group field. For possible fields, refer to the schema section for BondGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BondGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BondGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bond groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bond groups in json format. This action requires the caller entitled to view Bond groups",
                "tags": [
                    "/BondGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Bond group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for BondGroup. This action requires the caller entitled to create Bond groups",
                "operationId": "createEntityBondGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BondGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bond group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BondGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bond group. The response body would contain the created Bond group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bond group. This action requires the caller entitled to create Bond groups",
                "tags": [
                    "/BondGroup"
                ]
            }
        },
        "/BondGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Bond group.\n. This action is subject to caller is entitled to delete Bond groups",
                "operationId": "deleteEntitySpecificBondGroup",
                "parameters": [
                    {
                        "description": "Id of Bond group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bond group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bond group subject to caller is entitled to delete Bond groups",
                "tags": [
                    "/BondGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBondGroup",
                "parameters": [
                    {
                        "description": "Id of Bond group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bond groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bond group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BondGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond group field. For possible fields, refer to the schema section for BondGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BondGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BondGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bond group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bond group in json format. This action requires the caller entitled to view Bond groups",
                "tags": [
                    "/BondGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bond group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for BondGroup in json format, subject to caller is entitled to edit Bond groups",
                "operationId": "updateEntitySpecificBondGroup",
                "parameters": [
                    {
                        "description": "Id of Bond group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BondGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bond group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BondGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bond group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bond group subject to caller is entitled to edit Bond groups",
                "tags": [
                    "/BondGroup/{Id}"
                ]
            }
        },
        "/Book": {
            "get": {
                "operationId": "getEntityBook",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Book",
                        "examples": {
                            "Filter by TraderLastName, in operator": {
                                "description": "Filter by TraderLastName, in operator",
                                "value": "TraderLastName,IN,A,B,C"
                            },
                            "Filter by TraderLastName, not in operator": {
                                "description": "Filter by TraderLastName, not in operator",
                                "value": "TraderLastName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Book",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book field. For possible fields, refer to the schema section for Book",
                        "examples": {
                            "Sort by TraderLastName, ascending order": {
                                "description": "Sort by TraderLastName, ascending order",
                                "value": "TraderLastName:ASC"
                            },
                            "Sort by TraderLastName, descending order": {
                                "description": "Sort by TraderLastName, descending order",
                                "value": "TraderLastName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Books",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Books. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Books in json format. This action requires the caller entitled to view Books",
                "tags": [
                    "/Book"
                ]
            },
            "post": {
                "description": "Creates a new  Book.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Book. This action requires the caller entitled to create Books",
                "operationId": "createEntityBook",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Book"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book. The response body would contain the created Book",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book. This action requires the caller entitled to create Books",
                "tags": [
                    "/Book"
                ]
            }
        },
        "/Book/{Id}": {
            "delete": {
                "description": "Deletes a existing Book.\n. This action is subject to caller is entitled to delete Books",
                "operationId": "deleteEntitySpecificBook",
                "parameters": [
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book subject to caller is entitled to delete Books",
                "tags": [
                    "/Book/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBook",
                "parameters": [
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Book",
                        "examples": {
                            "Filter by TraderLastName, in operator": {
                                "description": "Filter by TraderLastName, in operator",
                                "value": "TraderLastName,IN,A,B,C"
                            },
                            "Filter by TraderLastName, not in operator": {
                                "description": "Filter by TraderLastName, not in operator",
                                "value": "TraderLastName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Book",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book field. For possible fields, refer to the schema section for Book",
                        "examples": {
                            "Sort by TraderLastName, ascending order": {
                                "description": "Sort by TraderLastName, ascending order",
                                "value": "TraderLastName:ASC"
                            },
                            "Sort by TraderLastName, descending order": {
                                "description": "Sort by TraderLastName, descending order",
                                "value": "TraderLastName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Books",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book in json format. This action requires the caller entitled to view Books",
                "tags": [
                    "/Book/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Book in json format, subject to caller is entitled to edit Books",
                "operationId": "updateEntitySpecificBook",
                "parameters": [
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Book"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book subject to caller is entitled to edit Books",
                "tags": [
                    "/Book/{Id}"
                ]
            }
        },
        "/Book/{Id}/Contacts": {
            "get": {
                "operationId": "getEntityBookContact",
                "parameters": [
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contacts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Contacts belonging to the parent Book. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Contacts belonging to the parent Book in json format. This action requires the caller entitled to view Contacts",
                "tags": [
                    "/Book/{Id}/Contacts"
                ]
            },
            "post": {
                "description": "Creates a new  Contact.\nContact is a sub-entity of  Book The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Contact. This action requires the caller entitled to create Contacts",
                "operationId": "createEntityBookContact",
                "parameters": [
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Book.Contact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Contact",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Contact for the parent Book. The response body would contain the created Contact",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Contact belonging to Book. This action requires the caller entitled to create Contacts",
                "tags": [
                    "/Book/{Id}/Contacts"
                ]
            }
        },
        "/Book/{Id}/Contacts/{ContactsId}": {
            "delete": {
                "description": "Deletes a existing Contact.\nContact is a sub-entity of Book. This action is subject to caller is entitled to delete Contacts",
                "operationId": "deleteEntitySpecificBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Contact belonging to the parent Book"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contact belonging to Book subject to caller is entitled to delete Contacts",
                "tags": [
                    "/Book/{Id}/Contacts/{ContactsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contacts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Contact belonging to the parent Book. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Contact belonging to the parent Book in json format. This action requires the caller entitled to view Contacts",
                "tags": [
                    "/Book/{Id}/Contacts/{ContactsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Contact.\nContact is a sub-entity of Book The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Contact in json format, subject to caller is entitled to edit Contacts",
                "operationId": "updateEntitySpecificBookContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Book.Contact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Contact",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Book.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Contact belonging to the parent Book. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contact belonging to Book subject to caller is entitled to edit Contacts",
                "tags": [
                    "/Book/{Id}/Contacts/{ContactsId}"
                ]
            }
        },
        "/BookGroup": {
            "get": {
                "operationId": "getEntityBookGroup",
                "parameters": [
                    {
                        "description": "Maximum number of returned Book groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book group field. For possible fields, refer to the schema section for BookGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Book groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Book groups in json format. This action requires the caller entitled to view Book groups",
                "tags": [
                    "/BookGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Book group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for BookGroup. This action requires the caller entitled to create Book groups",
                "operationId": "createEntityBookGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book group. The response body would contain the created Book group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book group. This action requires the caller entitled to create Book groups",
                "tags": [
                    "/BookGroup"
                ]
            }
        },
        "/BookGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Book group.\n. This action is subject to caller is entitled to delete Book groups",
                "operationId": "deleteEntitySpecificBookGroup",
                "parameters": [
                    {
                        "description": "Id of Book group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book group subject to caller is entitled to delete Book groups",
                "tags": [
                    "/BookGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookGroup",
                "parameters": [
                    {
                        "description": "Id of Book group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book group field. For possible fields, refer to the schema section for BookGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book group in json format. This action requires the caller entitled to view Book groups",
                "tags": [
                    "/BookGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for BookGroup in json format, subject to caller is entitled to edit Book groups",
                "operationId": "updateEntitySpecificBookGroup",
                "parameters": [
                    {
                        "description": "Id of Book group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book group subject to caller is entitled to edit Book groups",
                "tags": [
                    "/BookGroup/{Id}"
                ]
            }
        },
        "/BookHierarchy": {
            "get": {
                "operationId": "getEntityBookHierarchy",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book hierarchy field. For possible fields, refer to the schema section for BookHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Book hierarchies. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Book hierarchies in json format. This action requires the caller entitled to view Book hierarchies",
                "tags": [
                    "/BookHierarchy"
                ]
            },
            "post": {
                "description": "Creates a new  Book hierarchy.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for BookHierarchy. This action requires the caller entitled to create Book hierarchies",
                "operationId": "createEntityBookHierarchy",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book hierarchy. The response body would contain the created Book hierarchy",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book hierarchy. This action requires the caller entitled to create Book hierarchies",
                "tags": [
                    "/BookHierarchy"
                ]
            }
        },
        "/BookHierarchy/{Id}": {
            "delete": {
                "description": "Deletes a existing Book hierarchy.\n. This action is subject to caller is entitled to delete Book hierarchies",
                "operationId": "deleteEntitySpecificBookHierarchy",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book hierarchy subject to caller is entitled to delete Book hierarchies",
                "tags": [
                    "/BookHierarchy/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookHierarchy",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book hierarchy field. For possible fields, refer to the schema section for BookHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book hierarchy in json format. This action requires the caller entitled to view Book hierarchies",
                "tags": [
                    "/BookHierarchy/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book hierarchy.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for BookHierarchy in json format, subject to caller is entitled to edit Book hierarchies",
                "operationId": "updateEntitySpecificBookHierarchy",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book hierarchy subject to caller is entitled to edit Book hierarchies",
                "tags": [
                    "/BookHierarchy/{Id}"
                ]
            }
        },
        "/BookHierarchy/{Id}/LevelDefault": {
            "get": {
                "operationId": "getEntityBookHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level defaults belonging to the parent Book hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level defaults belonging to the parent Book hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault"
                ]
            },
            "post": {
                "description": "Creates a new  Level default.\nLevel default is a sub-entity of  Book hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault. This action requires the caller entitled to create Level defaults",
                "operationId": "createEntityBookHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default for the parent Book hierarchy. The response body would contain the created Level default",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default belonging to Book hierarchy. This action requires the caller entitled to create Level defaults",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault"
                ]
            }
        },
        "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}": {
            "delete": {
                "description": "Deletes a existing Level default.\nLevel default is a sub-entity of Book hierarchy. This action is subject to caller is entitled to delete Level defaults",
                "operationId": "deleteEntitySpecificBookHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default belonging to the parent Book hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default belonging to Book hierarchy subject to caller is entitled to delete Level defaults",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default belonging to the parent Book hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default belonging to the parent Book hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default.\nLevel default is a sub-entity of Book hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault in json format, subject to caller is entitled to edit Level defaults",
                "operationId": "updateEntitySpecificBookHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default belonging to the parent Book hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default belonging to Book hierarchy subject to caller is entitled to edit Level defaults",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            }
        },
        "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue": {
            "get": {
                "operationId": "getEntityBookHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level default values belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level default values belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            },
            "post": {
                "description": "Creates a new  Level default value.\nLevel default value is a sub-entity of  Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue. This action requires the caller entitled to create Level default values",
                "operationId": "createEntityBookHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default value",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default value for the parent Level default. The response body would contain the created Level default value",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default value belonging to Level default. This action requires the caller entitled to create Level default values",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            }
        },
        "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}": {
            "delete": {
                "description": "Deletes a existing Level default value.\nLevel default value is a sub-entity of Level default. This action is subject to caller is entitled to delete Level default values",
                "operationId": "deleteEntitySpecificBookHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default value belonging to the parent Level default"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default value belonging to Level default subject to caller is entitled to delete Level default values",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default value belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default value belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default value.\nLevel default value is a sub-entity of Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue in json format, subject to caller is entitled to edit Level default values",
                "operationId": "updateEntitySpecificBookHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default value",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default value belonging to the parent Level default. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default value belonging to Level default subject to caller is entitled to edit Level default values",
                "tags": [
                    "/BookHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            }
        },
        "/BookHierarchy/{Id}/Levels": {
            "get": {
                "operationId": "getEntityBookHierarchyBookLevel",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book level field. For possible fields, refer to the schema section for BookLevel",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookLevel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookLevel",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Book levels belonging to the parent Book hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Book levels belonging to the parent Book hierarchy in json format. This action requires the caller entitled to view Book levels",
                "tags": [
                    "/BookHierarchy/{Id}/Levels"
                ]
            },
            "post": {
                "description": "Creates a new  Book level.\nBook level is a sub-entity of  Book hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for BookLevel. This action requires the caller entitled to create Book levels",
                "operationId": "createEntityBookHierarchyBookLevel",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book level",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book level for the parent Book hierarchy. The response body would contain the created Book level",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book level belonging to Book hierarchy. This action requires the caller entitled to create Book levels",
                "tags": [
                    "/BookHierarchy/{Id}/Levels"
                ]
            }
        },
        "/BookHierarchy/{Id}/Levels/{LevelsId}": {
            "delete": {
                "description": "Deletes a existing Book level.\nBook level is a sub-entity of Book hierarchy. This action is subject to caller is entitled to delete Book levels",
                "operationId": "deleteEntitySpecificBookHierarchyBookLevel",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book level belonging to the parent Book hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book level belonging to Book hierarchy subject to caller is entitled to delete Book levels",
                "tags": [
                    "/BookHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookHierarchyBookLevel",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book level field. For possible fields, refer to the schema section for BookLevel",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookLevel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookLevel",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book level belonging to the parent Book hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book level belonging to the parent Book hierarchy in json format. This action requires the caller entitled to view Book levels",
                "tags": [
                    "/BookHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book level.\nBook level is a sub-entity of Book hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for BookLevel in json format, subject to caller is entitled to edit Book levels",
                "operationId": "updateEntitySpecificBookHierarchyBookLevel",
                "parameters": [
                    {
                        "description": "Id of Book hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Book level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book level",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookHierarchy.BookLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book level belonging to the parent Book hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book level belonging to Book hierarchy subject to caller is entitled to edit Book levels",
                "tags": [
                    "/BookHierarchy/{Id}/Levels/{LevelsId}"
                ]
            }
        },
        "/BookSubtype": {
            "get": {
                "operationId": "getEntityBookSubtype",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookSubtype",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book subtype field. For possible fields, refer to the schema section for BookSubtype",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookSubtype",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookSubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Book subtypes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Book subtypes in json format. This action requires the caller entitled to view Book subtypes",
                "tags": [
                    "/BookSubtype"
                ]
            },
            "post": {
                "description": "Creates a new  Book subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BookSubtype. This action requires the caller entitled to create Book subtypes",
                "operationId": "createEntityBookSubtype",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookSubtype"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book subtype",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookSubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book subtype. The response body would contain the created Book subtype",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book subtype. This action requires the caller entitled to create Book subtypes",
                "tags": [
                    "/BookSubtype"
                ]
            }
        },
        "/BookSubtype/{Id}": {
            "delete": {
                "description": "Deletes a existing Book subtype.\n. This action is subject to caller is entitled to delete Book subtypes",
                "operationId": "deleteEntitySpecificBookSubtype",
                "parameters": [
                    {
                        "description": "Id of Book subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book subtype"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book subtype subject to caller is entitled to delete Book subtypes",
                "tags": [
                    "/BookSubtype/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookSubtype",
                "parameters": [
                    {
                        "description": "Id of Book subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookSubtype",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book subtype field. For possible fields, refer to the schema section for BookSubtype",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookSubtype",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookSubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book subtype. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book subtype in json format. This action requires the caller entitled to view Book subtypes",
                "tags": [
                    "/BookSubtype/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BookSubtype in json format, subject to caller is entitled to edit Book subtypes",
                "operationId": "updateEntitySpecificBookSubtype",
                "parameters": [
                    {
                        "description": "Id of Book subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookSubtype"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book subtype",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookSubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book subtype. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book subtype subject to caller is entitled to edit Book subtypes",
                "tags": [
                    "/BookSubtype/{Id}"
                ]
            }
        },
        "/BookType": {
            "get": {
                "operationId": "getEntityBookType",
                "parameters": [
                    {
                        "description": "Maximum number of returned Book types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book type field. For possible fields, refer to the schema section for BookType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Book types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Book types in json format. This action requires the caller entitled to view Book types",
                "tags": [
                    "/BookType"
                ]
            },
            "post": {
                "description": "Creates a new  Book type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BookType. This action requires the caller entitled to create Book types",
                "operationId": "createEntityBookType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Book type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Book type. The response body would contain the created Book type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Book type. This action requires the caller entitled to create Book types",
                "tags": [
                    "/BookType"
                ]
            }
        },
        "/BookType/{Id}": {
            "delete": {
                "description": "Deletes a existing Book type.\n. This action is subject to caller is entitled to delete Book types",
                "operationId": "deleteEntitySpecificBookType",
                "parameters": [
                    {
                        "description": "Id of Book type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Book type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Book type subject to caller is entitled to delete Book types",
                "tags": [
                    "/BookType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBookType",
                "parameters": [
                    {
                        "description": "Id of Book type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Book types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BookType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book type field. For possible fields, refer to the schema section for BookType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Book type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BookType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Book type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Book type in json format. This action requires the caller entitled to view Book types",
                "tags": [
                    "/BookType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Book type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BookType in json format, subject to caller is entitled to edit Book types",
                "operationId": "updateEntitySpecificBookType",
                "parameters": [
                    {
                        "description": "Id of Book type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Book type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BookType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Book type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Book type subject to caller is entitled to edit Book types",
                "tags": [
                    "/BookType/{Id}"
                ]
            }
        },
        "/BunkerGrade": {
            "get": {
                "operationId": "getEntityBunkerGrade",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerGrade",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bunker grades",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker grade fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerGrade",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker grade field. For possible fields, refer to the schema section for BunkerGrade",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerGrade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bunker grades. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bunker grades in json format. This action requires the caller entitled to view Bunker grades",
                "tags": [
                    "/BunkerGrade"
                ]
            },
            "post": {
                "description": "Creates a new  Bunker grade.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BunkerGrade. This action requires the caller entitled to create Bunker grades",
                "operationId": "createEntityBunkerGrade",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BunkerGrade"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bunker grade",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerGrade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bunker grade. The response body would contain the created Bunker grade",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bunker grade. This action requires the caller entitled to create Bunker grades",
                "tags": [
                    "/BunkerGrade"
                ]
            }
        },
        "/BunkerGrade/{Id}": {
            "delete": {
                "description": "Deletes a existing Bunker grade.\n. This action is subject to caller is entitled to delete Bunker grades",
                "operationId": "deleteEntitySpecificBunkerGrade",
                "parameters": [
                    {
                        "description": "Id of Bunker grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bunker grade"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bunker grade subject to caller is entitled to delete Bunker grades",
                "tags": [
                    "/BunkerGrade/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBunkerGrade",
                "parameters": [
                    {
                        "description": "Id of Bunker grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerGrade",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bunker grades",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker grade fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerGrade",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker grade field. For possible fields, refer to the schema section for BunkerGrade",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerGrade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bunker grade. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bunker grade in json format. This action requires the caller entitled to view Bunker grades",
                "tags": [
                    "/BunkerGrade/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bunker grade.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BunkerGrade in json format, subject to caller is entitled to edit Bunker grades",
                "operationId": "updateEntitySpecificBunkerGrade",
                "parameters": [
                    {
                        "description": "Id of Bunker grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BunkerGrade"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bunker grade",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerGrade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bunker grade. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bunker grade subject to caller is entitled to edit Bunker grades",
                "tags": [
                    "/BunkerGrade/{Id}"
                ]
            }
        },
        "/BunkerSpecification": {
            "get": {
                "operationId": "getEntityBunkerSpecification",
                "parameters": [
                    {
                        "description": "Maximum number of returned Bunker specifications",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker specification field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerSpecification",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker specification fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerSpecification",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker specification field. For possible fields, refer to the schema section for BunkerSpecification",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerSpecification"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bunker specifications. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bunker specifications in json format. This action requires the caller entitled to view Bunker specifications",
                "tags": [
                    "/BunkerSpecification"
                ]
            },
            "post": {
                "description": "Creates a new  Bunker specification.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BunkerSpecification. This action requires the caller entitled to create Bunker specifications",
                "operationId": "createEntityBunkerSpecification",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BunkerSpecification"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bunker specification",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerSpecification"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bunker specification. The response body would contain the created Bunker specification",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bunker specification. This action requires the caller entitled to create Bunker specifications",
                "tags": [
                    "/BunkerSpecification"
                ]
            }
        },
        "/BunkerSpecification/{Id}": {
            "delete": {
                "description": "Deletes a existing Bunker specification.\n. This action is subject to caller is entitled to delete Bunker specifications",
                "operationId": "deleteEntitySpecificBunkerSpecification",
                "parameters": [
                    {
                        "description": "Id of Bunker specification",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bunker specification"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bunker specification subject to caller is entitled to delete Bunker specifications",
                "tags": [
                    "/BunkerSpecification/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBunkerSpecification",
                "parameters": [
                    {
                        "description": "Id of Bunker specification",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bunker specifications",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker specification field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerSpecification",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker specification fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerSpecification",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker specification field. For possible fields, refer to the schema section for BunkerSpecification",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerSpecification"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bunker specification. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bunker specification in json format. This action requires the caller entitled to view Bunker specifications",
                "tags": [
                    "/BunkerSpecification/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bunker specification.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BunkerSpecification in json format, subject to caller is entitled to edit Bunker specifications",
                "operationId": "updateEntitySpecificBunkerSpecification",
                "parameters": [
                    {
                        "description": "Id of Bunker specification",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BunkerSpecification"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bunker specification",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BunkerSpecification"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bunker specification. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bunker specification subject to caller is entitled to edit Bunker specifications",
                "tags": [
                    "/BunkerSpecification/{Id}"
                ]
            }
        },
        "/BusinessDate": {
            "get": {
                "operationId": "getEntityBusinessDate",
                "parameters": [
                    {
                        "description": "Maximum number of returned Business dates",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business date field. For possible fields, refer to the schema section for BusinessDate",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business date fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessDate",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessDate",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Business dates. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Business dates in json format. This action requires the caller entitled to view Business dates",
                "tags": [
                    "/BusinessDate"
                ]
            },
            "post": {
                "description": "Creates a new  Business date.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BusinessDate. This action requires the caller entitled to create Business dates",
                "operationId": "createEntityBusinessDate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusinessDate"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Business date",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Business date. The response body would contain the created Business date",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Business date. This action requires the caller entitled to create Business dates",
                "tags": [
                    "/BusinessDate"
                ]
            }
        },
        "/BusinessDate/{Id}": {
            "delete": {
                "description": "Deletes a existing Business date.\n. This action is subject to caller is entitled to delete Business dates",
                "operationId": "deleteEntitySpecificBusinessDate",
                "parameters": [
                    {
                        "description": "Id of Business date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Business date"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Business date subject to caller is entitled to delete Business dates",
                "tags": [
                    "/BusinessDate/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBusinessDate",
                "parameters": [
                    {
                        "description": "Id of Business date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business dates",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business date field. For possible fields, refer to the schema section for BusinessDate",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business date fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessDate",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessDate",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Business date. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Business date in json format. This action requires the caller entitled to view Business dates",
                "tags": [
                    "/BusinessDate/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Business date.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BusinessDate in json format, subject to caller is entitled to edit Business dates",
                "operationId": "updateEntitySpecificBusinessDate",
                "parameters": [
                    {
                        "description": "Id of Business date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusinessDate"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Business date",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Business date. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Business date subject to caller is entitled to edit Business dates",
                "tags": [
                    "/BusinessDate/{Id}"
                ]
            }
        },
        "/BusinessUnit": {
            "get": {
                "operationId": "getEntityBusinessUnit",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business unit field. For possible fields, refer to the schema section for BusinessUnit",
                        "examples": {
                            "Sort by RCFieldName, ascending order": {
                                "description": "Sort by RCFieldName, ascending order",
                                "value": "RCFieldName:ASC"
                            },
                            "Sort by RCFieldName, descending order": {
                                "description": "Sort by RCFieldName, descending order",
                                "value": "RCFieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business unit field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnit",
                        "examples": {
                            "Filter by RCFieldName, in operator": {
                                "description": "Filter by RCFieldName, in operator",
                                "value": "RCFieldName,IN,A,B,C"
                            },
                            "Filter by RCFieldName, not in operator": {
                                "description": "Filter by RCFieldName, not in operator",
                                "value": "RCFieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business units",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business unit fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnit",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessUnit"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Business units. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Business units in json format. This action requires the caller entitled to view Business units",
                "tags": [
                    "/BusinessUnit"
                ]
            },
            "post": {
                "description": "Creates a new  Business unit.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BusinessUnit. This action requires the caller entitled to create Business units",
                "operationId": "createEntityBusinessUnit",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusinessUnit"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Business unit",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessUnit"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Business unit. The response body would contain the created Business unit",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Business unit. This action requires the caller entitled to create Business units",
                "tags": [
                    "/BusinessUnit"
                ]
            }
        },
        "/BusinessUnit/{Id}": {
            "delete": {
                "description": "Deletes a existing Business unit.\n. This action is subject to caller is entitled to delete Business units",
                "operationId": "deleteEntitySpecificBusinessUnit",
                "parameters": [
                    {
                        "description": "Id of Business unit",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Business unit"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Business unit subject to caller is entitled to delete Business units",
                "tags": [
                    "/BusinessUnit/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificBusinessUnit",
                "parameters": [
                    {
                        "description": "Id of Business unit",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business unit field. For possible fields, refer to the schema section for BusinessUnit",
                        "examples": {
                            "Sort by RCFieldName, ascending order": {
                                "description": "Sort by RCFieldName, ascending order",
                                "value": "RCFieldName:ASC"
                            },
                            "Sort by RCFieldName, descending order": {
                                "description": "Sort by RCFieldName, descending order",
                                "value": "RCFieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business unit field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnit",
                        "examples": {
                            "Filter by RCFieldName, in operator": {
                                "description": "Filter by RCFieldName, in operator",
                                "value": "RCFieldName,IN,A,B,C"
                            },
                            "Filter by RCFieldName, not in operator": {
                                "description": "Filter by RCFieldName, not in operator",
                                "value": "RCFieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business units",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business unit fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnit",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessUnit"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Business unit. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Business unit in json format. This action requires the caller entitled to view Business units",
                "tags": [
                    "/BusinessUnit/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Business unit.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BusinessUnit in json format, subject to caller is entitled to edit Business units",
                "operationId": "updateEntitySpecificBusinessUnit",
                "parameters": [
                    {
                        "description": "Id of Business unit",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusinessUnit"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Business unit",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BusinessUnit"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Business unit. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Business unit subject to caller is entitled to edit Business units",
                "tags": [
                    "/BusinessUnit/{Id}"
                ]
            }
        },
        "/Calendar": {
            "get": {
                "operationId": "getEntityCalendar",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Calendar field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Calendar",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Calendars",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Calendar field. For possible fields, refer to the schema section for Calendar",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Calendar fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Calendar",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Calendars. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Calendars in json format. This action requires the caller entitled to view Calendars",
                "tags": [
                    "/Calendar"
                ]
            },
            "post": {
                "description": "Creates a new  Calendar.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Calendar. This action requires the caller entitled to create Calendars",
                "operationId": "createEntityCalendar",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Calendar"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Calendar. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Calendar. The response body would contain the created Calendar",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Calendar. This action requires the caller entitled to create Calendars",
                "tags": [
                    "/Calendar"
                ]
            }
        },
        "/Calendar/{Id}": {
            "delete": {
                "description": "Deletes a existing Calendar.\n. This action is subject to caller is entitled to delete Calendars",
                "operationId": "deleteEntitySpecificCalendar",
                "parameters": [
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Calendar"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Calendar subject to caller is entitled to delete Calendars",
                "tags": [
                    "/Calendar/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCalendar",
                "parameters": [
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Calendar field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Calendar",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Calendars",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Calendar field. For possible fields, refer to the schema section for Calendar",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Calendar fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Calendar",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Calendar. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Calendar in json format. This action requires the caller entitled to view Calendars",
                "tags": [
                    "/Calendar/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Calendar.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Calendar in json format, subject to caller is entitled to edit Calendars",
                "operationId": "updateEntitySpecificCalendar",
                "parameters": [
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Calendar"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Calendar. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Calendar. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Calendar subject to caller is entitled to edit Calendars",
                "tags": [
                    "/Calendar/{Id}"
                ]
            }
        },
        "/Calendar/{Id}/Holidays": {
            "get": {
                "operationId": "getEntityCalendarHoliday",
                "parameters": [
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Holiday fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Holiday",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Holidays",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Holiday field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Holiday",
                        "examples": {
                            "Filter by Description, in operator": {
                                "description": "Filter by Description, in operator",
                                "value": "Description,IN,A,B,C"
                            },
                            "Filter by Description, not in operator": {
                                "description": "Filter by Description, not in operator",
                                "value": "Description,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Holiday field. For possible fields, refer to the schema section for Holiday",
                        "examples": {
                            "Sort by Description, ascending order": {
                                "description": "Sort by Description, ascending order",
                                "value": "Description:ASC"
                            },
                            "Sort by Description, descending order": {
                                "description": "Sort by Description, descending order",
                                "value": "Description:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar.Holiday"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Holidays belonging to the parent Calendar. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Holidays belonging to the parent Calendar in json format. This action requires the caller entitled to view Holidays",
                "tags": [
                    "/Calendar/{Id}/Holidays"
                ]
            },
            "post": {
                "description": "Creates a new  Holiday.\nHoliday is a sub-entity of  CalendarFields required for creation is EventDate.\n For possible entity Fields, refer to the schema section for Holiday. This action requires the caller entitled to create Holidays",
                "operationId": "createEntityCalendarHoliday",
                "parameters": [
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Calendar.Holiday"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Holiday",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar.Holiday"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Holiday for the parent Calendar. The response body would contain the created Holiday",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Holiday belonging to Calendar. This action requires the caller entitled to create Holidays",
                "tags": [
                    "/Calendar/{Id}/Holidays"
                ]
            }
        },
        "/Calendar/{Id}/Holidays/{HolidaysId}": {
            "delete": {
                "description": "Deletes a existing Holiday.\nHoliday is a sub-entity of Calendar. This action is subject to caller is entitled to delete Holidays",
                "operationId": "deleteEntitySpecificCalendarHoliday",
                "parameters": [
                    {
                        "description": "Id of Holiday",
                        "in": "path",
                        "name": "HolidaysId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Holiday belonging to the parent Calendar"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Holiday belonging to Calendar subject to caller is entitled to delete Holidays",
                "tags": [
                    "/Calendar/{Id}/Holidays/{HolidaysId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCalendarHoliday",
                "parameters": [
                    {
                        "description": "Id of Holiday",
                        "in": "path",
                        "name": "HolidaysId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Holiday fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Holiday",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Holidays",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Holiday field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Holiday",
                        "examples": {
                            "Filter by Description, in operator": {
                                "description": "Filter by Description, in operator",
                                "value": "Description,IN,A,B,C"
                            },
                            "Filter by Description, not in operator": {
                                "description": "Filter by Description, not in operator",
                                "value": "Description,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Holiday field. For possible fields, refer to the schema section for Holiday",
                        "examples": {
                            "Sort by Description, ascending order": {
                                "description": "Sort by Description, ascending order",
                                "value": "Description:ASC"
                            },
                            "Sort by Description, descending order": {
                                "description": "Sort by Description, descending order",
                                "value": "Description:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar.Holiday"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Holiday belonging to the parent Calendar. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Holiday belonging to the parent Calendar in json format. This action requires the caller entitled to view Holidays",
                "tags": [
                    "/Calendar/{Id}/Holidays/{HolidaysId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Holiday.\nHoliday is a sub-entity of CalendarFields required to be passed while editing is EventDate.\n For possible entity Fields, refer to the schema section for Holiday in json format, subject to caller is entitled to edit Holidays",
                "operationId": "updateEntitySpecificCalendarHoliday",
                "parameters": [
                    {
                        "description": "Id of Holiday",
                        "in": "path",
                        "name": "HolidaysId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Calendar",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Calendar.Holiday"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Holiday",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Calendar.Holiday"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Holiday belonging to the parent Calendar. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Holiday belonging to Calendar subject to caller is entitled to edit Holidays",
                "tags": [
                    "/Calendar/{Id}/Holidays/{HolidaysId}"
                ]
            }
        },
        "/ClearingCodeType": {
            "get": {
                "operationId": "getEntityClearingCodeType",
                "parameters": [
                    {
                        "description": "Comma separated list of Clearing code type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCodeType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing code types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCodeType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code type field. For possible fields, refer to the schema section for ClearingCodeType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingCodeType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Clearing code types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Clearing code types in json format. This action requires the caller entitled to view Clearing code types",
                "tags": [
                    "/ClearingCodeType"
                ]
            },
            "post": {
                "description": "Creates a new  Clearing code type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ClearingCodeType. This action requires the caller entitled to create Clearing code types",
                "operationId": "createEntityClearingCodeType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingCodeType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Clearing code type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingCodeType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Clearing code type. The response body would contain the created Clearing code type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Clearing code type. This action requires the caller entitled to create Clearing code types",
                "tags": [
                    "/ClearingCodeType"
                ]
            }
        },
        "/ClearingCodeType/{Id}": {
            "delete": {
                "description": "Deletes a existing Clearing code type.\n. This action is subject to caller is entitled to delete Clearing code types",
                "operationId": "deleteEntitySpecificClearingCodeType",
                "parameters": [
                    {
                        "description": "Id of Clearing code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Clearing code type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Clearing code type subject to caller is entitled to delete Clearing code types",
                "tags": [
                    "/ClearingCodeType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificClearingCodeType",
                "parameters": [
                    {
                        "description": "Id of Clearing code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing code type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCodeType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing code types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCodeType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code type field. For possible fields, refer to the schema section for ClearingCodeType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingCodeType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Clearing code type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Clearing code type in json format. This action requires the caller entitled to view Clearing code types",
                "tags": [
                    "/ClearingCodeType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Clearing code type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ClearingCodeType in json format, subject to caller is entitled to edit Clearing code types",
                "operationId": "updateEntitySpecificClearingCodeType",
                "parameters": [
                    {
                        "description": "Id of Clearing code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingCodeType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Clearing code type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingCodeType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Clearing code type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Clearing code type subject to caller is entitled to edit Clearing code types",
                "tags": [
                    "/ClearingCodeType/{Id}"
                ]
            }
        },
        "/ClearingFormat": {
            "get": {
                "operationId": "getEntityClearingFormat",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingFormat",
                        "examples": {
                            "Filter by Structure, in operator": {
                                "description": "Filter by Structure, in operator",
                                "value": "Structure,IN,A,B,C"
                            },
                            "Filter by Structure, not in operator": {
                                "description": "Filter by Structure, not in operator",
                                "value": "Structure,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing formats",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing format fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingFormat",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing format field. For possible fields, refer to the schema section for ClearingFormat",
                        "examples": {
                            "Sort by Structure, ascending order": {
                                "description": "Sort by Structure, ascending order",
                                "value": "Structure:ASC"
                            },
                            "Sort by Structure, descending order": {
                                "description": "Sort by Structure, descending order",
                                "value": "Structure:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Clearing formats. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Clearing formats in json format. This action requires the caller entitled to view Clearing formats",
                "tags": [
                    "/ClearingFormat"
                ]
            },
            "post": {
                "description": "Creates a new  Clearing format.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ClearingFormat. This action requires the caller entitled to create Clearing formats",
                "operationId": "createEntityClearingFormat",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingFormat"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Clearing format",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Clearing format. The response body would contain the created Clearing format",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Clearing format. This action requires the caller entitled to create Clearing formats",
                "tags": [
                    "/ClearingFormat"
                ]
            }
        },
        "/ClearingFormat/{Id}": {
            "delete": {
                "description": "Deletes a existing Clearing format.\n. This action is subject to caller is entitled to delete Clearing formats",
                "operationId": "deleteEntitySpecificClearingFormat",
                "parameters": [
                    {
                        "description": "Id of Clearing format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Clearing format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Clearing format subject to caller is entitled to delete Clearing formats",
                "tags": [
                    "/ClearingFormat/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificClearingFormat",
                "parameters": [
                    {
                        "description": "Id of Clearing format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingFormat",
                        "examples": {
                            "Filter by Structure, in operator": {
                                "description": "Filter by Structure, in operator",
                                "value": "Structure,IN,A,B,C"
                            },
                            "Filter by Structure, not in operator": {
                                "description": "Filter by Structure, not in operator",
                                "value": "Structure,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing formats",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing format fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingFormat",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing format field. For possible fields, refer to the schema section for ClearingFormat",
                        "examples": {
                            "Sort by Structure, ascending order": {
                                "description": "Sort by Structure, ascending order",
                                "value": "Structure:ASC"
                            },
                            "Sort by Structure, descending order": {
                                "description": "Sort by Structure, descending order",
                                "value": "Structure:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Clearing format. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Clearing format in json format. This action requires the caller entitled to view Clearing formats",
                "tags": [
                    "/ClearingFormat/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Clearing format.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ClearingFormat in json format, subject to caller is entitled to edit Clearing formats",
                "operationId": "updateEntitySpecificClearingFormat",
                "parameters": [
                    {
                        "description": "Id of Clearing format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingFormat"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Clearing format",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Clearing format. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Clearing format subject to caller is entitled to edit Clearing formats",
                "tags": [
                    "/ClearingFormat/{Id}"
                ]
            }
        },
        "/ClearingSystem": {
            "get": {
                "operationId": "getEntityClearingSystem",
                "parameters": [
                    {
                        "description": "Maximum number of returned Clearing systems",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing system fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystem",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system field. For possible fields, refer to the schema section for ClearingSystem",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystem",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Clearing systems. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Clearing systems in json format. This action requires the caller entitled to view Clearing systems",
                "tags": [
                    "/ClearingSystem"
                ]
            },
            "post": {
                "description": "Creates a new  Clearing system.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ClearingSystem. This action requires the caller entitled to create Clearing systems",
                "operationId": "createEntityClearingSystem",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystem"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Clearing system. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Clearing system. The response body would contain the created Clearing system",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Clearing system. This action requires the caller entitled to create Clearing systems",
                "tags": [
                    "/ClearingSystem"
                ]
            }
        },
        "/ClearingSystem/{Id}": {
            "delete": {
                "description": "Deletes a existing Clearing system.\n. This action is subject to caller is entitled to delete Clearing systems",
                "operationId": "deleteEntitySpecificClearingSystem",
                "parameters": [
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Clearing system"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Clearing system subject to caller is entitled to delete Clearing systems",
                "tags": [
                    "/ClearingSystem/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificClearingSystem",
                "parameters": [
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing systems",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing system fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystem",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system field. For possible fields, refer to the schema section for ClearingSystem",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystem",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Clearing system. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Clearing system in json format. This action requires the caller entitled to view Clearing systems",
                "tags": [
                    "/ClearingSystem/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Clearing system.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ClearingSystem in json format, subject to caller is entitled to edit Clearing systems",
                "operationId": "updateEntitySpecificClearingSystem",
                "parameters": [
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystem"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Clearing system. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Clearing system. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Clearing system subject to caller is entitled to edit Clearing systems",
                "tags": [
                    "/ClearingSystem/{Id}"
                ]
            }
        },
        "/ClearingSystem/{Id}/Countries": {
            "get": {
                "operationId": "getEntityClearingSystemClearingSystemCountryRelation",
                "parameters": [
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Country relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystemCountryRelation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Country relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystemCountryRelation",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country relation field. For possible fields, refer to the schema section for ClearingSystemCountryRelation",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Country relations belonging to the parent Clearing system. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Country relations belonging to the parent Clearing system in json format. This action requires the caller entitled to view Country relations",
                "tags": [
                    "/ClearingSystem/{Id}/Countries"
                ]
            },
            "post": {
                "description": "Creates a new  Country relation.\nCountry relation is a sub-entity of  Clearing system The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Country,ClearingSystemType.\n For possible entity Fields, refer to the schema section for ClearingSystemCountryRelation. This action requires the caller entitled to create Country relations",
                "operationId": "createEntityClearingSystemClearingSystemCountryRelation",
                "parameters": [
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Country relation",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Country relation for the parent Clearing system. The response body would contain the created Country relation",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Country relation belonging to Clearing system. This action requires the caller entitled to create Country relations",
                "tags": [
                    "/ClearingSystem/{Id}/Countries"
                ]
            }
        },
        "/ClearingSystem/{Id}/Countries/{CountriesId}": {
            "delete": {
                "description": "Deletes a existing Country relation.\nCountry relation is a sub-entity of Clearing system. This action is subject to caller is entitled to delete Country relations",
                "operationId": "deleteEntitySpecificClearingSystemClearingSystemCountryRelation",
                "parameters": [
                    {
                        "description": "Id of Country relation",
                        "in": "path",
                        "name": "CountriesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Country relation belonging to the parent Clearing system"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Country relation belonging to Clearing system subject to caller is entitled to delete Country relations",
                "tags": [
                    "/ClearingSystem/{Id}/Countries/{CountriesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificClearingSystemClearingSystemCountryRelation",
                "parameters": [
                    {
                        "description": "Id of Country relation",
                        "in": "path",
                        "name": "CountriesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Country relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystemCountryRelation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Country relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystemCountryRelation",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country relation field. For possible fields, refer to the schema section for ClearingSystemCountryRelation",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Country relation belonging to the parent Clearing system. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Country relation belonging to the parent Clearing system in json format. This action requires the caller entitled to view Country relations",
                "tags": [
                    "/ClearingSystem/{Id}/Countries/{CountriesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Country relation.\nCountry relation is a sub-entity of Clearing system The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Country,ClearingSystemType.\n For possible entity Fields, refer to the schema section for ClearingSystemCountryRelation in json format, subject to caller is entitled to edit Country relations",
                "operationId": "updateEntitySpecificClearingSystemClearingSystemCountryRelation",
                "parameters": [
                    {
                        "description": "Id of Country relation",
                        "in": "path",
                        "name": "CountriesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Clearing system",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Country relation",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystem.ClearingSystemCountryRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Country relation belonging to the parent Clearing system. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Country relation belonging to Clearing system subject to caller is entitled to edit Country relations",
                "tags": [
                    "/ClearingSystem/{Id}/Countries/{CountriesId}"
                ]
            }
        },
        "/ClearingSystemType": {
            "get": {
                "operationId": "getEntityClearingSystemType",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system type field. For possible fields, refer to the schema section for ClearingSystemType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystemType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing system types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing system type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystemType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystemType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Clearing system types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Clearing system types in json format. This action requires the caller entitled to view Clearing system types",
                "tags": [
                    "/ClearingSystemType"
                ]
            },
            "post": {
                "description": "Creates a new  Clearing system type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ClearingSystemType. This action requires the caller entitled to create Clearing system types",
                "operationId": "createEntityClearingSystemType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystemType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Clearing system type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystemType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Clearing system type. The response body would contain the created Clearing system type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Clearing system type. This action requires the caller entitled to create Clearing system types",
                "tags": [
                    "/ClearingSystemType"
                ]
            }
        },
        "/ClearingSystemType/{Id}": {
            "delete": {
                "description": "Deletes a existing Clearing system type.\n. This action is subject to caller is entitled to delete Clearing system types",
                "operationId": "deleteEntitySpecificClearingSystemType",
                "parameters": [
                    {
                        "description": "Id of Clearing system type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Clearing system type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Clearing system type subject to caller is entitled to delete Clearing system types",
                "tags": [
                    "/ClearingSystemType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificClearingSystemType",
                "parameters": [
                    {
                        "description": "Id of Clearing system type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system type field. For possible fields, refer to the schema section for ClearingSystemType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingSystemType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing system types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing system type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingSystemType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystemType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Clearing system type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Clearing system type in json format. This action requires the caller entitled to view Clearing system types",
                "tags": [
                    "/ClearingSystemType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Clearing system type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ClearingSystemType in json format, subject to caller is entitled to edit Clearing system types",
                "operationId": "updateEntitySpecificClearingSystemType",
                "parameters": [
                    {
                        "description": "Id of Clearing system type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClearingSystemType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Clearing system type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClearingSystemType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Clearing system type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Clearing system type subject to caller is entitled to edit Clearing system types",
                "tags": [
                    "/ClearingSystemType/{Id}"
                ]
            }
        },
        "/CodeTypeField": {
            "get": {
                "operationId": "getEntityCodeTypeField",
                "parameters": [
                    {
                        "description": "Maximum number of returned Code types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Code type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CodeTypeField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CodeTypeField",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Code type field. For possible fields, refer to the schema section for CodeTypeField",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CodeTypeField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Code types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Code types in json format. This action requires the caller entitled to view Code types",
                "tags": [
                    "/CodeTypeField"
                ]
            },
            "post": {
                "description": "Creates a new  Code type.\nFields required for creation are EntityTypes,Identifier.\n For possible entity Fields, refer to the schema section for CodeTypeField. This action requires the caller entitled to create Code types",
                "operationId": "createEntityCodeTypeField",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeTypeField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Code type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CodeTypeField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Code type. The response body would contain the created Code type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Code type. This action requires the caller entitled to create Code types",
                "tags": [
                    "/CodeTypeField"
                ]
            }
        },
        "/CodeTypeField/{Id}": {
            "delete": {
                "description": "Deletes a existing Code type.\n. This action is subject to caller is entitled to delete Code types",
                "operationId": "deleteEntitySpecificCodeTypeField",
                "parameters": [
                    {
                        "description": "Id of Code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Code type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Code type subject to caller is entitled to delete Code types",
                "tags": [
                    "/CodeTypeField/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCodeTypeField",
                "parameters": [
                    {
                        "description": "Id of Code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Code types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Code type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CodeTypeField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CodeTypeField",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Code type field. For possible fields, refer to the schema section for CodeTypeField",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CodeTypeField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Code type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Code type in json format. This action requires the caller entitled to view Code types",
                "tags": [
                    "/CodeTypeField/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Code type.\nFields required to be passed while editing are EntityTypes,Identifier.\n For possible entity Fields, refer to the schema section for CodeTypeField in json format, subject to caller is entitled to edit Code types",
                "operationId": "updateEntitySpecificCodeTypeField",
                "parameters": [
                    {
                        "description": "Id of Code type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeTypeField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Code type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CodeTypeField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Code type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Code type subject to caller is entitled to edit Code types",
                "tags": [
                    "/CodeTypeField/{Id}"
                ]
            }
        },
        "/Commodity": {
            "get": {
                "operationId": "getEntityCommodity",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity field. For possible fields, refer to the schema section for Commodity",
                        "examples": {
                            "Sort by UNNumber, ascending order": {
                                "description": "Sort by UNNumber, ascending order",
                                "value": "UNNumber:ASC"
                            },
                            "Sort by UNNumber, descending order": {
                                "description": "Sort by UNNumber, descending order",
                                "value": "UNNumber:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Commodity fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Commodity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Commodities",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Commodity",
                        "examples": {
                            "Filter by UNNumber, in operator": {
                                "description": "Filter by UNNumber, in operator",
                                "value": "UNNumber,IN,A,B,C"
                            },
                            "Filter by UNNumber, not in operator": {
                                "description": "Filter by UNNumber, not in operator",
                                "value": "UNNumber,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Commodities. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Commodities in json format. This action requires the caller entitled to view Commodities",
                "tags": [
                    "/Commodity"
                ]
            },
            "post": {
                "description": "Creates a new  Commodity.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Commodity. This action requires the caller entitled to create Commodities",
                "operationId": "createEntityCommodity",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Commodity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Commodity. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Commodity. The response body would contain the created Commodity",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Commodity. This action requires the caller entitled to create Commodities",
                "tags": [
                    "/Commodity"
                ]
            }
        },
        "/Commodity/{Id}": {
            "delete": {
                "description": "Deletes a existing Commodity.\n. This action is subject to caller is entitled to delete Commodities",
                "operationId": "deleteEntitySpecificCommodity",
                "parameters": [
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Commodity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Commodity subject to caller is entitled to delete Commodities",
                "tags": [
                    "/Commodity/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodity",
                "parameters": [
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity field. For possible fields, refer to the schema section for Commodity",
                        "examples": {
                            "Sort by UNNumber, ascending order": {
                                "description": "Sort by UNNumber, ascending order",
                                "value": "UNNumber:ASC"
                            },
                            "Sort by UNNumber, descending order": {
                                "description": "Sort by UNNumber, descending order",
                                "value": "UNNumber:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Commodity fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Commodity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Commodities",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Commodity",
                        "examples": {
                            "Filter by UNNumber, in operator": {
                                "description": "Filter by UNNumber, in operator",
                                "value": "UNNumber,IN,A,B,C"
                            },
                            "Filter by UNNumber, not in operator": {
                                "description": "Filter by UNNumber, not in operator",
                                "value": "UNNumber,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Commodity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Commodity in json format. This action requires the caller entitled to view Commodities",
                "tags": [
                    "/Commodity/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Commodity.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Commodity in json format, subject to caller is entitled to edit Commodities",
                "operationId": "updateEntitySpecificCommodity",
                "parameters": [
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Commodity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Commodity. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Commodity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Commodity subject to caller is entitled to edit Commodities",
                "tags": [
                    "/Commodity/{Id}"
                ]
            }
        },
        "/Commodity/{Id}/Conversion": {
            "get": {
                "operationId": "getEntityCommodityUOMConversion",
                "parameters": [
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the UOM conversion field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UOMConversion",
                        "examples": {
                            "Filter by DisplayName, in operator": {
                                "description": "Filter by DisplayName, in operator",
                                "value": "DisplayName,IN,A,B,C"
                            },
                            "Filter by DisplayName, not in operator": {
                                "description": "Filter by DisplayName, not in operator",
                                "value": "DisplayName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any UOM conversion field. For possible fields, refer to the schema section for UOMConversion",
                        "examples": {
                            "Sort by DisplayName, ascending order": {
                                "description": "Sort by DisplayName, ascending order",
                                "value": "DisplayName:ASC"
                            },
                            "Sort by DisplayName, descending order": {
                                "description": "Sort by DisplayName, descending order",
                                "value": "DisplayName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned UOM conversions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of UOM conversion fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UOMConversion",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity.UOMConversion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching UOM conversions belonging to the parent Commodity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching UOM conversions belonging to the parent Commodity in json format. This action requires the caller entitled to view UOM conversions",
                "tags": [
                    "/Commodity/{Id}/Conversion"
                ]
            },
            "post": {
                "description": "Creates a new  UOM conversion.\nUOM conversion is a sub-entity of  Commodity The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are UOMFrom,UOMTo,Conversion.\n For possible entity Fields, refer to the schema section for UOMConversion. This action requires the caller entitled to create UOM conversions",
                "operationId": "createEntityCommodityUOMConversion",
                "parameters": [
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Commodity.UOMConversion"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the UOM conversion",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity.UOMConversion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of UOM conversion for the parent Commodity. The response body would contain the created UOM conversion",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new UOM conversion belonging to Commodity. This action requires the caller entitled to create UOM conversions",
                "tags": [
                    "/Commodity/{Id}/Conversion"
                ]
            }
        },
        "/Commodity/{Id}/Conversion/{ConversionId}": {
            "delete": {
                "description": "Deletes a existing UOM conversion.\nUOM conversion is a sub-entity of Commodity. This action is subject to caller is entitled to delete UOM conversions",
                "operationId": "deleteEntitySpecificCommodityUOMConversion",
                "parameters": [
                    {
                        "description": "Id of UOM conversion",
                        "in": "path",
                        "name": "ConversionId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific UOM conversion belonging to the parent Commodity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing UOM conversion belonging to Commodity subject to caller is entitled to delete UOM conversions",
                "tags": [
                    "/Commodity/{Id}/Conversion/{ConversionId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityUOMConversion",
                "parameters": [
                    {
                        "description": "Id of UOM conversion",
                        "in": "path",
                        "name": "ConversionId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the UOM conversion field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UOMConversion",
                        "examples": {
                            "Filter by DisplayName, in operator": {
                                "description": "Filter by DisplayName, in operator",
                                "value": "DisplayName,IN,A,B,C"
                            },
                            "Filter by DisplayName, not in operator": {
                                "description": "Filter by DisplayName, not in operator",
                                "value": "DisplayName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any UOM conversion field. For possible fields, refer to the schema section for UOMConversion",
                        "examples": {
                            "Sort by DisplayName, ascending order": {
                                "description": "Sort by DisplayName, ascending order",
                                "value": "DisplayName:ASC"
                            },
                            "Sort by DisplayName, descending order": {
                                "description": "Sort by DisplayName, descending order",
                                "value": "DisplayName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned UOM conversions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of UOM conversion fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UOMConversion",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity.UOMConversion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific UOM conversion belonging to the parent Commodity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific UOM conversion belonging to the parent Commodity in json format. This action requires the caller entitled to view UOM conversions",
                "tags": [
                    "/Commodity/{Id}/Conversion/{ConversionId}"
                ]
            },
            "patch": {
                "description": "Updates a existing UOM conversion.\nUOM conversion is a sub-entity of Commodity The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are UOMFrom,UOMTo,Conversion.\n For possible entity Fields, refer to the schema section for UOMConversion in json format, subject to caller is entitled to edit UOM conversions",
                "operationId": "updateEntitySpecificCommodityUOMConversion",
                "parameters": [
                    {
                        "description": "Id of UOM conversion",
                        "in": "path",
                        "name": "ConversionId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Commodity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Commodity.UOMConversion"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified UOM conversion",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Commodity.UOMConversion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific UOM conversion belonging to the parent Commodity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing UOM conversion belonging to Commodity subject to caller is entitled to edit UOM conversions",
                "tags": [
                    "/Commodity/{Id}/Conversion/{ConversionId}"
                ]
            }
        },
        "/CommodityGroup": {
            "get": {
                "operationId": "getEntityCommodityGroup",
                "parameters": [
                    {
                        "description": "Comma separated list of Commodity group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity group field. For possible fields, refer to the schema section for CommodityGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Commodity groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Commodity groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Commodity groups in json format. This action requires the caller entitled to view Commodity groups",
                "tags": [
                    "/CommodityGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Commodity group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for CommodityGroup. This action requires the caller entitled to create Commodity groups",
                "operationId": "createEntityCommodityGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Commodity group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Commodity group. The response body would contain the created Commodity group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Commodity group. This action requires the caller entitled to create Commodity groups",
                "tags": [
                    "/CommodityGroup"
                ]
            }
        },
        "/CommodityGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Commodity group.\n. This action is subject to caller is entitled to delete Commodity groups",
                "operationId": "deleteEntitySpecificCommodityGroup",
                "parameters": [
                    {
                        "description": "Id of Commodity group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Commodity group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Commodity group subject to caller is entitled to delete Commodity groups",
                "tags": [
                    "/CommodityGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityGroup",
                "parameters": [
                    {
                        "description": "Id of Commodity group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Commodity group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity group field. For possible fields, refer to the schema section for CommodityGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Commodity groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Commodity group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Commodity group in json format. This action requires the caller entitled to view Commodity groups",
                "tags": [
                    "/CommodityGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Commodity group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for CommodityGroup in json format, subject to caller is entitled to edit Commodity groups",
                "operationId": "updateEntitySpecificCommodityGroup",
                "parameters": [
                    {
                        "description": "Id of Commodity group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Commodity group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Commodity group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Commodity group subject to caller is entitled to edit Commodity groups",
                "tags": [
                    "/CommodityGroup/{Id}"
                ]
            }
        },
        "/CommodityStrategy": {
            "get": {
                "operationId": "getEntityCommodityStrategy",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Strategies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy field. For possible fields, refer to the schema section for CommodityStrategy",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategy",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Strategies. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Strategies in json format. This action requires the caller entitled to view Strategies",
                "tags": [
                    "/CommodityStrategy"
                ]
            },
            "post": {
                "description": "Creates a new  Strategy.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CommodityStrategy. This action requires the caller entitled to create Strategies",
                "operationId": "createEntityCommodityStrategy",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Strategy",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Strategy. The response body would contain the created Strategy",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Strategy. This action requires the caller entitled to create Strategies",
                "tags": [
                    "/CommodityStrategy"
                ]
            }
        },
        "/CommodityStrategy/{Id}": {
            "delete": {
                "description": "Deletes a existing Strategy.\n. This action is subject to caller is entitled to delete Strategies",
                "operationId": "deleteEntitySpecificCommodityStrategy",
                "parameters": [
                    {
                        "description": "Id of Strategy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Strategy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Strategy subject to caller is entitled to delete Strategies",
                "tags": [
                    "/CommodityStrategy/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategy",
                "parameters": [
                    {
                        "description": "Id of Strategy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Strategies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy field. For possible fields, refer to the schema section for CommodityStrategy",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategy",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Strategy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Strategy in json format. This action requires the caller entitled to view Strategies",
                "tags": [
                    "/CommodityStrategy/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Strategy.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CommodityStrategy in json format, subject to caller is entitled to edit Strategies",
                "operationId": "updateEntitySpecificCommodityStrategy",
                "parameters": [
                    {
                        "description": "Id of Strategy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Strategy",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Strategy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Strategy subject to caller is entitled to edit Strategies",
                "tags": [
                    "/CommodityStrategy/{Id}"
                ]
            }
        },
        "/CommodityStrategyHierarchy": {
            "get": {
                "operationId": "getEntityCommodityStrategyHierarchy",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Strategy hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategyHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategyHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy hierarchy field. For possible fields, refer to the schema section for CommodityStrategyHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Strategy hierarchies. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Strategy hierarchies in json format. This action requires the caller entitled to view Strategy hierarchies",
                "tags": [
                    "/CommodityStrategyHierarchy"
                ]
            },
            "post": {
                "description": "Creates a new  Strategy hierarchy.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for CommodityStrategyHierarchy. This action requires the caller entitled to create Strategy hierarchies",
                "operationId": "createEntityCommodityStrategyHierarchy",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Strategy hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Strategy hierarchy. The response body would contain the created Strategy hierarchy",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Strategy hierarchy. This action requires the caller entitled to create Strategy hierarchies",
                "tags": [
                    "/CommodityStrategyHierarchy"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}": {
            "delete": {
                "description": "Deletes a existing Strategy hierarchy.\n. This action is subject to caller is entitled to delete Strategy hierarchies",
                "operationId": "deleteEntitySpecificCommodityStrategyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Strategy hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Strategy hierarchy subject to caller is entitled to delete Strategy hierarchies",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Strategy hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategyHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategyHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy hierarchy field. For possible fields, refer to the schema section for CommodityStrategyHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Strategy hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Strategy hierarchy in json format. This action requires the caller entitled to view Strategy hierarchies",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Strategy hierarchy.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for CommodityStrategyHierarchy in json format, subject to caller is entitled to edit Strategy hierarchies",
                "operationId": "updateEntitySpecificCommodityStrategyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Strategy hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Strategy hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Strategy hierarchy subject to caller is entitled to edit Strategy hierarchies",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/LevelDefault": {
            "get": {
                "operationId": "getEntityCommodityStrategyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level defaults belonging to the parent Strategy hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level defaults belonging to the parent Strategy hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault"
                ]
            },
            "post": {
                "description": "Creates a new  Level default.\nLevel default is a sub-entity of  Strategy hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault. This action requires the caller entitled to create Level defaults",
                "operationId": "createEntityCommodityStrategyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default for the parent Strategy hierarchy. The response body would contain the created Level default",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default belonging to Strategy hierarchy. This action requires the caller entitled to create Level defaults",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}": {
            "delete": {
                "description": "Deletes a existing Level default.\nLevel default is a sub-entity of Strategy hierarchy. This action is subject to caller is entitled to delete Level defaults",
                "operationId": "deleteEntitySpecificCommodityStrategyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default belonging to the parent Strategy hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default belonging to Strategy hierarchy subject to caller is entitled to delete Level defaults",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default belonging to the parent Strategy hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default belonging to the parent Strategy hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default.\nLevel default is a sub-entity of Strategy hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault in json format, subject to caller is entitled to edit Level defaults",
                "operationId": "updateEntitySpecificCommodityStrategyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default belonging to the parent Strategy hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default belonging to Strategy hierarchy subject to caller is entitled to edit Level defaults",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue": {
            "get": {
                "operationId": "getEntityCommodityStrategyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level default values belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level default values belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            },
            "post": {
                "description": "Creates a new  Level default value.\nLevel default value is a sub-entity of  Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue. This action requires the caller entitled to create Level default values",
                "operationId": "createEntityCommodityStrategyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default value",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default value for the parent Level default. The response body would contain the created Level default value",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default value belonging to Level default. This action requires the caller entitled to create Level default values",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}": {
            "delete": {
                "description": "Deletes a existing Level default value.\nLevel default value is a sub-entity of Level default. This action is subject to caller is entitled to delete Level default values",
                "operationId": "deleteEntitySpecificCommodityStrategyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default value belonging to the parent Level default"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default value belonging to Level default subject to caller is entitled to delete Level default values",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default value belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default value belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default value.\nLevel default value is a sub-entity of Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue in json format, subject to caller is entitled to edit Level default values",
                "operationId": "updateEntitySpecificCommodityStrategyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default value",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default value belonging to the parent Level default. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default value belonging to Level default subject to caller is entitled to edit Level default values",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/Levels": {
            "get": {
                "operationId": "getEntityCommodityStrategyHierarchyLevel",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Level",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Level",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level field. For possible fields, refer to the schema section for Level",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Levels belonging to the parent Strategy hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Levels belonging to the parent Strategy hierarchy in json format. This action requires the caller entitled to view Levels",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/Levels"
                ]
            },
            "post": {
                "description": "Creates a new  Level.\nLevel is a sub-entity of  Strategy hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Level. This action requires the caller entitled to create Levels",
                "operationId": "createEntityCommodityStrategyHierarchyLevel",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level for the parent Strategy hierarchy. The response body would contain the created Level",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level belonging to Strategy hierarchy. This action requires the caller entitled to create Levels",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/Levels"
                ]
            }
        },
        "/CommodityStrategyHierarchy/{Id}/Levels/{LevelsId}": {
            "delete": {
                "description": "Deletes a existing Level.\nLevel is a sub-entity of Strategy hierarchy. This action is subject to caller is entitled to delete Levels",
                "operationId": "deleteEntitySpecificCommodityStrategyHierarchyLevel",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level belonging to the parent Strategy hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level belonging to Strategy hierarchy subject to caller is entitled to delete Levels",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategyHierarchyLevel",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Level",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Level",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level field. For possible fields, refer to the schema section for Level",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level belonging to the parent Strategy hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level belonging to the parent Strategy hierarchy in json format. This action requires the caller entitled to view Levels",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level.\nLevel is a sub-entity of Strategy hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Level in json format, subject to caller is entitled to edit Levels",
                "operationId": "updateEntitySpecificCommodityStrategyHierarchyLevel",
                "parameters": [
                    {
                        "description": "Id of Strategy hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyHierarchy.Level"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level belonging to the parent Strategy hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level belonging to Strategy hierarchy subject to caller is entitled to edit Levels",
                "tags": [
                    "/CommodityStrategyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            }
        },
        "/CommodityStrategyType": {
            "get": {
                "operationId": "getEntityCommodityStrategyType",
                "parameters": [
                    {
                        "description": "Maximum number of returned Strategy types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy type field. For possible fields, refer to the schema section for CommodityStrategyType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategyType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategyType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Strategy types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Strategy types in json format. This action requires the caller entitled to view Strategy types",
                "tags": [
                    "/CommodityStrategyType"
                ]
            },
            "post": {
                "description": "Creates a new  Strategy type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CommodityStrategyType. This action requires the caller entitled to create Strategy types",
                "operationId": "createEntityCommodityStrategyType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Strategy type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Strategy type. The response body would contain the created Strategy type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Strategy type. This action requires the caller entitled to create Strategy types",
                "tags": [
                    "/CommodityStrategyType"
                ]
            }
        },
        "/CommodityStrategyType/{Id}": {
            "delete": {
                "description": "Deletes a existing Strategy type.\n. This action is subject to caller is entitled to delete Strategy types",
                "operationId": "deleteEntitySpecificCommodityStrategyType",
                "parameters": [
                    {
                        "description": "Id of Strategy type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Strategy type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Strategy type subject to caller is entitled to delete Strategy types",
                "tags": [
                    "/CommodityStrategyType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCommodityStrategyType",
                "parameters": [
                    {
                        "description": "Id of Strategy type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Strategy types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy type field. For possible fields, refer to the schema section for CommodityStrategyType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CommodityStrategyType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Strategy type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CommodityStrategyType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Strategy type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Strategy type in json format. This action requires the caller entitled to view Strategy types",
                "tags": [
                    "/CommodityStrategyType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Strategy type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CommodityStrategyType in json format, subject to caller is entitled to edit Strategy types",
                "operationId": "updateEntitySpecificCommodityStrategyType",
                "parameters": [
                    {
                        "description": "Id of Strategy type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommodityStrategyType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Strategy type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommodityStrategyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Strategy type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Strategy type subject to caller is entitled to edit Strategy types",
                "tags": [
                    "/CommodityStrategyType/{Id}"
                ]
            }
        },
        "/ConfirmationFieldType": {
            "get": {
                "operationId": "getEntityConfirmationFieldType",
                "parameters": [
                    {
                        "description": "Comma separated list of Confirmation field type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ConfirmationFieldType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation field type field. For possible fields, refer to the schema section for ConfirmationFieldType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation field type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ConfirmationFieldType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Confirmation field types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationFieldType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Confirmation field types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Confirmation field types in json format. This action requires the caller entitled to view Confirmation field types",
                "tags": [
                    "/ConfirmationFieldType"
                ]
            },
            "post": {
                "description": "Creates a new  Confirmation field type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ConfirmationFieldType. This action requires the caller entitled to create Confirmation field types",
                "operationId": "createEntityConfirmationFieldType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmationFieldType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Confirmation field type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationFieldType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Confirmation field type. The response body would contain the created Confirmation field type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Confirmation field type. This action requires the caller entitled to create Confirmation field types",
                "tags": [
                    "/ConfirmationFieldType"
                ]
            }
        },
        "/ConfirmationFieldType/{Id}": {
            "delete": {
                "description": "Deletes a existing Confirmation field type.\n. This action is subject to caller is entitled to delete Confirmation field types",
                "operationId": "deleteEntitySpecificConfirmationFieldType",
                "parameters": [
                    {
                        "description": "Id of Confirmation field type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Confirmation field type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Confirmation field type subject to caller is entitled to delete Confirmation field types",
                "tags": [
                    "/ConfirmationFieldType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificConfirmationFieldType",
                "parameters": [
                    {
                        "description": "Id of Confirmation field type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Confirmation field type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ConfirmationFieldType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation field type field. For possible fields, refer to the schema section for ConfirmationFieldType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation field type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ConfirmationFieldType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Confirmation field types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationFieldType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Confirmation field type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Confirmation field type in json format. This action requires the caller entitled to view Confirmation field types",
                "tags": [
                    "/ConfirmationFieldType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Confirmation field type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ConfirmationFieldType in json format, subject to caller is entitled to edit Confirmation field types",
                "operationId": "updateEntitySpecificConfirmationFieldType",
                "parameters": [
                    {
                        "description": "Id of Confirmation field type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmationFieldType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Confirmation field type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationFieldType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Confirmation field type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Confirmation field type subject to caller is entitled to edit Confirmation field types",
                "tags": [
                    "/ConfirmationFieldType/{Id}"
                ]
            }
        },
        "/ConfirmationPlatform": {
            "get": {
                "operationId": "getEntityConfirmationPlatform",
                "parameters": [
                    {
                        "description": "Comma separated list of Confirmation platform fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ConfirmationPlatform",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation platform field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ConfirmationPlatform",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Confirmation platforms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation platform field. For possible fields, refer to the schema section for ConfirmationPlatform",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationPlatform"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Confirmation platforms. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Confirmation platforms in json format. This action requires the caller entitled to view Confirmation platforms",
                "tags": [
                    "/ConfirmationPlatform"
                ]
            },
            "post": {
                "description": "Creates a new  Confirmation platform.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ConfirmationPlatform. This action requires the caller entitled to create Confirmation platforms",
                "operationId": "createEntityConfirmationPlatform",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmationPlatform"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Confirmation platform",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationPlatform"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Confirmation platform. The response body would contain the created Confirmation platform",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Confirmation platform. This action requires the caller entitled to create Confirmation platforms",
                "tags": [
                    "/ConfirmationPlatform"
                ]
            }
        },
        "/ConfirmationPlatform/{Id}": {
            "delete": {
                "description": "Deletes a existing Confirmation platform.\n. This action is subject to caller is entitled to delete Confirmation platforms",
                "operationId": "deleteEntitySpecificConfirmationPlatform",
                "parameters": [
                    {
                        "description": "Id of Confirmation platform",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Confirmation platform"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Confirmation platform subject to caller is entitled to delete Confirmation platforms",
                "tags": [
                    "/ConfirmationPlatform/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificConfirmationPlatform",
                "parameters": [
                    {
                        "description": "Id of Confirmation platform",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Confirmation platform fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ConfirmationPlatform",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation platform field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ConfirmationPlatform",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Confirmation platforms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation platform field. For possible fields, refer to the schema section for ConfirmationPlatform",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationPlatform"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Confirmation platform. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Confirmation platform in json format. This action requires the caller entitled to view Confirmation platforms",
                "tags": [
                    "/ConfirmationPlatform/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Confirmation platform.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ConfirmationPlatform in json format, subject to caller is entitled to edit Confirmation platforms",
                "operationId": "updateEntitySpecificConfirmationPlatform",
                "parameters": [
                    {
                        "description": "Id of Confirmation platform",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfirmationPlatform"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Confirmation platform",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ConfirmationPlatform"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Confirmation platform. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Confirmation platform subject to caller is entitled to edit Confirmation platforms",
                "tags": [
                    "/ConfirmationPlatform/{Id}"
                ]
            }
        },
        "/ContactType": {
            "get": {
                "operationId": "getEntityContactType",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact type field. For possible fields, refer to the schema section for ContactType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contact types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContactType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContactType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContactType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Contact types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Contact types in json format. This action requires the caller entitled to view Contact types",
                "tags": [
                    "/ContactType"
                ]
            },
            "post": {
                "description": "Creates a new  Contact type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ContactType. This action requires the caller entitled to create Contact types",
                "operationId": "createEntityContactType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Contact type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContactType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Contact type. The response body would contain the created Contact type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Contact type. This action requires the caller entitled to create Contact types",
                "tags": [
                    "/ContactType"
                ]
            }
        },
        "/ContactType/{Id}": {
            "delete": {
                "description": "Deletes a existing Contact type.\n. This action is subject to caller is entitled to delete Contact types",
                "operationId": "deleteEntitySpecificContactType",
                "parameters": [
                    {
                        "description": "Id of Contact type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Contact type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contact type subject to caller is entitled to delete Contact types",
                "tags": [
                    "/ContactType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificContactType",
                "parameters": [
                    {
                        "description": "Id of Contact type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact type field. For possible fields, refer to the schema section for ContactType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contact types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContactType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContactType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContactType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Contact type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Contact type in json format. This action requires the caller entitled to view Contact types",
                "tags": [
                    "/ContactType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Contact type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ContactType in json format, subject to caller is entitled to edit Contact types",
                "operationId": "updateEntitySpecificContactType",
                "parameters": [
                    {
                        "description": "Id of Contact type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Contact type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContactType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Contact type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contact type subject to caller is entitled to edit Contact types",
                "tags": [
                    "/ContactType/{Id}"
                ]
            }
        },
        "/ContractGroup": {
            "get": {
                "operationId": "getEntityContractGroup",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContractGroup",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract group field. For possible fields, refer to the schema section for ContractGroup",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contract groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contract group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContractGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Contract groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Contract groups in json format. This action requires the caller entitled to view Contract groups",
                "tags": [
                    "/ContractGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Contract group.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ContractGroup. This action requires the caller entitled to create Contract groups",
                "operationId": "createEntityContractGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Contract group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Contract group. The response body would contain the created Contract group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Contract group. This action requires the caller entitled to create Contract groups",
                "tags": [
                    "/ContractGroup"
                ]
            }
        },
        "/ContractGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Contract group.\n. This action is subject to caller is entitled to delete Contract groups",
                "operationId": "deleteEntitySpecificContractGroup",
                "parameters": [
                    {
                        "description": "Id of Contract group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Contract group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contract group subject to caller is entitled to delete Contract groups",
                "tags": [
                    "/ContractGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificContractGroup",
                "parameters": [
                    {
                        "description": "Id of Contract group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContractGroup",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract group field. For possible fields, refer to the schema section for ContractGroup",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contract groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contract group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContractGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Contract group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Contract group in json format. This action requires the caller entitled to view Contract groups",
                "tags": [
                    "/ContractGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Contract group.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ContractGroup in json format, subject to caller is entitled to edit Contract groups",
                "operationId": "updateEntitySpecificContractGroup",
                "parameters": [
                    {
                        "description": "Id of Contract group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Contract group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Contract group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contract group subject to caller is entitled to edit Contract groups",
                "tags": [
                    "/ContractGroup/{Id}"
                ]
            }
        },
        "/ContractStatus": {
            "get": {
                "operationId": "getEntityContractStatus",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContractStatus",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contract status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContractStatus",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract status field. For possible fields, refer to the schema section for ContractStatus",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contract statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Contract statuses. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Contract statuses in json format. This action requires the caller entitled to view Contract statuses",
                "tags": [
                    "/ContractStatus"
                ]
            },
            "post": {
                "description": "Creates a new  Contract status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ContractStatus. This action requires the caller entitled to create Contract statuses",
                "operationId": "createEntityContractStatus",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractStatus"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Contract status",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Contract status. The response body would contain the created Contract status",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Contract status. This action requires the caller entitled to create Contract statuses",
                "tags": [
                    "/ContractStatus"
                ]
            }
        },
        "/ContractStatus/{Id}": {
            "delete": {
                "description": "Deletes a existing Contract status.\n. This action is subject to caller is entitled to delete Contract statuses",
                "operationId": "deleteEntitySpecificContractStatus",
                "parameters": [
                    {
                        "description": "Id of Contract status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Contract status"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contract status subject to caller is entitled to delete Contract statuses",
                "tags": [
                    "/ContractStatus/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificContractStatus",
                "parameters": [
                    {
                        "description": "Id of Contract status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ContractStatus",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contract status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ContractStatus",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract status field. For possible fields, refer to the schema section for ContractStatus",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contract statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Contract status. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Contract status in json format. This action requires the caller entitled to view Contract statuses",
                "tags": [
                    "/ContractStatus/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Contract status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ContractStatus in json format, subject to caller is entitled to edit Contract statuses",
                "operationId": "updateEntitySpecificContractStatus",
                "parameters": [
                    {
                        "description": "Id of Contract status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractStatus"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Contract status",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContractStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Contract status. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contract status subject to caller is entitled to edit Contract statuses",
                "tags": [
                    "/ContractStatus/{Id}"
                ]
            }
        },
        "/Counterparty": {
            "get": {
                "operationId": "getEntityCounterparty",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Counterparty",
                        "examples": {
                            "Filter by WithholdingTaxExemptionReason, in operator": {
                                "description": "Filter by WithholdingTaxExemptionReason, in operator",
                                "value": "WithholdingTaxExemptionReason,IN,A,B,C"
                            },
                            "Filter by WithholdingTaxExemptionReason, not in operator": {
                                "description": "Filter by WithholdingTaxExemptionReason, not in operator",
                                "value": "WithholdingTaxExemptionReason,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Counterparty",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field. For possible fields, refer to the schema section for Counterparty",
                        "examples": {
                            "Sort by WithholdingTaxExemptionReason, ascending order": {
                                "description": "Sort by WithholdingTaxExemptionReason, ascending order",
                                "value": "WithholdingTaxExemptionReason:ASC"
                            },
                            "Sort by WithholdingTaxExemptionReason, descending order": {
                                "description": "Sort by WithholdingTaxExemptionReason, descending order",
                                "value": "WithholdingTaxExemptionReason:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparties",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparties. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparties in json format. This action requires the caller entitled to view Counterparties",
                "tags": [
                    "/Counterparty"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are ShortName,Name.\n For possible entity Fields, refer to the schema section for Counterparty. This action requires the caller entitled to create Counterparties",
                "operationId": "createEntityCounterparty",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty. The response body would contain the created Counterparty",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty. This action requires the caller entitled to create Counterparties",
                "tags": [
                    "/Counterparty"
                ]
            }
        },
        "/Counterparty/{Id}": {
            "delete": {
                "description": "Deletes a existing Counterparty.\n. This action is subject to caller is entitled to delete Counterparties",
                "operationId": "deleteEntitySpecificCounterparty",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty subject to caller is entitled to delete Counterparties",
                "tags": [
                    "/Counterparty/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterparty",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Counterparty",
                        "examples": {
                            "Filter by WithholdingTaxExemptionReason, in operator": {
                                "description": "Filter by WithholdingTaxExemptionReason, in operator",
                                "value": "WithholdingTaxExemptionReason,IN,A,B,C"
                            },
                            "Filter by WithholdingTaxExemptionReason, not in operator": {
                                "description": "Filter by WithholdingTaxExemptionReason, not in operator",
                                "value": "WithholdingTaxExemptionReason,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Counterparty",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field. For possible fields, refer to the schema section for Counterparty",
                        "examples": {
                            "Sort by WithholdingTaxExemptionReason, ascending order": {
                                "description": "Sort by WithholdingTaxExemptionReason, ascending order",
                                "value": "WithholdingTaxExemptionReason:ASC"
                            },
                            "Sort by WithholdingTaxExemptionReason, descending order": {
                                "description": "Sort by WithholdingTaxExemptionReason, descending order",
                                "value": "WithholdingTaxExemptionReason:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparties",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty in json format. This action requires the caller entitled to view Counterparties",
                "tags": [
                    "/Counterparty/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are ShortName,Name.\n For possible entity Fields, refer to the schema section for Counterparty in json format, subject to caller is entitled to edit Counterparties",
                "operationId": "updateEntitySpecificCounterparty",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty subject to caller is entitled to edit Counterparties",
                "tags": [
                    "/Counterparty/{Id}"
                ]
            }
        },
        "/Counterparty/{Id}/Addresses": {
            "get": {
                "operationId": "getEntityCounterpartyAddress",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Address",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Address",
                        "examples": {
                            "Filter by Town, in operator": {
                                "description": "Filter by Town, in operator",
                                "value": "Town,IN,A,B,C"
                            },
                            "Filter by Town, not in operator": {
                                "description": "Filter by Town, not in operator",
                                "value": "Town,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field. For possible fields, refer to the schema section for Address",
                        "examples": {
                            "Sort by Town, ascending order": {
                                "description": "Sort by Town, ascending order",
                                "value": "Town:ASC"
                            },
                            "Sort by Town, descending order": {
                                "description": "Sort by Town, descending order",
                                "value": "Town:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Addresses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Address"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Addresses belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Addresses belonging to the parent Counterparty in json format. This action requires the caller entitled to view Addresses",
                "tags": [
                    "/Counterparty/{Id}/Addresses"
                ]
            },
            "post": {
                "description": "Creates a new  Address.\nAddress is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is AddressTypeId.\n For possible entity Fields, refer to the schema section for Address. This action requires the caller entitled to create Addresses",
                "operationId": "createEntityCounterpartyAddress",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Address"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Address",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Address"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Address for the parent Counterparty. The response body would contain the created Address",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Address belonging to Counterparty. This action requires the caller entitled to create Addresses",
                "tags": [
                    "/Counterparty/{Id}/Addresses"
                ]
            }
        },
        "/Counterparty/{Id}/Addresses/{AddressesId}": {
            "delete": {
                "description": "Deletes a existing Address.\nAddress is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Addresses",
                "operationId": "deleteEntitySpecificCounterpartyAddress",
                "parameters": [
                    {
                        "description": "Id of Address",
                        "in": "path",
                        "name": "AddressesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Address belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Address belonging to Counterparty subject to caller is entitled to delete Addresses",
                "tags": [
                    "/Counterparty/{Id}/Addresses/{AddressesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyAddress",
                "parameters": [
                    {
                        "description": "Id of Address",
                        "in": "path",
                        "name": "AddressesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Address",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Address",
                        "examples": {
                            "Filter by Town, in operator": {
                                "description": "Filter by Town, in operator",
                                "value": "Town,IN,A,B,C"
                            },
                            "Filter by Town, not in operator": {
                                "description": "Filter by Town, not in operator",
                                "value": "Town,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field. For possible fields, refer to the schema section for Address",
                        "examples": {
                            "Sort by Town, ascending order": {
                                "description": "Sort by Town, ascending order",
                                "value": "Town:ASC"
                            },
                            "Sort by Town, descending order": {
                                "description": "Sort by Town, descending order",
                                "value": "Town:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Addresses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Address"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Address belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Address belonging to the parent Counterparty in json format. This action requires the caller entitled to view Addresses",
                "tags": [
                    "/Counterparty/{Id}/Addresses/{AddressesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Address.\nAddress is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is AddressTypeId.\n For possible entity Fields, refer to the schema section for Address in json format, subject to caller is entitled to edit Addresses",
                "operationId": "updateEntitySpecificCounterpartyAddress",
                "parameters": [
                    {
                        "description": "Id of Address",
                        "in": "path",
                        "name": "AddressesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Address"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Address",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Address"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Address belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Address belonging to Counterparty subject to caller is entitled to edit Addresses",
                "tags": [
                    "/Counterparty/{Id}/Addresses/{AddressesId}"
                ]
            }
        },
        "/Counterparty/{Id}/BankAccounts": {
            "get": {
                "operationId": "getEntityCounterpartyBankAccount",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BankAccount",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field. For possible fields, refer to the schema section for BankAccount",
                        "examples": {
                            "Sort by SwiftCode, ascending order": {
                                "description": "Sort by SwiftCode, ascending order",
                                "value": "SwiftCode:ASC"
                            },
                            "Sort by SwiftCode, descending order": {
                                "description": "Sort by SwiftCode, descending order",
                                "value": "SwiftCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BankAccount",
                        "examples": {
                            "Filter by SwiftCode, in operator": {
                                "description": "Filter by SwiftCode, in operator",
                                "value": "SwiftCode,IN,A,B,C"
                            },
                            "Filter by SwiftCode, not in operator": {
                                "description": "Filter by SwiftCode, not in operator",
                                "value": "SwiftCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bank accounts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BankAccount"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bank accounts belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bank accounts belonging to the parent Counterparty in json format. This action requires the caller entitled to view Bank accounts",
                "tags": [
                    "/Counterparty/{Id}/BankAccounts"
                ]
            },
            "post": {
                "description": "Creates a new  Bank account.\nBank account is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BankAccount. This action requires the caller entitled to create Bank accounts",
                "operationId": "createEntityCounterpartyBankAccount",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BankAccount"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bank account",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BankAccount"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bank account for the parent Counterparty. The response body would contain the created Bank account",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bank account belonging to Counterparty. This action requires the caller entitled to create Bank accounts",
                "tags": [
                    "/Counterparty/{Id}/BankAccounts"
                ]
            }
        },
        "/Counterparty/{Id}/BankAccounts/{BankAccountsId}": {
            "delete": {
                "description": "Deletes a existing Bank account.\nBank account is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Bank accounts",
                "operationId": "deleteEntitySpecificCounterpartyBankAccount",
                "parameters": [
                    {
                        "description": "Id of Bank account",
                        "in": "path",
                        "name": "BankAccountsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bank account belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bank account belonging to Counterparty subject to caller is entitled to delete Bank accounts",
                "tags": [
                    "/Counterparty/{Id}/BankAccounts/{BankAccountsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyBankAccount",
                "parameters": [
                    {
                        "description": "Id of Bank account",
                        "in": "path",
                        "name": "BankAccountsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BankAccount",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field. For possible fields, refer to the schema section for BankAccount",
                        "examples": {
                            "Sort by SwiftCode, ascending order": {
                                "description": "Sort by SwiftCode, ascending order",
                                "value": "SwiftCode:ASC"
                            },
                            "Sort by SwiftCode, descending order": {
                                "description": "Sort by SwiftCode, descending order",
                                "value": "SwiftCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BankAccount",
                        "examples": {
                            "Filter by SwiftCode, in operator": {
                                "description": "Filter by SwiftCode, in operator",
                                "value": "SwiftCode,IN,A,B,C"
                            },
                            "Filter by SwiftCode, not in operator": {
                                "description": "Filter by SwiftCode, not in operator",
                                "value": "SwiftCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bank accounts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BankAccount"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bank account belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bank account belonging to the parent Counterparty in json format. This action requires the caller entitled to view Bank accounts",
                "tags": [
                    "/Counterparty/{Id}/BankAccounts/{BankAccountsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bank account.\nBank account is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BankAccount in json format, subject to caller is entitled to edit Bank accounts",
                "operationId": "updateEntitySpecificCounterpartyBankAccount",
                "parameters": [
                    {
                        "description": "Id of Bank account",
                        "in": "path",
                        "name": "BankAccountsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BankAccount"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bank account",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BankAccount"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bank account belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bank account belonging to Counterparty subject to caller is entitled to edit Bank accounts",
                "tags": [
                    "/Counterparty/{Id}/BankAccounts/{BankAccountsId}"
                ]
            }
        },
        "/Counterparty/{Id}/BICs": {
            "get": {
                "operationId": "getEntityCounterpartyBICTypeRelation",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BIC Type Relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICTypeRelation",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field. For possible fields, refer to the schema section for BICTypeRelation",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICTypeRelation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching BIC Type Relations belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching BIC Type Relations belonging to the parent Counterparty in json format. This action requires the caller entitled to view BIC Type Relations",
                "tags": [
                    "/Counterparty/{Id}/BICs"
                ]
            },
            "post": {
                "description": "Creates a new  BIC Type Relation.\nBIC Type Relation is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Type,BIC.\n For possible entity Fields, refer to the schema section for BICTypeRelation. This action requires the caller entitled to create BIC Type Relations",
                "operationId": "createEntityCounterpartyBICTypeRelation",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the BIC Type Relation",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of BIC Type Relation for the parent Counterparty. The response body would contain the created BIC Type Relation",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new BIC Type Relation belonging to Counterparty. This action requires the caller entitled to create BIC Type Relations",
                "tags": [
                    "/Counterparty/{Id}/BICs"
                ]
            }
        },
        "/Counterparty/{Id}/BICs/{BiCsId}": {
            "delete": {
                "description": "Deletes a existing BIC Type Relation.\nBIC Type Relation is a sub-entity of Counterparty. This action is subject to caller is entitled to delete BIC Type Relations",
                "operationId": "deleteEntitySpecificCounterpartyBICTypeRelation",
                "parameters": [
                    {
                        "description": "Id of BIC Type Relation",
                        "in": "path",
                        "name": "BiCsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific BIC Type Relation belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing BIC Type Relation belonging to Counterparty subject to caller is entitled to delete BIC Type Relations",
                "tags": [
                    "/Counterparty/{Id}/BICs/{BiCsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyBICTypeRelation",
                "parameters": [
                    {
                        "description": "Id of BIC Type Relation",
                        "in": "path",
                        "name": "BiCsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned BIC Type Relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICTypeRelation",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field. For possible fields, refer to the schema section for BICTypeRelation",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICTypeRelation",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific BIC Type Relation belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific BIC Type Relation belonging to the parent Counterparty in json format. This action requires the caller entitled to view BIC Type Relations",
                "tags": [
                    "/Counterparty/{Id}/BICs/{BiCsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing BIC Type Relation.\nBIC Type Relation is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Type,BIC.\n For possible entity Fields, refer to the schema section for BICTypeRelation in json format, subject to caller is entitled to edit BIC Type Relations",
                "operationId": "updateEntitySpecificCounterpartyBICTypeRelation",
                "parameters": [
                    {
                        "description": "Id of BIC Type Relation",
                        "in": "path",
                        "name": "BiCsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified BIC Type Relation",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BICTypeRelation"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific BIC Type Relation belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing BIC Type Relation belonging to Counterparty subject to caller is entitled to edit BIC Type Relations",
                "tags": [
                    "/Counterparty/{Id}/BICs/{BiCsId}"
                ]
            }
        },
        "/Counterparty/{Id}/BusinessUnits": {
            "get": {
                "operationId": "getEntityCounterpartyBusinessUnitSubEntity",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field. For possible fields, refer to the schema section for BusinessUnitSubEntity",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnitSubEntity",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnitSubEntity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business Unit Relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Business Unit Relations belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Business Unit Relations belonging to the parent Counterparty in json format. This action requires the caller entitled to view Business Unit Relations",
                "tags": [
                    "/Counterparty/{Id}/BusinessUnits"
                ]
            },
            "post": {
                "description": "Creates a new  Business Unit Relation.\nBusiness Unit Relation is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is BusinessUnit.\n For possible entity Fields, refer to the schema section for BusinessUnitSubEntity. This action requires the caller entitled to create Business Unit Relations",
                "operationId": "createEntityCounterpartyBusinessUnitSubEntity",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Business Unit Relation",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Business Unit Relation for the parent Counterparty. The response body would contain the created Business Unit Relation",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Business Unit Relation belonging to Counterparty. This action requires the caller entitled to create Business Unit Relations",
                "tags": [
                    "/Counterparty/{Id}/BusinessUnits"
                ]
            }
        },
        "/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}": {
            "delete": {
                "description": "Deletes a existing Business Unit Relation.\nBusiness Unit Relation is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Business Unit Relations",
                "operationId": "deleteEntitySpecificCounterpartyBusinessUnitSubEntity",
                "parameters": [
                    {
                        "description": "Id of Business Unit Relation",
                        "in": "path",
                        "name": "BusinessUnitsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Business Unit Relation belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Business Unit Relation belonging to Counterparty subject to caller is entitled to delete Business Unit Relations",
                "tags": [
                    "/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyBusinessUnitSubEntity",
                "parameters": [
                    {
                        "description": "Id of Business Unit Relation",
                        "in": "path",
                        "name": "BusinessUnitsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field. For possible fields, refer to the schema section for BusinessUnitSubEntity",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnitSubEntity",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnitSubEntity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business Unit Relations",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Business Unit Relation belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Business Unit Relation belonging to the parent Counterparty in json format. This action requires the caller entitled to view Business Unit Relations",
                "tags": [
                    "/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Business Unit Relation.\nBusiness Unit Relation is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is BusinessUnit.\n For possible entity Fields, refer to the schema section for BusinessUnitSubEntity in json format, subject to caller is entitled to edit Business Unit Relations",
                "operationId": "updateEntitySpecificCounterpartyBusinessUnitSubEntity",
                "parameters": [
                    {
                        "description": "Id of Business Unit Relation",
                        "in": "path",
                        "name": "BusinessUnitsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Business Unit Relation",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.BusinessUnitSubEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Business Unit Relation belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Business Unit Relation belonging to Counterparty subject to caller is entitled to edit Business Unit Relations",
                "tags": [
                    "/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}"
                ]
            }
        },
        "/Counterparty/{Id}/ClearingCodes": {
            "get": {
                "operationId": "getEntityCounterpartyClearingCode",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field. For possible fields, refer to the schema section for ClearingCode",
                        "examples": {
                            "Sort by Code, ascending order": {
                                "description": "Sort by Code, ascending order",
                                "value": "Code:ASC"
                            },
                            "Sort by Code, descending order": {
                                "description": "Sort by Code, descending order",
                                "value": "Code:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCode",
                        "examples": {
                            "Filter by Code, in operator": {
                                "description": "Filter by Code, in operator",
                                "value": "Code,IN,A,B,C"
                            },
                            "Filter by Code, not in operator": {
                                "description": "Filter by Code, not in operator",
                                "value": "Code,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.ClearingCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Clearing codes belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Clearing codes belonging to the parent Counterparty in json format. This action requires the caller entitled to view Clearing codes",
                "tags": [
                    "/Counterparty/{Id}/ClearingCodes"
                ]
            },
            "post": {
                "description": "Creates a new  Clearing code.\nClearing code is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are ClearingFormat,Type,Code,ClearingSystem.\n For possible entity Fields, refer to the schema section for ClearingCode. This action requires the caller entitled to create Clearing codes",
                "operationId": "createEntityCounterpartyClearingCode",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.ClearingCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Clearing code",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.ClearingCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Clearing code for the parent Counterparty. The response body would contain the created Clearing code",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Clearing code belonging to Counterparty. This action requires the caller entitled to create Clearing codes",
                "tags": [
                    "/Counterparty/{Id}/ClearingCodes"
                ]
            }
        },
        "/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}": {
            "delete": {
                "description": "Deletes a existing Clearing code.\nClearing code is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Clearing codes",
                "operationId": "deleteEntitySpecificCounterpartyClearingCode",
                "parameters": [
                    {
                        "description": "Id of Clearing code",
                        "in": "path",
                        "name": "ClearingCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Clearing code belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Clearing code belonging to Counterparty subject to caller is entitled to delete Clearing codes",
                "tags": [
                    "/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyClearingCode",
                "parameters": [
                    {
                        "description": "Id of Clearing code",
                        "in": "path",
                        "name": "ClearingCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Clearing codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field. For possible fields, refer to the schema section for ClearingCode",
                        "examples": {
                            "Sort by Code, ascending order": {
                                "description": "Sort by Code, ascending order",
                                "value": "Code:ASC"
                            },
                            "Sort by Code, descending order": {
                                "description": "Sort by Code, descending order",
                                "value": "Code:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCode",
                        "examples": {
                            "Filter by Code, in operator": {
                                "description": "Filter by Code, in operator",
                                "value": "Code,IN,A,B,C"
                            },
                            "Filter by Code, not in operator": {
                                "description": "Filter by Code, not in operator",
                                "value": "Code,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.ClearingCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Clearing code belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Clearing code belonging to the parent Counterparty in json format. This action requires the caller entitled to view Clearing codes",
                "tags": [
                    "/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Clearing code.\nClearing code is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are ClearingFormat,Type,Code,ClearingSystem.\n For possible entity Fields, refer to the schema section for ClearingCode in json format, subject to caller is entitled to edit Clearing codes",
                "operationId": "updateEntitySpecificCounterpartyClearingCode",
                "parameters": [
                    {
                        "description": "Id of Clearing code",
                        "in": "path",
                        "name": "ClearingCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.ClearingCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Clearing code",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.ClearingCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Clearing code belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Clearing code belonging to Counterparty subject to caller is entitled to edit Clearing codes",
                "tags": [
                    "/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}"
                ]
            }
        },
        "/Counterparty/{Id}/Contacts": {
            "get": {
                "operationId": "getEntityCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contacts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Contacts belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Contacts belonging to the parent Counterparty in json format. This action requires the caller entitled to view Contacts",
                "tags": [
                    "/Counterparty/{Id}/Contacts"
                ]
            },
            "post": {
                "description": "Creates a new  Contact.\nContact is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Contact. This action requires the caller entitled to create Contacts",
                "operationId": "createEntityCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Contact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Contact",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Contact for the parent Counterparty. The response body would contain the created Contact",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Contact belonging to Counterparty. This action requires the caller entitled to create Contacts",
                "tags": [
                    "/Counterparty/{Id}/Contacts"
                ]
            }
        },
        "/Counterparty/{Id}/Contacts/{ContactsId}": {
            "delete": {
                "description": "Deletes a existing Contact.\nContact is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Contacts",
                "operationId": "deleteEntitySpecificCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Contact belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Contact belonging to Counterparty subject to caller is entitled to delete Contacts",
                "tags": [
                    "/Counterparty/{Id}/Contacts/{ContactsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Contacts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Contact belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Contact belonging to the parent Counterparty in json format. This action requires the caller entitled to view Contacts",
                "tags": [
                    "/Counterparty/{Id}/Contacts/{ContactsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Contact.\nContact is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Contact in json format, subject to caller is entitled to edit Contacts",
                "operationId": "updateEntitySpecificCounterpartyContact",
                "parameters": [
                    {
                        "description": "Id of Contact",
                        "in": "path",
                        "name": "ContactsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Contact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Contact",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Contact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Contact belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Contact belonging to Counterparty subject to caller is entitled to edit Contacts",
                "tags": [
                    "/Counterparty/{Id}/Contacts/{ContactsId}"
                ]
            }
        },
        "/Counterparty/{Id}/DepositoryCodes": {
            "get": {
                "operationId": "getEntityCounterpartyDepositoryCode",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Depository codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCode",
                        "examples": {
                            "Filter by Code, in operator": {
                                "description": "Filter by Code, in operator",
                                "value": "Code,IN,A,B,C"
                            },
                            "Filter by Code, not in operator": {
                                "description": "Filter by Code, not in operator",
                                "value": "Code,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field. For possible fields, refer to the schema section for DepositoryCode",
                        "examples": {
                            "Sort by Code, ascending order": {
                                "description": "Sort by Code, ascending order",
                                "value": "Code:ASC"
                            },
                            "Sort by Code, descending order": {
                                "description": "Sort by Code, descending order",
                                "value": "Code:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Depository codes belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Depository codes belonging to the parent Counterparty in json format. This action requires the caller entitled to view Depository codes",
                "tags": [
                    "/Counterparty/{Id}/DepositoryCodes"
                ]
            },
            "post": {
                "description": "Creates a new  Depository code.\nDepository code is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Format,Code.\n For possible entity Fields, refer to the schema section for DepositoryCode. This action requires the caller entitled to create Depository codes",
                "operationId": "createEntityCounterpartyDepositoryCode",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Depository code",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Depository code for the parent Counterparty. The response body would contain the created Depository code",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Depository code belonging to Counterparty. This action requires the caller entitled to create Depository codes",
                "tags": [
                    "/Counterparty/{Id}/DepositoryCodes"
                ]
            }
        },
        "/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}": {
            "delete": {
                "description": "Deletes a existing Depository code.\nDepository code is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Depository codes",
                "operationId": "deleteEntitySpecificCounterpartyDepositoryCode",
                "parameters": [
                    {
                        "description": "Id of Depository code",
                        "in": "path",
                        "name": "DepositoryCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Depository code belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Depository code belonging to Counterparty subject to caller is entitled to delete Depository codes",
                "tags": [
                    "/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyDepositoryCode",
                "parameters": [
                    {
                        "description": "Id of Depository code",
                        "in": "path",
                        "name": "DepositoryCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Depository codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCode",
                        "examples": {
                            "Filter by Code, in operator": {
                                "description": "Filter by Code, in operator",
                                "value": "Code,IN,A,B,C"
                            },
                            "Filter by Code, not in operator": {
                                "description": "Filter by Code, not in operator",
                                "value": "Code,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field. For possible fields, refer to the schema section for DepositoryCode",
                        "examples": {
                            "Sort by Code, ascending order": {
                                "description": "Sort by Code, ascending order",
                                "value": "Code:ASC"
                            },
                            "Sort by Code, descending order": {
                                "description": "Sort by Code, descending order",
                                "value": "Code:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Depository code belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Depository code belonging to the parent Counterparty in json format. This action requires the caller entitled to view Depository codes",
                "tags": [
                    "/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Depository code.\nDepository code is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Format,Code.\n For possible entity Fields, refer to the schema section for DepositoryCode in json format, subject to caller is entitled to edit Depository codes",
                "operationId": "updateEntitySpecificCounterpartyDepositoryCode",
                "parameters": [
                    {
                        "description": "Id of Depository code",
                        "in": "path",
                        "name": "DepositoryCodesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Depository code",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.DepositoryCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Depository code belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Depository code belonging to Counterparty subject to caller is entitled to edit Depository codes",
                "tags": [
                    "/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}"
                ]
            }
        },
        "/Counterparty/{Id}/Farms": {
            "get": {
                "operationId": "getEntityCounterpartyFarm",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field. For possible fields, refer to the schema section for Farm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Farm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Farm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Farms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Farms belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Farms belonging to the parent Counterparty in json format. This action requires the caller entitled to view Farms",
                "tags": [
                    "/Counterparty/{Id}/Farms"
                ]
            },
            "post": {
                "description": "Creates a new  Farm.\nFarm is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Farm. This action requires the caller entitled to create Farms",
                "operationId": "createEntityCounterpartyFarm",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Farm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Farm. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Farm for the parent Counterparty. The response body would contain the created Farm",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Farm belonging to Counterparty. This action requires the caller entitled to create Farms",
                "tags": [
                    "/Counterparty/{Id}/Farms"
                ]
            }
        },
        "/Counterparty/{Id}/Farms/{FarmsId}": {
            "delete": {
                "description": "Deletes a existing Farm.\nFarm is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Farms",
                "operationId": "deleteEntitySpecificCounterpartyFarm",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Farm belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Farm belonging to Counterparty subject to caller is entitled to delete Farms",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyFarm",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field. For possible fields, refer to the schema section for Farm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Farm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Farm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Farms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Farm belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Farm belonging to the parent Counterparty in json format. This action requires the caller entitled to view Farms",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Farm.\nFarm is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Farm in json format, subject to caller is entitled to edit Farms",
                "operationId": "updateEntitySpecificCounterpartyFarm",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Farm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Farm. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Farm belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Farm belonging to Counterparty subject to caller is entitled to edit Farms",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}"
                ]
            }
        },
        "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults": {
            "get": {
                "operationId": "getEntityCounterpartyFarmSplit",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Splits",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Splits belonging to the parent Farm. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Splits belonging to the parent Farm in json format. This action requires the caller entitled to view Splits",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults"
                ]
            },
            "post": {
                "description": "Creates a new  Split.\nSplit is a sub-entity of  Farm The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Counterparty,Percentage.\n For possible entity Fields, refer to the schema section for Split. This action requires the caller entitled to create Splits",
                "operationId": "createEntityCounterpartyFarmSplit",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Farm.Split"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Split",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Split for the parent Farm. The response body would contain the created Split",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Split belonging to Farm. This action requires the caller entitled to create Splits",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults"
                ]
            }
        },
        "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}": {
            "delete": {
                "description": "Deletes a existing Split.\nSplit is a sub-entity of Farm. This action is subject to caller is entitled to delete Splits",
                "operationId": "deleteEntitySpecificCounterpartyFarmSplit",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Split belonging to the parent Farm"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Split belonging to Farm subject to caller is entitled to delete Splits",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyFarmSplit",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Splits",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Split belonging to the parent Farm. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Split belonging to the parent Farm in json format. This action requires the caller entitled to view Splits",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Split.\nSplit is a sub-entity of Farm The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Counterparty,Percentage.\n For possible entity Fields, refer to the schema section for Split in json format, subject to caller is entitled to edit Splits",
                "operationId": "updateEntitySpecificCounterpartyFarmSplit",
                "parameters": [
                    {
                        "description": "Id of Farm",
                        "in": "path",
                        "name": "FarmsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Farm.Split"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Split",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Farm.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Split belonging to the parent Farm. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Split belonging to Farm subject to caller is entitled to edit Splits",
                "tags": [
                    "/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}"
                ]
            }
        },
        "/Counterparty/{Id}/InvestmentManagers": {
            "get": {
                "operationId": "getEntityCounterpartyInvestmentManager",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestmentManager",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field. For possible fields, refer to the schema section for InvestmentManager",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestmentManager",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Investment managers",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Investment managers belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Investment managers belonging to the parent Counterparty in json format. This action requires the caller entitled to view Investment managers",
                "tags": [
                    "/Counterparty/{Id}/InvestmentManagers"
                ]
            },
            "post": {
                "description": "Creates a new  Investment manager.\nInvestment manager is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is InvestmentManager.\n For possible entity Fields, refer to the schema section for InvestmentManager. This action requires the caller entitled to create Investment managers",
                "operationId": "createEntityCounterpartyInvestmentManager",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Investment manager",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Investment manager for the parent Counterparty. The response body would contain the created Investment manager",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Investment manager belonging to Counterparty. This action requires the caller entitled to create Investment managers",
                "tags": [
                    "/Counterparty/{Id}/InvestmentManagers"
                ]
            }
        },
        "/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}": {
            "delete": {
                "description": "Deletes a existing Investment manager.\nInvestment manager is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Investment managers",
                "operationId": "deleteEntitySpecificCounterpartyInvestmentManager",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Investment manager",
                        "in": "path",
                        "name": "InvestmentManagersId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Investment manager belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Investment manager belonging to Counterparty subject to caller is entitled to delete Investment managers",
                "tags": [
                    "/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyInvestmentManager",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Investment manager",
                        "in": "path",
                        "name": "InvestmentManagersId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestmentManager",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field. For possible fields, refer to the schema section for InvestmentManager",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestmentManager",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Investment managers",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Investment manager belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Investment manager belonging to the parent Counterparty in json format. This action requires the caller entitled to view Investment managers",
                "tags": [
                    "/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Investment manager.\nInvestment manager is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is InvestmentManager.\n For possible entity Fields, refer to the schema section for InvestmentManager in json format, subject to caller is entitled to edit Investment managers",
                "operationId": "updateEntitySpecificCounterpartyInvestmentManager",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Investment manager",
                        "in": "path",
                        "name": "InvestmentManagersId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Investment manager",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.InvestmentManager"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Investment manager belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Investment manager belonging to Counterparty subject to caller is entitled to edit Investment managers",
                "tags": [
                    "/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}"
                ]
            }
        },
        "/Counterparty/{Id}/SplitDefaults": {
            "get": {
                "operationId": "getEntityCounterpartySplit",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Splits",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Splits belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Splits belonging to the parent Counterparty in json format. This action requires the caller entitled to view Splits",
                "tags": [
                    "/Counterparty/{Id}/SplitDefaults"
                ]
            },
            "post": {
                "description": "Creates a new  Split.\nSplit is a sub-entity of  Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Counterparty,Percentage.\n For possible entity Fields, refer to the schema section for Split. This action requires the caller entitled to create Splits",
                "operationId": "createEntityCounterpartySplit",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Split"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Split",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Split for the parent Counterparty. The response body would contain the created Split",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Split belonging to Counterparty. This action requires the caller entitled to create Splits",
                "tags": [
                    "/Counterparty/{Id}/SplitDefaults"
                ]
            }
        },
        "/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}": {
            "delete": {
                "description": "Deletes a existing Split.\nSplit is a sub-entity of Counterparty. This action is subject to caller is entitled to delete Splits",
                "operationId": "deleteEntitySpecificCounterpartySplit",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Split belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Split belonging to Counterparty subject to caller is entitled to delete Splits",
                "tags": [
                    "/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartySplit",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Splits",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Split belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Split belonging to the parent Counterparty in json format. This action requires the caller entitled to view Splits",
                "tags": [
                    "/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Split.\nSplit is a sub-entity of Counterparty The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Counterparty,Percentage.\n For possible entity Fields, refer to the schema section for Split in json format, subject to caller is entitled to edit Splits",
                "operationId": "updateEntitySpecificCounterpartySplit",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Split",
                        "in": "path",
                        "name": "SplitDefaultsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.Split"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Split",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.Split"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Split belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Split belonging to Counterparty subject to caller is entitled to edit Splits",
                "tags": [
                    "/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}"
                ]
            }
        },
        "/Counterparty/{Id}/SWIFTFields": {
            "get": {
                "operationId": "getEntityCounterpartySWIFTFields",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SWIFTFields",
                        "examples": {
                            "Filter by Field87Line5, in operator": {
                                "description": "Filter by Field87Line5, in operator",
                                "value": "Field87Line5,IN,A,B,C"
                            },
                            "Filter by Field87Line5, not in operator": {
                                "description": "Filter by Field87Line5, not in operator",
                                "value": "Field87Line5,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SWIFTFields",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned SWIFT fieldses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field. For possible fields, refer to the schema section for SWIFTFields",
                        "examples": {
                            "Sort by Field87Line5, ascending order": {
                                "description": "Sort by Field87Line5, ascending order",
                                "value": "Field87Line5:ASC"
                            },
                            "Sort by Field87Line5, descending order": {
                                "description": "Sort by Field87Line5, descending order",
                                "value": "Field87Line5:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching SWIFT fieldses belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching SWIFT fieldses belonging to the parent Counterparty in json format. This action requires the caller entitled to view SWIFT fieldses",
                "tags": [
                    "/Counterparty/{Id}/SWIFTFields"
                ]
            },
            "post": {
                "description": "Creates a new  SWIFT fields.\nSWIFT fields is a sub-entity of  CounterpartyFields required for creation is ConfirmationFieldType.\n For possible entity Fields, refer to the schema section for SWIFTFields. This action requires the caller entitled to create SWIFT fieldses",
                "operationId": "createEntityCounterpartySWIFTFields",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the SWIFT fields",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of SWIFT fields for the parent Counterparty. The response body would contain the created SWIFT fields",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new SWIFT fields belonging to Counterparty. This action requires the caller entitled to create SWIFT fieldses",
                "tags": [
                    "/Counterparty/{Id}/SWIFTFields"
                ]
            }
        },
        "/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}": {
            "delete": {
                "description": "Deletes a existing SWIFT fields.\nSWIFT fields is a sub-entity of Counterparty. This action is subject to caller is entitled to delete SWIFT fieldses",
                "operationId": "deleteEntitySpecificCounterpartySWIFTFields",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of SWIFT fields",
                        "in": "path",
                        "name": "SwIFTFieldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific SWIFT fields belonging to the parent Counterparty"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing SWIFT fields belonging to Counterparty subject to caller is entitled to delete SWIFT fieldses",
                "tags": [
                    "/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartySWIFTFields",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of SWIFT fields",
                        "in": "path",
                        "name": "SwIFTFieldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SWIFTFields",
                        "examples": {
                            "Filter by Field87Line5, in operator": {
                                "description": "Filter by Field87Line5, in operator",
                                "value": "Field87Line5,IN,A,B,C"
                            },
                            "Filter by Field87Line5, not in operator": {
                                "description": "Filter by Field87Line5, not in operator",
                                "value": "Field87Line5,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SWIFTFields",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned SWIFT fieldses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field. For possible fields, refer to the schema section for SWIFTFields",
                        "examples": {
                            "Sort by Field87Line5, ascending order": {
                                "description": "Sort by Field87Line5, ascending order",
                                "value": "Field87Line5:ASC"
                            },
                            "Sort by Field87Line5, descending order": {
                                "description": "Sort by Field87Line5, descending order",
                                "value": "Field87Line5:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific SWIFT fields belonging to the parent Counterparty. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific SWIFT fields belonging to the parent Counterparty in json format. This action requires the caller entitled to view SWIFT fieldses",
                "tags": [
                    "/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing SWIFT fields.\nSWIFT fields is a sub-entity of CounterpartyFields required to be passed while editing is ConfirmationFieldType.\n For possible entity Fields, refer to the schema section for SWIFTFields in json format, subject to caller is entitled to edit SWIFT fieldses",
                "operationId": "updateEntitySpecificCounterpartySWIFTFields",
                "parameters": [
                    {
                        "description": "Id of Counterparty",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of SWIFT fields",
                        "in": "path",
                        "name": "SwIFTFieldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified SWIFT fields",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Counterparty.SWIFTFields"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific SWIFT fields belonging to the parent Counterparty. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing SWIFT fields belonging to Counterparty subject to caller is entitled to edit SWIFT fieldses",
                "tags": [
                    "/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}"
                ]
            }
        },
        "/CounterpartyGroup": {
            "get": {
                "operationId": "getEntityCounterpartyGroup",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty group field. For possible fields, refer to the schema section for CounterpartyGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparty groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparty groups in json format. This action requires the caller entitled to view Counterparty groups",
                "tags": [
                    "/CounterpartyGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for CounterpartyGroup. This action requires the caller entitled to create Counterparty groups",
                "operationId": "createEntityCounterpartyGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty group. The response body would contain the created Counterparty group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty group. This action requires the caller entitled to create Counterparty groups",
                "tags": [
                    "/CounterpartyGroup"
                ]
            }
        },
        "/CounterpartyGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Counterparty group.\n. This action is subject to caller is entitled to delete Counterparty groups",
                "operationId": "deleteEntitySpecificCounterpartyGroup",
                "parameters": [
                    {
                        "description": "Id of Counterparty group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty group subject to caller is entitled to delete Counterparty groups",
                "tags": [
                    "/CounterpartyGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyGroup",
                "parameters": [
                    {
                        "description": "Id of Counterparty group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty group field. For possible fields, refer to the schema section for CounterpartyGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty group in json format. This action requires the caller entitled to view Counterparty groups",
                "tags": [
                    "/CounterpartyGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for CounterpartyGroup in json format, subject to caller is entitled to edit Counterparty groups",
                "operationId": "updateEntitySpecificCounterpartyGroup",
                "parameters": [
                    {
                        "description": "Id of Counterparty group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty group subject to caller is entitled to edit Counterparty groups",
                "tags": [
                    "/CounterpartyGroup/{Id}"
                ]
            }
        },
        "/CounterpartyHierarchy": {
            "get": {
                "operationId": "getEntityCounterpartyHierarchy",
                "parameters": [
                    {
                        "description": "Comma separated list of Counterparty hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty hierarchy field. For possible fields, refer to the schema section for CounterpartyHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparty hierarchies. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparty hierarchies in json format. This action requires the caller entitled to view Counterparty hierarchies",
                "tags": [
                    "/CounterpartyHierarchy"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty hierarchy.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for CounterpartyHierarchy. This action requires the caller entitled to create Counterparty hierarchies",
                "operationId": "createEntityCounterpartyHierarchy",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty hierarchy. The response body would contain the created Counterparty hierarchy",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty hierarchy. This action requires the caller entitled to create Counterparty hierarchies",
                "tags": [
                    "/CounterpartyHierarchy"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}": {
            "delete": {
                "description": "Deletes a existing Counterparty hierarchy.\n. This action is subject to caller is entitled to delete Counterparty hierarchies",
                "operationId": "deleteEntitySpecificCounterpartyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty hierarchy subject to caller is entitled to delete Counterparty hierarchies",
                "tags": [
                    "/CounterpartyHierarchy/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyHierarchy",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty hierarchy field. For possible fields, refer to the schema section for CounterpartyHierarchy",
                        "examples": {
                            "Sort by EntityClassStr, ascending order": {
                                "description": "Sort by EntityClassStr, ascending order",
                                "value": "EntityClassStr:ASC"
                            },
                            "Sort by EntityClassStr, descending order": {
                                "description": "Sort by EntityClassStr, descending order",
                                "value": "EntityClassStr:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyHierarchy",
                        "examples": {
                            "Filter by EntityClassStr, in operator": {
                                "description": "Filter by EntityClassStr, in operator",
                                "value": "EntityClassStr,IN,A,B,C"
                            },
                            "Filter by EntityClassStr, not in operator": {
                                "description": "Filter by EntityClassStr, not in operator",
                                "value": "EntityClassStr,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty hierarchies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty hierarchy in json format. This action requires the caller entitled to view Counterparty hierarchies",
                "tags": [
                    "/CounterpartyHierarchy/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty hierarchy.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for CounterpartyHierarchy in json format, subject to caller is entitled to edit Counterparty hierarchies",
                "operationId": "updateEntitySpecificCounterpartyHierarchy",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty hierarchy. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty hierarchy subject to caller is entitled to edit Counterparty hierarchies",
                "tags": [
                    "/CounterpartyHierarchy/{Id}"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/LevelDefault": {
            "get": {
                "operationId": "getEntityCounterpartyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level defaults belonging to the parent Counterparty hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level defaults belonging to the parent Counterparty hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault"
                ]
            },
            "post": {
                "description": "Creates a new  Level default.\nLevel default is a sub-entity of  Counterparty hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault. This action requires the caller entitled to create Level defaults",
                "operationId": "createEntityCounterpartyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default for the parent Counterparty hierarchy. The response body would contain the created Level default",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default belonging to Counterparty hierarchy. This action requires the caller entitled to create Level defaults",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}": {
            "delete": {
                "description": "Deletes a existing Level default.\nLevel default is a sub-entity of Counterparty hierarchy. This action is subject to caller is entitled to delete Level defaults",
                "operationId": "deleteEntitySpecificCounterpartyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default belonging to the parent Counterparty hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default belonging to Counterparty hierarchy subject to caller is entitled to delete Level defaults",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level defaults",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field. For possible fields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Sort by FieldName, ascending order": {
                                "description": "Sort by FieldName, ascending order",
                                "value": "FieldName:ASC"
                            },
                            "Sort by FieldName, descending order": {
                                "description": "Sort by FieldName, descending order",
                                "value": "FieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefault",
                        "examples": {
                            "Filter by FieldName, in operator": {
                                "description": "Filter by FieldName, in operator",
                                "value": "FieldName,IN,A,B,C"
                            },
                            "Filter by FieldName, not in operator": {
                                "description": "Filter by FieldName, not in operator",
                                "value": "FieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefault",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default belonging to the parent Counterparty hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default belonging to the parent Counterparty hierarchy in json format. This action requires the caller entitled to view Level defaults",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default.\nLevel default is a sub-entity of Counterparty hierarchy The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is FieldName.\n For possible entity Fields, refer to the schema section for LevelDefault in json format, subject to caller is entitled to edit Level defaults",
                "operationId": "updateEntitySpecificCounterpartyHierarchyLevelDefault",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default belonging to the parent Counterparty hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default belonging to Counterparty hierarchy subject to caller is entitled to edit Level defaults",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue": {
            "get": {
                "operationId": "getEntityCounterpartyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Level default values belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Level default values belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            },
            "post": {
                "description": "Creates a new  Level default value.\nLevel default value is a sub-entity of  Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue. This action requires the caller entitled to create Level default values",
                "operationId": "createEntityCounterpartyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Level default value",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Level default value for the parent Level default. The response body would contain the created Level default value",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Level default value belonging to Level default. This action requires the caller entitled to create Level default values",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}": {
            "delete": {
                "description": "Deletes a existing Level default value.\nLevel default value is a sub-entity of Level default. This action is subject to caller is entitled to delete Level default values",
                "operationId": "deleteEntitySpecificCounterpartyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Level default value belonging to the parent Level default"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Level default value belonging to Level default subject to caller is entitled to delete Level default values",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field. For possible fields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Sort by DefaultValue, ascending order": {
                                "description": "Sort by DefaultValue, ascending order",
                                "value": "DefaultValue:ASC"
                            },
                            "Sort by DefaultValue, descending order": {
                                "description": "Sort by DefaultValue, descending order",
                                "value": "DefaultValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LevelDefaultValue",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LevelDefaultValue",
                        "examples": {
                            "Filter by DefaultValue, in operator": {
                                "description": "Filter by DefaultValue, in operator",
                                "value": "DefaultValue,IN,A,B,C"
                            },
                            "Filter by DefaultValue, not in operator": {
                                "description": "Filter by DefaultValue, not in operator",
                                "value": "DefaultValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Level default values",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Level default value belonging to the parent Level default. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Level default value belonging to the parent Level default in json format. This action requires the caller entitled to view Level default values",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Level default value.\nLevel default value is a sub-entity of Level default The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Level.\n For possible entity Fields, refer to the schema section for LevelDefaultValue in json format, subject to caller is entitled to edit Level default values",
                "operationId": "updateEntitySpecificCounterpartyHierarchyLevelDefaultLevelDefaultValue",
                "parameters": [
                    {
                        "description": "Id of Level default value",
                        "in": "path",
                        "name": "DefaultValueId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Level default",
                        "in": "path",
                        "name": "LevelDefaultId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Level default value",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.LevelDefault.LevelDefaultValue"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Level default value belonging to the parent Level default. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Level default value belonging to Level default subject to caller is entitled to edit Level default values",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/LevelDefault/{LevelDefaultId}/DefaultValue/{DefaultValueId}"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/Levels": {
            "get": {
                "operationId": "getEntityCounterpartyHierarchyCounterpartyLevel",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyLevel",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyLevel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty level field. For possible fields, refer to the schema section for CounterpartyLevel",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparty levels belonging to the parent Counterparty hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparty levels belonging to the parent Counterparty hierarchy in json format. This action requires the caller entitled to view Counterparty levels",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/Levels"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty level.\nCounterparty level is a sub-entity of  Counterparty hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for CounterpartyLevel. This action requires the caller entitled to create Counterparty levels",
                "operationId": "createEntityCounterpartyHierarchyCounterpartyLevel",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty level",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty level for the parent Counterparty hierarchy. The response body would contain the created Counterparty level",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty level belonging to Counterparty hierarchy. This action requires the caller entitled to create Counterparty levels",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/Levels"
                ]
            }
        },
        "/CounterpartyHierarchy/{Id}/Levels/{LevelsId}": {
            "delete": {
                "description": "Deletes a existing Counterparty level.\nCounterparty level is a sub-entity of Counterparty hierarchy. This action is subject to caller is entitled to delete Counterparty levels",
                "operationId": "deleteEntitySpecificCounterpartyHierarchyCounterpartyLevel",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty level belonging to the parent Counterparty hierarchy"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty level belonging to Counterparty hierarchy subject to caller is entitled to delete Counterparty levels",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyHierarchyCounterpartyLevel",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty levels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyLevel",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty level fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyLevel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty level field. For possible fields, refer to the schema section for CounterpartyLevel",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty level belonging to the parent Counterparty hierarchy. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty level belonging to the parent Counterparty hierarchy in json format. This action requires the caller entitled to view Counterparty levels",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty level.\nCounterparty level is a sub-entity of Counterparty hierarchy The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for CounterpartyLevel in json format, subject to caller is entitled to edit Counterparty levels",
                "operationId": "updateEntitySpecificCounterpartyHierarchyCounterpartyLevel",
                "parameters": [
                    {
                        "description": "Id of Counterparty hierarchy",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Counterparty level",
                        "in": "path",
                        "name": "LevelsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty level",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyHierarchy.CounterpartyLevel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty level belonging to the parent Counterparty hierarchy. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty level belonging to Counterparty hierarchy subject to caller is entitled to edit Counterparty levels",
                "tags": [
                    "/CounterpartyHierarchy/{Id}/Levels/{LevelsId}"
                ]
            }
        },
        "/CounterpartyStatusCMD": {
            "get": {
                "operationId": "getEntityCounterpartyStatusCMD",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of CMD status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyStatusCMD",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyStatusCMD",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned CMD statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD status field. For possible fields, refer to the schema section for CounterpartyStatusCMD",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyStatusCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching CMD statuses. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching CMD statuses in json format. This action requires the caller entitled to view CMD statuses",
                "tags": [
                    "/CounterpartyStatusCMD"
                ]
            },
            "post": {
                "description": "Creates a new  CMD status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CounterpartyStatusCMD. This action requires the caller entitled to create CMD statuses",
                "operationId": "createEntityCounterpartyStatusCMD",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyStatusCMD"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the CMD status",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyStatusCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of CMD status. The response body would contain the created CMD status",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new CMD status. This action requires the caller entitled to create CMD statuses",
                "tags": [
                    "/CounterpartyStatusCMD"
                ]
            }
        },
        "/CounterpartyStatusCMD/{Id}": {
            "delete": {
                "description": "Deletes a existing CMD status.\n. This action is subject to caller is entitled to delete CMD statuses",
                "operationId": "deleteEntitySpecificCounterpartyStatusCMD",
                "parameters": [
                    {
                        "description": "Id of CMD status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific CMD status"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing CMD status subject to caller is entitled to delete CMD statuses",
                "tags": [
                    "/CounterpartyStatusCMD/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyStatusCMD",
                "parameters": [
                    {
                        "description": "Id of CMD status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of CMD status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyStatusCMD",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyStatusCMD",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned CMD statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD status field. For possible fields, refer to the schema section for CounterpartyStatusCMD",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyStatusCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific CMD status. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific CMD status in json format. This action requires the caller entitled to view CMD statuses",
                "tags": [
                    "/CounterpartyStatusCMD/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing CMD status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CounterpartyStatusCMD in json format, subject to caller is entitled to edit CMD statuses",
                "operationId": "updateEntitySpecificCounterpartyStatusCMD",
                "parameters": [
                    {
                        "description": "Id of CMD status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyStatusCMD"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified CMD status",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyStatusCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific CMD status. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing CMD status subject to caller is entitled to edit CMD statuses",
                "tags": [
                    "/CounterpartyStatusCMD/{Id}"
                ]
            }
        },
        "/CounterpartySubtype": {
            "get": {
                "operationId": "getEntityCounterpartySubtype",
                "parameters": [
                    {
                        "description": "Comma separated list of Counterparty subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartySubtype",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartySubtype",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty subtype field. For possible fields, refer to the schema section for CounterpartySubtype",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartySubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparty subtypes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparty subtypes in json format. This action requires the caller entitled to view Counterparty subtypes",
                "tags": [
                    "/CounterpartySubtype"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CounterpartySubtype. This action requires the caller entitled to create Counterparty subtypes",
                "operationId": "createEntityCounterpartySubtype",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartySubtype"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty subtype",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartySubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty subtype. The response body would contain the created Counterparty subtype",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty subtype. This action requires the caller entitled to create Counterparty subtypes",
                "tags": [
                    "/CounterpartySubtype"
                ]
            }
        },
        "/CounterpartySubtype/{Id}": {
            "delete": {
                "description": "Deletes a existing Counterparty subtype.\n. This action is subject to caller is entitled to delete Counterparty subtypes",
                "operationId": "deleteEntitySpecificCounterpartySubtype",
                "parameters": [
                    {
                        "description": "Id of Counterparty subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty subtype"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty subtype subject to caller is entitled to delete Counterparty subtypes",
                "tags": [
                    "/CounterpartySubtype/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartySubtype",
                "parameters": [
                    {
                        "description": "Id of Counterparty subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartySubtype",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartySubtype",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty subtype field. For possible fields, refer to the schema section for CounterpartySubtype",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartySubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty subtype. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty subtype in json format. This action requires the caller entitled to view Counterparty subtypes",
                "tags": [
                    "/CounterpartySubtype/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CounterpartySubtype in json format, subject to caller is entitled to edit Counterparty subtypes",
                "operationId": "updateEntitySpecificCounterpartySubtype",
                "parameters": [
                    {
                        "description": "Id of Counterparty subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartySubtype"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty subtype",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartySubtype"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty subtype. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty subtype subject to caller is entitled to edit Counterparty subtypes",
                "tags": [
                    "/CounterpartySubtype/{Id}"
                ]
            }
        },
        "/CounterpartyType": {
            "get": {
                "operationId": "getEntityCounterpartyType",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty type field. For possible fields, refer to the schema section for CounterpartyType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Counterparty types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Counterparty types in json format. This action requires the caller entitled to view Counterparty types",
                "tags": [
                    "/CounterpartyType"
                ]
            },
            "post": {
                "description": "Creates a new  Counterparty type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CounterpartyType. This action requires the caller entitled to create Counterparty types",
                "operationId": "createEntityCounterpartyType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Counterparty type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Counterparty type. The response body would contain the created Counterparty type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Counterparty type. This action requires the caller entitled to create Counterparty types",
                "tags": [
                    "/CounterpartyType"
                ]
            }
        },
        "/CounterpartyType/{Id}": {
            "delete": {
                "description": "Deletes a existing Counterparty type.\n. This action is subject to caller is entitled to delete Counterparty types",
                "operationId": "deleteEntitySpecificCounterpartyType",
                "parameters": [
                    {
                        "description": "Id of Counterparty type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Counterparty type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Counterparty type subject to caller is entitled to delete Counterparty types",
                "tags": [
                    "/CounterpartyType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyType",
                "parameters": [
                    {
                        "description": "Id of Counterparty type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Counterparty type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Counterparty types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty type field. For possible fields, refer to the schema section for CounterpartyType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Counterparty type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Counterparty type in json format. This action requires the caller entitled to view Counterparty types",
                "tags": [
                    "/CounterpartyType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Counterparty type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CounterpartyType in json format, subject to caller is entitled to edit Counterparty types",
                "operationId": "updateEntitySpecificCounterpartyType",
                "parameters": [
                    {
                        "description": "Id of Counterparty type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Counterparty type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Counterparty type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Counterparty type subject to caller is entitled to edit Counterparty types",
                "tags": [
                    "/CounterpartyType/{Id}"
                ]
            }
        },
        "/CounterpartyTypeCMD": {
            "get": {
                "operationId": "getEntityCounterpartyTypeCMD",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD type field. For possible fields, refer to the schema section for CounterpartyTypeCMD",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned CMD types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyTypeCMD",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of CMD type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyTypeCMD",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyTypeCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching CMD types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching CMD types in json format. This action requires the caller entitled to view CMD types",
                "tags": [
                    "/CounterpartyTypeCMD"
                ]
            },
            "post": {
                "description": "Creates a new  CMD type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for CounterpartyTypeCMD. This action requires the caller entitled to create CMD types",
                "operationId": "createEntityCounterpartyTypeCMD",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyTypeCMD"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the CMD type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyTypeCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of CMD type. The response body would contain the created CMD type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new CMD type. This action requires the caller entitled to create CMD types",
                "tags": [
                    "/CounterpartyTypeCMD"
                ]
            }
        },
        "/CounterpartyTypeCMD/{Id}": {
            "delete": {
                "description": "Deletes a existing CMD type.\n. This action is subject to caller is entitled to delete CMD types",
                "operationId": "deleteEntitySpecificCounterpartyTypeCMD",
                "parameters": [
                    {
                        "description": "Id of CMD type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific CMD type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing CMD type subject to caller is entitled to delete CMD types",
                "tags": [
                    "/CounterpartyTypeCMD/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCounterpartyTypeCMD",
                "parameters": [
                    {
                        "description": "Id of CMD type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD type field. For possible fields, refer to the schema section for CounterpartyTypeCMD",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned CMD types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CounterpartyTypeCMD",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of CMD type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CounterpartyTypeCMD",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyTypeCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific CMD type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific CMD type in json format. This action requires the caller entitled to view CMD types",
                "tags": [
                    "/CounterpartyTypeCMD/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing CMD type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for CounterpartyTypeCMD in json format, subject to caller is entitled to edit CMD types",
                "operationId": "updateEntitySpecificCounterpartyTypeCMD",
                "parameters": [
                    {
                        "description": "Id of CMD type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CounterpartyTypeCMD"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified CMD type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CounterpartyTypeCMD"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific CMD type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing CMD type subject to caller is entitled to edit CMD types",
                "tags": [
                    "/CounterpartyTypeCMD/{Id}"
                ]
            }
        },
        "/Country": {
            "get": {
                "operationId": "getEntityCountry",
                "parameters": [
                    {
                        "description": "Maximum number of returned Countries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Country",
                        "examples": {
                            "Filter by NumericCode, in operator": {
                                "description": "Filter by NumericCode, in operator",
                                "value": "NumericCode,IN,A,B,C"
                            },
                            "Filter by NumericCode, not in operator": {
                                "description": "Filter by NumericCode, not in operator",
                                "value": "NumericCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country field. For possible fields, refer to the schema section for Country",
                        "examples": {
                            "Sort by NumericCode, ascending order": {
                                "description": "Sort by NumericCode, ascending order",
                                "value": "NumericCode:ASC"
                            },
                            "Sort by NumericCode, descending order": {
                                "description": "Sort by NumericCode, descending order",
                                "value": "NumericCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Country fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Country",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Country"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Countries. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Countries in json format. This action requires the caller entitled to view Countries",
                "tags": [
                    "/Country"
                ]
            },
            "post": {
                "description": "Creates a new  Country.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Country. This action requires the caller entitled to create Countries",
                "operationId": "createEntityCountry",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Country"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Country",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Country"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Country. The response body would contain the created Country",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Country. This action requires the caller entitled to create Countries",
                "tags": [
                    "/Country"
                ]
            }
        },
        "/Country/{Id}": {
            "delete": {
                "description": "Deletes a existing Country.\n. This action is subject to caller is entitled to delete Countries",
                "operationId": "deleteEntitySpecificCountry",
                "parameters": [
                    {
                        "description": "Id of Country",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Country"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Country subject to caller is entitled to delete Countries",
                "tags": [
                    "/Country/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCountry",
                "parameters": [
                    {
                        "description": "Id of Country",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Countries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Country",
                        "examples": {
                            "Filter by NumericCode, in operator": {
                                "description": "Filter by NumericCode, in operator",
                                "value": "NumericCode,IN,A,B,C"
                            },
                            "Filter by NumericCode, not in operator": {
                                "description": "Filter by NumericCode, not in operator",
                                "value": "NumericCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country field. For possible fields, refer to the schema section for Country",
                        "examples": {
                            "Sort by NumericCode, ascending order": {
                                "description": "Sort by NumericCode, ascending order",
                                "value": "NumericCode:ASC"
                            },
                            "Sort by NumericCode, descending order": {
                                "description": "Sort by NumericCode, descending order",
                                "value": "NumericCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Country fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Country",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Country"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Country. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Country in json format. This action requires the caller entitled to view Countries",
                "tags": [
                    "/Country/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Country.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Country in json format, subject to caller is entitled to edit Countries",
                "operationId": "updateEntitySpecificCountry",
                "parameters": [
                    {
                        "description": "Id of Country",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Country"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Country",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Country"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Country. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Country subject to caller is entitled to edit Countries",
                "tags": [
                    "/Country/{Id}"
                ]
            }
        },
        "/Currency": {
            "get": {
                "operationId": "getEntityCurrency",
                "parameters": [
                    {
                        "description": "Comma separated list of Currency fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Currency",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Currency field. For possible fields, refer to the schema section for Currency",
                        "examples": {
                            "Sort by Symbol, ascending order": {
                                "description": "Sort by Symbol, ascending order",
                                "value": "Symbol:ASC"
                            },
                            "Sort by Symbol, descending order": {
                                "description": "Sort by Symbol, descending order",
                                "value": "Symbol:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Currency field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Currency",
                        "examples": {
                            "Filter by Symbol, in operator": {
                                "description": "Filter by Symbol, in operator",
                                "value": "Symbol,IN,A,B,C"
                            },
                            "Filter by Symbol, not in operator": {
                                "description": "Filter by Symbol, not in operator",
                                "value": "Symbol,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Currencies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Currency"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Currencies. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Currencies in json format. This action requires the caller entitled to view Currencies",
                "tags": [
                    "/Currency"
                ]
            },
            "post": {
                "description": "Creates a new  Currency.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Currency. This action requires the caller entitled to create Currencies",
                "operationId": "createEntityCurrency",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Currency"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Currency",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Currency"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Currency. The response body would contain the created Currency",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Currency. This action requires the caller entitled to create Currencies",
                "tags": [
                    "/Currency"
                ]
            }
        },
        "/Currency/{Id}": {
            "delete": {
                "description": "Deletes a existing Currency.\n. This action is subject to caller is entitled to delete Currencies",
                "operationId": "deleteEntitySpecificCurrency",
                "parameters": [
                    {
                        "description": "Id of Currency",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Currency"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Currency subject to caller is entitled to delete Currencies",
                "tags": [
                    "/Currency/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCurrency",
                "parameters": [
                    {
                        "description": "Id of Currency",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Currency fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Currency",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Currency field. For possible fields, refer to the schema section for Currency",
                        "examples": {
                            "Sort by Symbol, ascending order": {
                                "description": "Sort by Symbol, ascending order",
                                "value": "Symbol:ASC"
                            },
                            "Sort by Symbol, descending order": {
                                "description": "Sort by Symbol, descending order",
                                "value": "Symbol:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Currency field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Currency",
                        "examples": {
                            "Filter by Symbol, in operator": {
                                "description": "Filter by Symbol, in operator",
                                "value": "Symbol,IN,A,B,C"
                            },
                            "Filter by Symbol, not in operator": {
                                "description": "Filter by Symbol, not in operator",
                                "value": "Symbol,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Currencies",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Currency"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Currency. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Currency in json format. This action requires the caller entitled to view Currencies",
                "tags": [
                    "/Currency/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Currency.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Currency in json format, subject to caller is entitled to edit Currencies",
                "operationId": "updateEntitySpecificCurrency",
                "parameters": [
                    {
                        "description": "Id of Currency",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Currency"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Currency",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Currency"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Currency. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Currency subject to caller is entitled to edit Currencies",
                "tags": [
                    "/Currency/{Id}"
                ]
            }
        },
        "/CustomField": {
            "get": {
                "operationId": "getEntityCustomField",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Custom field fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CustomField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Custom fields",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Custom field field. For possible fields, refer to the schema section for CustomField",
                        "examples": {
                            "Sort by ValidationFailureMessage, ascending order": {
                                "description": "Sort by ValidationFailureMessage, ascending order",
                                "value": "ValidationFailureMessage:ASC"
                            },
                            "Sort by ValidationFailureMessage, descending order": {
                                "description": "Sort by ValidationFailureMessage, descending order",
                                "value": "ValidationFailureMessage:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Custom field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CustomField",
                        "examples": {
                            "Filter by ValidationFailureMessage, in operator": {
                                "description": "Filter by ValidationFailureMessage, in operator",
                                "value": "ValidationFailureMessage,IN,A,B,C"
                            },
                            "Filter by ValidationFailureMessage, not in operator": {
                                "description": "Filter by ValidationFailureMessage, not in operator",
                                "value": "ValidationFailureMessage,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Custom fields. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Custom fields in json format. This action requires the caller entitled to view Custom fields",
                "tags": [
                    "/CustomField"
                ]
            },
            "post": {
                "description": "Creates a new  Custom field.\nFields required for creation are Type,Identifier,EntityClass.\n For possible entity Fields, refer to the schema section for CustomField. This action requires the caller entitled to create Custom fields",
                "operationId": "createEntityCustomField",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Custom field",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Custom field. The response body would contain the created Custom field",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Custom field. This action requires the caller entitled to create Custom fields",
                "tags": [
                    "/CustomField"
                ]
            }
        },
        "/CustomField/{Id}": {
            "delete": {
                "description": "Deletes a existing Custom field.\n. This action is subject to caller is entitled to delete Custom fields",
                "operationId": "deleteEntitySpecificCustomField",
                "parameters": [
                    {
                        "description": "Id of Custom field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Custom field"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Custom field subject to caller is entitled to delete Custom fields",
                "tags": [
                    "/CustomField/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificCustomField",
                "parameters": [
                    {
                        "description": "Id of Custom field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Custom field fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for CustomField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Custom fields",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Custom field field. For possible fields, refer to the schema section for CustomField",
                        "examples": {
                            "Sort by ValidationFailureMessage, ascending order": {
                                "description": "Sort by ValidationFailureMessage, ascending order",
                                "value": "ValidationFailureMessage:ASC"
                            },
                            "Sort by ValidationFailureMessage, descending order": {
                                "description": "Sort by ValidationFailureMessage, descending order",
                                "value": "ValidationFailureMessage:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Custom field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for CustomField",
                        "examples": {
                            "Filter by ValidationFailureMessage, in operator": {
                                "description": "Filter by ValidationFailureMessage, in operator",
                                "value": "ValidationFailureMessage,IN,A,B,C"
                            },
                            "Filter by ValidationFailureMessage, not in operator": {
                                "description": "Filter by ValidationFailureMessage, not in operator",
                                "value": "ValidationFailureMessage,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Custom field. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Custom field in json format. This action requires the caller entitled to view Custom fields",
                "tags": [
                    "/CustomField/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Custom field.\nFields required to be passed while editing are Type,Identifier,EntityClass.\n For possible entity Fields, refer to the schema section for CustomField in json format, subject to caller is entitled to edit Custom fields",
                "operationId": "updateEntitySpecificCustomField",
                "parameters": [
                    {
                        "description": "Id of Custom field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Custom field",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Custom field. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Custom field subject to caller is entitled to edit Custom fields",
                "tags": [
                    "/CustomField/{Id}"
                ]
            }
        },
        "/DealogicIndustry": {
            "get": {
                "operationId": "getEntityDealogicIndustry",
                "parameters": [
                    {
                        "description": "Comma separated list of Dealogic industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DealogicIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Dealogic industry field. For possible fields, refer to the schema section for DealogicIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Dealogic industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DealogicIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Dealogic industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DealogicIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Dealogic industries. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Dealogic industries in json format. This action requires the caller entitled to view Dealogic industries",
                "tags": [
                    "/DealogicIndustry"
                ]
            },
            "post": {
                "description": "Creates a new  Dealogic industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for DealogicIndustry. This action requires the caller entitled to create Dealogic industries",
                "operationId": "createEntityDealogicIndustry",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DealogicIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Dealogic industry",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DealogicIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Dealogic industry. The response body would contain the created Dealogic industry",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Dealogic industry. This action requires the caller entitled to create Dealogic industries",
                "tags": [
                    "/DealogicIndustry"
                ]
            }
        },
        "/DealogicIndustry/{Id}": {
            "delete": {
                "description": "Deletes a existing Dealogic industry.\n. This action is subject to caller is entitled to delete Dealogic industries",
                "operationId": "deleteEntitySpecificDealogicIndustry",
                "parameters": [
                    {
                        "description": "Id of Dealogic industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Dealogic industry"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Dealogic industry subject to caller is entitled to delete Dealogic industries",
                "tags": [
                    "/DealogicIndustry/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificDealogicIndustry",
                "parameters": [
                    {
                        "description": "Id of Dealogic industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Dealogic industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DealogicIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Dealogic industry field. For possible fields, refer to the schema section for DealogicIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Dealogic industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DealogicIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Dealogic industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DealogicIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Dealogic industry. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Dealogic industry in json format. This action requires the caller entitled to view Dealogic industries",
                "tags": [
                    "/DealogicIndustry/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Dealogic industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for DealogicIndustry in json format, subject to caller is entitled to edit Dealogic industries",
                "operationId": "updateEntitySpecificDealogicIndustry",
                "parameters": [
                    {
                        "description": "Id of Dealogic industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DealogicIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Dealogic industry",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DealogicIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Dealogic industry. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Dealogic industry subject to caller is entitled to edit Dealogic industries",
                "tags": [
                    "/DealogicIndustry/{Id}"
                ]
            }
        },
        "/DepositoryCodeFormat": {
            "get": {
                "operationId": "getEntityDepositoryCodeFormat",
                "parameters": [
                    {
                        "description": "Comma separated list of Depository code format fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCodeFormat",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCodeFormat",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Depository code formats",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code format field. For possible fields, refer to the schema section for DepositoryCodeFormat",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DepositoryCodeFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Depository code formats. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Depository code formats in json format. This action requires the caller entitled to view Depository code formats",
                "tags": [
                    "/DepositoryCodeFormat"
                ]
            },
            "post": {
                "description": "Creates a new  Depository code format.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for DepositoryCodeFormat. This action requires the caller entitled to create Depository code formats",
                "operationId": "createEntityDepositoryCodeFormat",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepositoryCodeFormat"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Depository code format",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DepositoryCodeFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Depository code format. The response body would contain the created Depository code format",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Depository code format. This action requires the caller entitled to create Depository code formats",
                "tags": [
                    "/DepositoryCodeFormat"
                ]
            }
        },
        "/DepositoryCodeFormat/{Id}": {
            "delete": {
                "description": "Deletes a existing Depository code format.\n. This action is subject to caller is entitled to delete Depository code formats",
                "operationId": "deleteEntitySpecificDepositoryCodeFormat",
                "parameters": [
                    {
                        "description": "Id of Depository code format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Depository code format"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Depository code format subject to caller is entitled to delete Depository code formats",
                "tags": [
                    "/DepositoryCodeFormat/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificDepositoryCodeFormat",
                "parameters": [
                    {
                        "description": "Id of Depository code format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Depository code format fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCodeFormat",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCodeFormat",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Depository code formats",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code format field. For possible fields, refer to the schema section for DepositoryCodeFormat",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DepositoryCodeFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Depository code format. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Depository code format in json format. This action requires the caller entitled to view Depository code formats",
                "tags": [
                    "/DepositoryCodeFormat/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Depository code format.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for DepositoryCodeFormat in json format, subject to caller is entitled to edit Depository code formats",
                "operationId": "updateEntitySpecificDepositoryCodeFormat",
                "parameters": [
                    {
                        "description": "Id of Depository code format",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DepositoryCodeFormat"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Depository code format",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DepositoryCodeFormat"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Depository code format. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Depository code format subject to caller is entitled to edit Depository code formats",
                "tags": [
                    "/DepositoryCodeFormat/{Id}"
                ]
            }
        },
        "/EconomicArea": {
            "get": {
                "operationId": "getEntityEconomicArea",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Economic area field. For possible fields, refer to the schema section for EconomicArea",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Economic area fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EconomicArea",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Economic areas",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Economic area field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EconomicArea",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EconomicArea"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Economic areas. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Economic areas in json format. This action requires the caller entitled to view Economic areas",
                "tags": [
                    "/EconomicArea"
                ]
            },
            "post": {
                "description": "Creates a new  Economic area.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for EconomicArea. This action requires the caller entitled to create Economic areas",
                "operationId": "createEntityEconomicArea",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EconomicArea"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Economic area",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EconomicArea"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Economic area. The response body would contain the created Economic area",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Economic area. This action requires the caller entitled to create Economic areas",
                "tags": [
                    "/EconomicArea"
                ]
            }
        },
        "/EconomicArea/{Id}": {
            "delete": {
                "description": "Deletes a existing Economic area.\n. This action is subject to caller is entitled to delete Economic areas",
                "operationId": "deleteEntitySpecificEconomicArea",
                "parameters": [
                    {
                        "description": "Id of Economic area",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Economic area"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Economic area subject to caller is entitled to delete Economic areas",
                "tags": [
                    "/EconomicArea/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificEconomicArea",
                "parameters": [
                    {
                        "description": "Id of Economic area",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Economic area field. For possible fields, refer to the schema section for EconomicArea",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Economic area fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EconomicArea",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Economic areas",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Economic area field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EconomicArea",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EconomicArea"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Economic area. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Economic area in json format. This action requires the caller entitled to view Economic areas",
                "tags": [
                    "/EconomicArea/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Economic area.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for EconomicArea in json format, subject to caller is entitled to edit Economic areas",
                "operationId": "updateEntitySpecificEconomicArea",
                "parameters": [
                    {
                        "description": "Id of Economic area",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EconomicArea"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Economic area",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EconomicArea"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Economic area. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Economic area subject to caller is entitled to edit Economic areas",
                "tags": [
                    "/EconomicArea/{Id}"
                ]
            }
        },
        "/EntityConfig": {
            "get": {
                "operationId": "getEntityEntityConfig",
                "parameters": [
                    {
                        "description": "Comma separated list of Entity config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EntityConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Entity config field. For possible fields, refer to the schema section for EntityConfig",
                        "examples": {
                            "Sort by NumberOfFields, ascending order": {
                                "description": "Sort by NumberOfFields, ascending order",
                                "value": "NumberOfFields:ASC"
                            },
                            "Sort by NumberOfFields, descending order": {
                                "description": "Sort by NumberOfFields, descending order",
                                "value": "NumberOfFields:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Entity configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Entity config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EntityConfig",
                        "examples": {
                            "Filter by NumberOfFields, in operator": {
                                "description": "Filter by NumberOfFields, in operator",
                                "value": "NumberOfFields,IN,A,B,C"
                            },
                            "Filter by NumberOfFields, not in operator": {
                                "description": "Filter by NumberOfFields, not in operator",
                                "value": "NumberOfFields,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Entity configs. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Entity configs in json format. This action requires the caller entitled to view Entity configs",
                "tags": [
                    "/EntityConfig"
                ]
            },
            "post": {
                "description": "Creates a new  Entity config.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is EntityClass.\n For possible entity Fields, refer to the schema section for EntityConfig. This action requires the caller entitled to create Entity configs",
                "operationId": "createEntityEntityConfig",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Entity config. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Entity config. The response body would contain the created Entity config",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Entity config. This action requires the caller entitled to create Entity configs",
                "tags": [
                    "/EntityConfig"
                ]
            }
        },
        "/EntityConfig/{Id}": {
            "delete": {
                "description": "Deletes a existing Entity config.\n. This action is subject to caller is entitled to delete Entity configs",
                "operationId": "deleteEntitySpecificEntityConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Entity config"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Entity config subject to caller is entitled to delete Entity configs",
                "tags": [
                    "/EntityConfig/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificEntityConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Entity config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EntityConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Entity config field. For possible fields, refer to the schema section for EntityConfig",
                        "examples": {
                            "Sort by NumberOfFields, ascending order": {
                                "description": "Sort by NumberOfFields, ascending order",
                                "value": "NumberOfFields:ASC"
                            },
                            "Sort by NumberOfFields, descending order": {
                                "description": "Sort by NumberOfFields, descending order",
                                "value": "NumberOfFields:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Entity configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Entity config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EntityConfig",
                        "examples": {
                            "Filter by NumberOfFields, in operator": {
                                "description": "Filter by NumberOfFields, in operator",
                                "value": "NumberOfFields,IN,A,B,C"
                            },
                            "Filter by NumberOfFields, not in operator": {
                                "description": "Filter by NumberOfFields, not in operator",
                                "value": "NumberOfFields,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Entity config. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Entity config in json format. This action requires the caller entitled to view Entity configs",
                "tags": [
                    "/EntityConfig/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Entity config.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is EntityClass.\n For possible entity Fields, refer to the schema section for EntityConfig in json format, subject to caller is entitled to edit Entity configs",
                "operationId": "updateEntitySpecificEntityConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Entity config. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Entity config. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Entity config subject to caller is entitled to edit Entity configs",
                "tags": [
                    "/EntityConfig/{Id}"
                ]
            }
        },
        "/EntityConfig/{Id}/FeedConfigs": {
            "get": {
                "operationId": "getEntityEntityConfigFeedConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FeedConfig",
                        "examples": {
                            "Filter by TriggerValue, in operator": {
                                "description": "Filter by TriggerValue, in operator",
                                "value": "TriggerValue,IN,A,B,C"
                            },
                            "Filter by TriggerValue, not in operator": {
                                "description": "Filter by TriggerValue, not in operator",
                                "value": "TriggerValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Feed config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FeedConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed config field. For possible fields, refer to the schema section for FeedConfig",
                        "examples": {
                            "Sort by TriggerValue, ascending order": {
                                "description": "Sort by TriggerValue, ascending order",
                                "value": "TriggerValue:ASC"
                            },
                            "Sort by TriggerValue, descending order": {
                                "description": "Sort by TriggerValue, descending order",
                                "value": "TriggerValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Feed configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Feed configs belonging to the parent Entity config. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Feed configs belonging to the parent Entity config in json format. This action requires the caller entitled to view Feed configs",
                "tags": [
                    "/EntityConfig/{Id}/FeedConfigs"
                ]
            },
            "post": {
                "description": "Creates a new  Feed config.\nFeed config is a sub-entity of  Entity config The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Feed.\n For possible entity Fields, refer to the schema section for FeedConfig. This action requires the caller entitled to create Feed configs",
                "operationId": "createEntityEntityConfigFeedConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Feed config",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Feed config for the parent Entity config. The response body would contain the created Feed config",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Feed config belonging to Entity config. This action requires the caller entitled to create Feed configs",
                "tags": [
                    "/EntityConfig/{Id}/FeedConfigs"
                ]
            }
        },
        "/EntityConfig/{Id}/FeedConfigs/{FeedConfigsId}": {
            "delete": {
                "description": "Deletes a existing Feed config.\nFeed config is a sub-entity of Entity config. This action is subject to caller is entitled to delete Feed configs",
                "operationId": "deleteEntitySpecificEntityConfigFeedConfig",
                "parameters": [
                    {
                        "description": "Id of Feed config",
                        "in": "path",
                        "name": "FeedConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Feed config belonging to the parent Entity config"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Feed config belonging to Entity config subject to caller is entitled to delete Feed configs",
                "tags": [
                    "/EntityConfig/{Id}/FeedConfigs/{FeedConfigsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificEntityConfigFeedConfig",
                "parameters": [
                    {
                        "description": "Id of Feed config",
                        "in": "path",
                        "name": "FeedConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FeedConfig",
                        "examples": {
                            "Filter by TriggerValue, in operator": {
                                "description": "Filter by TriggerValue, in operator",
                                "value": "TriggerValue,IN,A,B,C"
                            },
                            "Filter by TriggerValue, not in operator": {
                                "description": "Filter by TriggerValue, not in operator",
                                "value": "TriggerValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Feed config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FeedConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed config field. For possible fields, refer to the schema section for FeedConfig",
                        "examples": {
                            "Sort by TriggerValue, ascending order": {
                                "description": "Sort by TriggerValue, ascending order",
                                "value": "TriggerValue:ASC"
                            },
                            "Sort by TriggerValue, descending order": {
                                "description": "Sort by TriggerValue, descending order",
                                "value": "TriggerValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Feed configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Feed config belonging to the parent Entity config. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Feed config belonging to the parent Entity config in json format. This action requires the caller entitled to view Feed configs",
                "tags": [
                    "/EntityConfig/{Id}/FeedConfigs/{FeedConfigsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Feed config.\nFeed config is a sub-entity of Entity config The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Feed.\n For possible entity Fields, refer to the schema section for FeedConfig in json format, subject to caller is entitled to edit Feed configs",
                "operationId": "updateEntitySpecificEntityConfigFeedConfig",
                "parameters": [
                    {
                        "description": "Id of Feed config",
                        "in": "path",
                        "name": "FeedConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Feed config",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FeedConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Feed config belonging to the parent Entity config. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Feed config belonging to Entity config subject to caller is entitled to edit Feed configs",
                "tags": [
                    "/EntityConfig/{Id}/FeedConfigs/{FeedConfigsId}"
                ]
            }
        },
        "/EntityConfig/{Id}/FieldConfigs": {
            "get": {
                "operationId": "getEntityEntityConfigFieldConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Field config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FieldConfig",
                        "examples": {
                            "Filter by ReferenceFieldId, in operator": {
                                "description": "Filter by ReferenceFieldId, in operator",
                                "value": "ReferenceFieldId,IN,A,B,C"
                            },
                            "Filter by ReferenceFieldId, not in operator": {
                                "description": "Filter by ReferenceFieldId, not in operator",
                                "value": "ReferenceFieldId,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Field config field. For possible fields, refer to the schema section for FieldConfig",
                        "examples": {
                            "Sort by ReferenceFieldId, ascending order": {
                                "description": "Sort by ReferenceFieldId, ascending order",
                                "value": "ReferenceFieldId:ASC"
                            },
                            "Sort by ReferenceFieldId, descending order": {
                                "description": "Sort by ReferenceFieldId, descending order",
                                "value": "ReferenceFieldId:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Field configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Field config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FieldConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Field configs belonging to the parent Entity config. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Field configs belonging to the parent Entity config in json format. This action requires the caller entitled to view Field configs",
                "tags": [
                    "/EntityConfig/{Id}/FieldConfigs"
                ]
            },
            "post": {
                "description": "Creates a new  Field config.\nField config is a sub-entity of  Entity config The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are RDXFieldName,Feed.\n For possible entity Fields, refer to the schema section for FieldConfig. This action requires the caller entitled to create Field configs",
                "operationId": "createEntityEntityConfigFieldConfig",
                "parameters": [
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Field config",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Field config for the parent Entity config. The response body would contain the created Field config",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Field config belonging to Entity config. This action requires the caller entitled to create Field configs",
                "tags": [
                    "/EntityConfig/{Id}/FieldConfigs"
                ]
            }
        },
        "/EntityConfig/{Id}/FieldConfigs/{FieldConfigsId}": {
            "delete": {
                "description": "Deletes a existing Field config.\nField config is a sub-entity of Entity config. This action is subject to caller is entitled to delete Field configs",
                "operationId": "deleteEntitySpecificEntityConfigFieldConfig",
                "parameters": [
                    {
                        "description": "Id of Field config",
                        "in": "path",
                        "name": "FieldConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Field config belonging to the parent Entity config"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Field config belonging to Entity config subject to caller is entitled to delete Field configs",
                "tags": [
                    "/EntityConfig/{Id}/FieldConfigs/{FieldConfigsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificEntityConfigFieldConfig",
                "parameters": [
                    {
                        "description": "Id of Field config",
                        "in": "path",
                        "name": "FieldConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Field config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FieldConfig",
                        "examples": {
                            "Filter by ReferenceFieldId, in operator": {
                                "description": "Filter by ReferenceFieldId, in operator",
                                "value": "ReferenceFieldId,IN,A,B,C"
                            },
                            "Filter by ReferenceFieldId, not in operator": {
                                "description": "Filter by ReferenceFieldId, not in operator",
                                "value": "ReferenceFieldId,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Field config field. For possible fields, refer to the schema section for FieldConfig",
                        "examples": {
                            "Sort by ReferenceFieldId, ascending order": {
                                "description": "Sort by ReferenceFieldId, ascending order",
                                "value": "ReferenceFieldId:ASC"
                            },
                            "Sort by ReferenceFieldId, descending order": {
                                "description": "Sort by ReferenceFieldId, descending order",
                                "value": "ReferenceFieldId:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Field configs",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Field config fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FieldConfig",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Field config belonging to the parent Entity config. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Field config belonging to the parent Entity config in json format. This action requires the caller entitled to view Field configs",
                "tags": [
                    "/EntityConfig/{Id}/FieldConfigs/{FieldConfigsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Field config.\nField config is a sub-entity of Entity config The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are RDXFieldName,Feed.\n For possible entity Fields, refer to the schema section for FieldConfig in json format, subject to caller is entitled to edit Field configs",
                "operationId": "updateEntitySpecificEntityConfigFieldConfig",
                "parameters": [
                    {
                        "description": "Id of Field config",
                        "in": "path",
                        "name": "FieldConfigsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Entity config",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Field config",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EntityConfig.FieldConfig"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Field config belonging to the parent Entity config. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Field config belonging to Entity config subject to caller is entitled to edit Field configs",
                "tags": [
                    "/EntityConfig/{Id}/FieldConfigs/{FieldConfigsId}"
                ]
            }
        },
        "/EventDate": {
            "get": {
                "operationId": "getEntityEventDate",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Event date fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EventDate",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Event date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EventDate",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Event date field. For possible fields, refer to the schema section for EventDate",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Event dates",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EventDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Event dates. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Event dates in json format. This action requires the caller entitled to view Event dates",
                "tags": [
                    "/EventDate"
                ]
            },
            "post": {
                "description": "Creates a new  Event date.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Group,Type,Name.\n For possible entity Fields, refer to the schema section for EventDate. This action requires the caller entitled to create Event dates",
                "operationId": "createEntityEventDate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventDate"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Event date",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EventDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Event date. The response body would contain the created Event date",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Event date. This action requires the caller entitled to create Event dates",
                "tags": [
                    "/EventDate"
                ]
            }
        },
        "/EventDate/{Id}": {
            "delete": {
                "description": "Deletes a existing Event date.\n. This action is subject to caller is entitled to delete Event dates",
                "operationId": "deleteEntitySpecificEventDate",
                "parameters": [
                    {
                        "description": "Id of Event date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Event date"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Event date subject to caller is entitled to delete Event dates",
                "tags": [
                    "/EventDate/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificEventDate",
                "parameters": [
                    {
                        "description": "Id of Event date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Event date fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for EventDate",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Event date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for EventDate",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Event date field. For possible fields, refer to the schema section for EventDate",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Event dates",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EventDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Event date. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Event date in json format. This action requires the caller entitled to view Event dates",
                "tags": [
                    "/EventDate/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Event date.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Group,Type,Name.\n For possible entity Fields, refer to the schema section for EventDate in json format, subject to caller is entitled to edit Event dates",
                "operationId": "updateEntitySpecificEventDate",
                "parameters": [
                    {
                        "description": "Id of Event date",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventDate"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Event date",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EventDate"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Event date. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Event date subject to caller is entitled to edit Event dates",
                "tags": [
                    "/EventDate/{Id}"
                ]
            }
        },
        "/Exchange": {
            "get": {
                "operationId": "getEntityExchange",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Exchange fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Exchange",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Exchange field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Exchange",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Exchanges",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Exchange field. For possible fields, refer to the schema section for Exchange",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Exchange"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Exchanges. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Exchanges in json format. This action requires the caller entitled to view Exchanges",
                "tags": [
                    "/Exchange"
                ]
            },
            "post": {
                "description": "Creates a new  Exchange.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Exchange. This action requires the caller entitled to create Exchanges",
                "operationId": "createEntityExchange",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Exchange"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Exchange",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Exchange"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Exchange. The response body would contain the created Exchange",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Exchange. This action requires the caller entitled to create Exchanges",
                "tags": [
                    "/Exchange"
                ]
            }
        },
        "/Exchange/{Id}": {
            "delete": {
                "description": "Deletes a existing Exchange.\n. This action is subject to caller is entitled to delete Exchanges",
                "operationId": "deleteEntitySpecificExchange",
                "parameters": [
                    {
                        "description": "Id of Exchange",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Exchange"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Exchange subject to caller is entitled to delete Exchanges",
                "tags": [
                    "/Exchange/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificExchange",
                "parameters": [
                    {
                        "description": "Id of Exchange",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Exchange fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Exchange",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Exchange field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Exchange",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Exchanges",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Exchange field. For possible fields, refer to the schema section for Exchange",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Exchange"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Exchange. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Exchange in json format. This action requires the caller entitled to view Exchanges",
                "tags": [
                    "/Exchange/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Exchange.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Exchange in json format, subject to caller is entitled to edit Exchanges",
                "operationId": "updateEntitySpecificExchange",
                "parameters": [
                    {
                        "description": "Id of Exchange",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Exchange"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Exchange",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Exchange"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Exchange. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Exchange subject to caller is entitled to edit Exchanges",
                "tags": [
                    "/Exchange/{Id}"
                ]
            }
        },
        "/Feed": {
            "get": {
                "operationId": "getEntityFeed",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Feed",
                        "examples": {
                            "Filter by TriggerValue, in operator": {
                                "description": "Filter by TriggerValue, in operator",
                                "value": "TriggerValue,IN,A,B,C"
                            },
                            "Filter by TriggerValue, not in operator": {
                                "description": "Filter by TriggerValue, not in operator",
                                "value": "TriggerValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Feed fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Feed",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed field. For possible fields, refer to the schema section for Feed",
                        "examples": {
                            "Sort by TriggerValue, ascending order": {
                                "description": "Sort by TriggerValue, ascending order",
                                "value": "TriggerValue:ASC"
                            },
                            "Sort by TriggerValue, descending order": {
                                "description": "Sort by TriggerValue, descending order",
                                "value": "TriggerValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Feeds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feed"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Feeds. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Feeds in json format. This action requires the caller entitled to view Feeds",
                "tags": [
                    "/Feed"
                ]
            },
            "post": {
                "description": "Creates a new  Feed.\nFields required for creation are FeedType,Name.\n For possible entity Fields, refer to the schema section for Feed. This action requires the caller entitled to create Feeds",
                "operationId": "createEntityFeed",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Feed"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Feed",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feed"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Feed. The response body would contain the created Feed",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Feed. This action requires the caller entitled to create Feeds",
                "tags": [
                    "/Feed"
                ]
            }
        },
        "/Feed/{Id}": {
            "delete": {
                "description": "Deletes a existing Feed.\n. This action is subject to caller is entitled to delete Feeds",
                "operationId": "deleteEntitySpecificFeed",
                "parameters": [
                    {
                        "description": "Id of Feed",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Feed"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Feed subject to caller is entitled to delete Feeds",
                "tags": [
                    "/Feed/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificFeed",
                "parameters": [
                    {
                        "description": "Id of Feed",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Feed",
                        "examples": {
                            "Filter by TriggerValue, in operator": {
                                "description": "Filter by TriggerValue, in operator",
                                "value": "TriggerValue,IN,A,B,C"
                            },
                            "Filter by TriggerValue, not in operator": {
                                "description": "Filter by TriggerValue, not in operator",
                                "value": "TriggerValue,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Feed fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Feed",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed field. For possible fields, refer to the schema section for Feed",
                        "examples": {
                            "Sort by TriggerValue, ascending order": {
                                "description": "Sort by TriggerValue, ascending order",
                                "value": "TriggerValue:ASC"
                            },
                            "Sort by TriggerValue, descending order": {
                                "description": "Sort by TriggerValue, descending order",
                                "value": "TriggerValue:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Feeds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feed"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Feed. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Feed in json format. This action requires the caller entitled to view Feeds",
                "tags": [
                    "/Feed/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Feed.\nFields required to be passed while editing are FeedType,Name.\n For possible entity Fields, refer to the schema section for Feed in json format, subject to caller is entitled to edit Feeds",
                "operationId": "updateEntitySpecificFeed",
                "parameters": [
                    {
                        "description": "Id of Feed",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Feed"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Feed",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feed"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Feed. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Feed subject to caller is entitled to edit Feeds",
                "tags": [
                    "/Feed/{Id}"
                ]
            }
        },
        "/FreightCharge": {
            "get": {
                "operationId": "getEntityFreightCharge",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Charge field. For possible fields, refer to the schema section for FreightCharge",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Charge field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightCharge",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Charge fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightCharge",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Charges",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightCharge"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Charges. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Charges in json format. This action requires the caller entitled to view Charges",
                "tags": [
                    "/FreightCharge"
                ]
            },
            "post": {
                "description": "Creates a new  Charge.\nFields required for creation are VoyageTypes,Unit,AccountType,Code,Name.\n For possible entity Fields, refer to the schema section for FreightCharge. This action requires the caller entitled to create Charges",
                "operationId": "createEntityFreightCharge",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightCharge"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Charge",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightCharge"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Charge. The response body would contain the created Charge",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Charge. This action requires the caller entitled to create Charges",
                "tags": [
                    "/FreightCharge"
                ]
            }
        },
        "/FreightCharge/{Id}": {
            "delete": {
                "description": "Deletes a existing Charge.\n. This action is subject to caller is entitled to delete Charges",
                "operationId": "deleteEntitySpecificFreightCharge",
                "parameters": [
                    {
                        "description": "Id of Charge",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Charge"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Charge subject to caller is entitled to delete Charges",
                "tags": [
                    "/FreightCharge/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificFreightCharge",
                "parameters": [
                    {
                        "description": "Id of Charge",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Charge field. For possible fields, refer to the schema section for FreightCharge",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Charge field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightCharge",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Charge fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightCharge",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Charges",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightCharge"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Charge. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Charge in json format. This action requires the caller entitled to view Charges",
                "tags": [
                    "/FreightCharge/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Charge.\nFields required to be passed while editing are VoyageTypes,Unit,AccountType,Code,Name.\n For possible entity Fields, refer to the schema section for FreightCharge in json format, subject to caller is entitled to edit Charges",
                "operationId": "updateEntitySpecificFreightCharge",
                "parameters": [
                    {
                        "description": "Id of Charge",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightCharge"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Charge",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightCharge"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Charge. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Charge subject to caller is entitled to edit Charges",
                "tags": [
                    "/FreightCharge/{Id}"
                ]
            }
        },
        "/FreightIndex": {
            "get": {
                "operationId": "getEntityFreightIndex",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight index field. For possible fields, refer to the schema section for FreightIndex",
                        "examples": {
                            "Sort by TradingPlace, ascending order": {
                                "description": "Sort by TradingPlace, ascending order",
                                "value": "TradingPlace:ASC"
                            },
                            "Sort by TradingPlace, descending order": {
                                "description": "Sort by TradingPlace, descending order",
                                "value": "TradingPlace:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight index field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightIndex",
                        "examples": {
                            "Filter by TradingPlace, in operator": {
                                "description": "Filter by TradingPlace, in operator",
                                "value": "TradingPlace,IN,A,B,C"
                            },
                            "Filter by TradingPlace, not in operator": {
                                "description": "Filter by TradingPlace, not in operator",
                                "value": "TradingPlace,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Freight indexes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Freight index fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightIndex",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightIndex"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Freight indexes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Freight indexes in json format. This action requires the caller entitled to view Freight indexes",
                "tags": [
                    "/FreightIndex"
                ]
            },
            "post": {
                "description": "Creates a new  Freight index.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are RateCurrency,Name.\n For possible entity Fields, refer to the schema section for FreightIndex. This action requires the caller entitled to create Freight indexes",
                "operationId": "createEntityFreightIndex",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightIndex"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Freight index",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightIndex"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Freight index. The response body would contain the created Freight index",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Freight index. This action requires the caller entitled to create Freight indexes",
                "tags": [
                    "/FreightIndex"
                ]
            }
        },
        "/FreightIndex/{Id}": {
            "delete": {
                "description": "Deletes a existing Freight index.\n. This action is subject to caller is entitled to delete Freight indexes",
                "operationId": "deleteEntitySpecificFreightIndex",
                "parameters": [
                    {
                        "description": "Id of Freight index",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Freight index"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Freight index subject to caller is entitled to delete Freight indexes",
                "tags": [
                    "/FreightIndex/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificFreightIndex",
                "parameters": [
                    {
                        "description": "Id of Freight index",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight index field. For possible fields, refer to the schema section for FreightIndex",
                        "examples": {
                            "Sort by TradingPlace, ascending order": {
                                "description": "Sort by TradingPlace, ascending order",
                                "value": "TradingPlace:ASC"
                            },
                            "Sort by TradingPlace, descending order": {
                                "description": "Sort by TradingPlace, descending order",
                                "value": "TradingPlace:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight index field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightIndex",
                        "examples": {
                            "Filter by TradingPlace, in operator": {
                                "description": "Filter by TradingPlace, in operator",
                                "value": "TradingPlace,IN,A,B,C"
                            },
                            "Filter by TradingPlace, not in operator": {
                                "description": "Filter by TradingPlace, not in operator",
                                "value": "TradingPlace,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Freight indexes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Freight index fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightIndex",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightIndex"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Freight index. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Freight index in json format. This action requires the caller entitled to view Freight indexes",
                "tags": [
                    "/FreightIndex/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Freight index.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are RateCurrency,Name.\n For possible entity Fields, refer to the schema section for FreightIndex in json format, subject to caller is entitled to edit Freight indexes",
                "operationId": "updateEntitySpecificFreightIndex",
                "parameters": [
                    {
                        "description": "Id of Freight index",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightIndex"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Freight index",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightIndex"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Freight index. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Freight index subject to caller is entitled to edit Freight indexes",
                "tags": [
                    "/FreightIndex/{Id}"
                ]
            }
        },
        "/FreightPaymentTerm": {
            "get": {
                "operationId": "getEntityFreightPaymentTerm",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight payment term field. For possible fields, refer to the schema section for FreightPaymentTerm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight payment term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightPaymentTerm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Freight payment terms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Freight payment term fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightPaymentTerm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightPaymentTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Freight payment terms. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Freight payment terms in json format. This action requires the caller entitled to view Freight payment terms",
                "tags": [
                    "/FreightPaymentTerm"
                ]
            },
            "post": {
                "description": "Creates a new  Freight payment term.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Type,Name.\n For possible entity Fields, refer to the schema section for FreightPaymentTerm. This action requires the caller entitled to create Freight payment terms",
                "operationId": "createEntityFreightPaymentTerm",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightPaymentTerm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Freight payment term",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightPaymentTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Freight payment term. The response body would contain the created Freight payment term",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Freight payment term. This action requires the caller entitled to create Freight payment terms",
                "tags": [
                    "/FreightPaymentTerm"
                ]
            }
        },
        "/FreightPaymentTerm/{Id}": {
            "delete": {
                "description": "Deletes a existing Freight payment term.\n. This action is subject to caller is entitled to delete Freight payment terms",
                "operationId": "deleteEntitySpecificFreightPaymentTerm",
                "parameters": [
                    {
                        "description": "Id of Freight payment term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Freight payment term"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Freight payment term subject to caller is entitled to delete Freight payment terms",
                "tags": [
                    "/FreightPaymentTerm/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificFreightPaymentTerm",
                "parameters": [
                    {
                        "description": "Id of Freight payment term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight payment term field. For possible fields, refer to the schema section for FreightPaymentTerm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight payment term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for FreightPaymentTerm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Freight payment terms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Freight payment term fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for FreightPaymentTerm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightPaymentTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Freight payment term. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Freight payment term in json format. This action requires the caller entitled to view Freight payment terms",
                "tags": [
                    "/FreightPaymentTerm/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Freight payment term.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Type,Name.\n For possible entity Fields, refer to the schema section for FreightPaymentTerm in json format, subject to caller is entitled to edit Freight payment terms",
                "operationId": "updateEntitySpecificFreightPaymentTerm",
                "parameters": [
                    {
                        "description": "Id of Freight payment term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreightPaymentTerm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Freight payment term",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/FreightPaymentTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Freight payment term. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Freight payment term subject to caller is entitled to edit Freight payment terms",
                "tags": [
                    "/FreightPaymentTerm/{Id}"
                ]
            }
        },
        "/Future": {
            "get": {
                "operationId": "getEntityFuture",
                "parameters": [
                    {
                        "description": "Maximum number of returned Futures",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Future field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Future",
                        "examples": {
                            "Filter by Ticker, in operator": {
                                "description": "Filter by Ticker, in operator",
                                "value": "Ticker,IN,A,B,C"
                            },
                            "Filter by Ticker, not in operator": {
                                "description": "Filter by Ticker, not in operator",
                                "value": "Ticker,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Future fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Future",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Future field. For possible fields, refer to the schema section for Future",
                        "examples": {
                            "Sort by Ticker, ascending order": {
                                "description": "Sort by Ticker, ascending order",
                                "value": "Ticker:ASC"
                            },
                            "Sort by Ticker, descending order": {
                                "description": "Sort by Ticker, descending order",
                                "value": "Ticker:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Future"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Futures. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Futures in json format. This action requires the caller entitled to view Futures",
                "tags": [
                    "/Future"
                ]
            },
            "post": {
                "description": "Creates a new  Future.\nFields required for creation are MaturityMonthYear,FutureProductCode.\n For possible entity Fields, refer to the schema section for Future. This action requires the caller entitled to create Futures",
                "operationId": "createEntityFuture",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Future"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Future",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Future"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Future. The response body would contain the created Future",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Future. This action requires the caller entitled to create Futures",
                "tags": [
                    "/Future"
                ]
            }
        },
        "/Future/{Id}": {
            "delete": {
                "description": "Deletes a existing Future.\n. This action is subject to caller is entitled to delete Futures",
                "operationId": "deleteEntitySpecificFuture",
                "parameters": [
                    {
                        "description": "Id of Future",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Future"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Future subject to caller is entitled to delete Futures",
                "tags": [
                    "/Future/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificFuture",
                "parameters": [
                    {
                        "description": "Id of Future",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Futures",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Future field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Future",
                        "examples": {
                            "Filter by Ticker, in operator": {
                                "description": "Filter by Ticker, in operator",
                                "value": "Ticker,IN,A,B,C"
                            },
                            "Filter by Ticker, not in operator": {
                                "description": "Filter by Ticker, not in operator",
                                "value": "Ticker,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Future fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Future",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Future field. For possible fields, refer to the schema section for Future",
                        "examples": {
                            "Sort by Ticker, ascending order": {
                                "description": "Sort by Ticker, ascending order",
                                "value": "Ticker:ASC"
                            },
                            "Sort by Ticker, descending order": {
                                "description": "Sort by Ticker, descending order",
                                "value": "Ticker:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Future"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Future. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Future in json format. This action requires the caller entitled to view Futures",
                "tags": [
                    "/Future/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Future.\nFields required to be passed while editing are MaturityMonthYear,FutureProductCode.\n For possible entity Fields, refer to the schema section for Future in json format, subject to caller is entitled to edit Futures",
                "operationId": "updateEntitySpecificFuture",
                "parameters": [
                    {
                        "description": "Id of Future",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Future"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Future",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Future"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Future. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Future subject to caller is entitled to edit Futures",
                "tags": [
                    "/Future/{Id}"
                ]
            }
        },
        "/GeoZone": {
            "get": {
                "operationId": "getEntityGeoZone",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Geo zone field. For possible fields, refer to the schema section for GeoZone",
                        "examples": {
                            "Sort by Zone, ascending order": {
                                "description": "Sort by Zone, ascending order",
                                "value": "Zone:ASC"
                            },
                            "Sort by Zone, descending order": {
                                "description": "Sort by Zone, descending order",
                                "value": "Zone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Geo zone field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GeoZone",
                        "examples": {
                            "Filter by Zone, in operator": {
                                "description": "Filter by Zone, in operator",
                                "value": "Zone,IN,A,B,C"
                            },
                            "Filter by Zone, not in operator": {
                                "description": "Filter by Zone, not in operator",
                                "value": "Zone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Geo zone fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GeoZone",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Geo zones",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GeoZone"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Geo zones. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Geo zones in json format. This action requires the caller entitled to view Geo zones",
                "tags": [
                    "/GeoZone"
                ]
            },
            "post": {
                "description": "Creates a new  Geo zone.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Zone.\n For possible entity Fields, refer to the schema section for GeoZone. This action requires the caller entitled to create Geo zones",
                "operationId": "createEntityGeoZone",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeoZone"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Geo zone",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GeoZone"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Geo zone. The response body would contain the created Geo zone",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Geo zone. This action requires the caller entitled to create Geo zones",
                "tags": [
                    "/GeoZone"
                ]
            }
        },
        "/GeoZone/{Id}": {
            "delete": {
                "description": "Deletes a existing Geo zone.\n. This action is subject to caller is entitled to delete Geo zones",
                "operationId": "deleteEntitySpecificGeoZone",
                "parameters": [
                    {
                        "description": "Id of Geo zone",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Geo zone"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Geo zone subject to caller is entitled to delete Geo zones",
                "tags": [
                    "/GeoZone/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificGeoZone",
                "parameters": [
                    {
                        "description": "Id of Geo zone",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Geo zone field. For possible fields, refer to the schema section for GeoZone",
                        "examples": {
                            "Sort by Zone, ascending order": {
                                "description": "Sort by Zone, ascending order",
                                "value": "Zone:ASC"
                            },
                            "Sort by Zone, descending order": {
                                "description": "Sort by Zone, descending order",
                                "value": "Zone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Geo zone field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GeoZone",
                        "examples": {
                            "Filter by Zone, in operator": {
                                "description": "Filter by Zone, in operator",
                                "value": "Zone,IN,A,B,C"
                            },
                            "Filter by Zone, not in operator": {
                                "description": "Filter by Zone, not in operator",
                                "value": "Zone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Geo zone fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GeoZone",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Geo zones",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GeoZone"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Geo zone. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Geo zone in json format. This action requires the caller entitled to view Geo zones",
                "tags": [
                    "/GeoZone/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Geo zone.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Zone.\n For possible entity Fields, refer to the schema section for GeoZone in json format, subject to caller is entitled to edit Geo zones",
                "operationId": "updateEntitySpecificGeoZone",
                "parameters": [
                    {
                        "description": "Id of Geo zone",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeoZone"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Geo zone",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GeoZone"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Geo zone. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Geo zone subject to caller is entitled to edit Geo zones",
                "tags": [
                    "/GeoZone/{Id}"
                ]
            }
        },
        "/GICSIndustry": {
            "get": {
                "operationId": "getEntityGICSIndustry",
                "parameters": [
                    {
                        "description": "Comma separated list of GICS industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GICSIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the GICS industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GICSIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any GICS industry field. For possible fields, refer to the schema section for GICSIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned GICS industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GICSIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching GICS industries. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching GICS industries in json format. This action requires the caller entitled to view GICS industries",
                "tags": [
                    "/GICSIndustry"
                ]
            },
            "post": {
                "description": "Creates a new  GICS industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Type,Code,Name.\n For possible entity Fields, refer to the schema section for GICSIndustry. This action requires the caller entitled to create GICS industries",
                "operationId": "createEntityGICSIndustry",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GICSIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the GICS industry",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GICSIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of GICS industry. The response body would contain the created GICS industry",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new GICS industry. This action requires the caller entitled to create GICS industries",
                "tags": [
                    "/GICSIndustry"
                ]
            }
        },
        "/GICSIndustry/{Id}": {
            "delete": {
                "description": "Deletes a existing GICS industry.\n. This action is subject to caller is entitled to delete GICS industries",
                "operationId": "deleteEntitySpecificGICSIndustry",
                "parameters": [
                    {
                        "description": "Id of GICS industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific GICS industry"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing GICS industry subject to caller is entitled to delete GICS industries",
                "tags": [
                    "/GICSIndustry/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificGICSIndustry",
                "parameters": [
                    {
                        "description": "Id of GICS industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of GICS industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GICSIndustry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the GICS industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GICSIndustry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any GICS industry field. For possible fields, refer to the schema section for GICSIndustry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned GICS industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GICSIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific GICS industry. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific GICS industry in json format. This action requires the caller entitled to view GICS industries",
                "tags": [
                    "/GICSIndustry/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing GICS industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Type,Code,Name.\n For possible entity Fields, refer to the schema section for GICSIndustry in json format, subject to caller is entitled to edit GICS industries",
                "operationId": "updateEntitySpecificGICSIndustry",
                "parameters": [
                    {
                        "description": "Id of GICS industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GICSIndustry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified GICS industry",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GICSIndustry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific GICS industry. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing GICS industry subject to caller is entitled to edit GICS industries",
                "tags": [
                    "/GICSIndustry/{Id}"
                ]
            }
        },
        "/Grade": {
            "get": {
                "operationId": "getEntityGrade",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Grade fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Grade",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Grades",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade field. For possible fields, refer to the schema section for Grade",
                        "examples": {
                            "Sort by Standard, ascending order": {
                                "description": "Sort by Standard, ascending order",
                                "value": "Standard:ASC"
                            },
                            "Sort by Standard, descending order": {
                                "description": "Sort by Standard, descending order",
                                "value": "Standard:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Grade",
                        "examples": {
                            "Filter by Standard, in operator": {
                                "description": "Filter by Standard, in operator",
                                "value": "Standard,IN,A,B,C"
                            },
                            "Filter by Standard, not in operator": {
                                "description": "Filter by Standard, not in operator",
                                "value": "Standard,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Grade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Grades. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Grades in json format. This action requires the caller entitled to view Grades",
                "tags": [
                    "/Grade"
                ]
            },
            "post": {
                "description": "Creates a new  Grade.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Grade. This action requires the caller entitled to create Grades",
                "operationId": "createEntityGrade",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Grade"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Grade",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Grade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Grade. The response body would contain the created Grade",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Grade. This action requires the caller entitled to create Grades",
                "tags": [
                    "/Grade"
                ]
            }
        },
        "/Grade/{Id}": {
            "delete": {
                "description": "Deletes a existing Grade.\n. This action is subject to caller is entitled to delete Grades",
                "operationId": "deleteEntitySpecificGrade",
                "parameters": [
                    {
                        "description": "Id of Grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Grade"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Grade subject to caller is entitled to delete Grades",
                "tags": [
                    "/Grade/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificGrade",
                "parameters": [
                    {
                        "description": "Id of Grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Grade fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Grade",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Grades",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade field. For possible fields, refer to the schema section for Grade",
                        "examples": {
                            "Sort by Standard, ascending order": {
                                "description": "Sort by Standard, ascending order",
                                "value": "Standard:ASC"
                            },
                            "Sort by Standard, descending order": {
                                "description": "Sort by Standard, descending order",
                                "value": "Standard:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Grade",
                        "examples": {
                            "Filter by Standard, in operator": {
                                "description": "Filter by Standard, in operator",
                                "value": "Standard,IN,A,B,C"
                            },
                            "Filter by Standard, not in operator": {
                                "description": "Filter by Standard, not in operator",
                                "value": "Standard,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Grade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Grade. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Grade in json format. This action requires the caller entitled to view Grades",
                "tags": [
                    "/Grade/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Grade.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Grade in json format, subject to caller is entitled to edit Grades",
                "operationId": "updateEntitySpecificGrade",
                "parameters": [
                    {
                        "description": "Id of Grade",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Grade"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Grade",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Grade"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Grade. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Grade subject to caller is entitled to edit Grades",
                "tags": [
                    "/Grade/{Id}"
                ]
            }
        },
        "/GradeFactor": {
            "get": {
                "operationId": "getEntityGradeFactor",
                "parameters": [
                    {
                        "description": "Comma separated list of Grade factor fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GradeFactor",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Grade factors",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade factor field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GradeFactor",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade factor field. For possible fields, refer to the schema section for GradeFactor",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeFactor"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Grade factors. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Grade factors in json format. This action requires the caller entitled to view Grade factors",
                "tags": [
                    "/GradeFactor"
                ]
            },
            "post": {
                "description": "Creates a new  Grade factor.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for GradeFactor. This action requires the caller entitled to create Grade factors",
                "operationId": "createEntityGradeFactor",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GradeFactor"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Grade factor",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeFactor"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Grade factor. The response body would contain the created Grade factor",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Grade factor. This action requires the caller entitled to create Grade factors",
                "tags": [
                    "/GradeFactor"
                ]
            }
        },
        "/GradeFactor/{Id}": {
            "delete": {
                "description": "Deletes a existing Grade factor.\n. This action is subject to caller is entitled to delete Grade factors",
                "operationId": "deleteEntitySpecificGradeFactor",
                "parameters": [
                    {
                        "description": "Id of Grade factor",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Grade factor"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Grade factor subject to caller is entitled to delete Grade factors",
                "tags": [
                    "/GradeFactor/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificGradeFactor",
                "parameters": [
                    {
                        "description": "Id of Grade factor",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Grade factor fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for GradeFactor",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Grade factors",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade factor field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for GradeFactor",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade factor field. For possible fields, refer to the schema section for GradeFactor",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeFactor"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Grade factor. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Grade factor in json format. This action requires the caller entitled to view Grade factors",
                "tags": [
                    "/GradeFactor/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Grade factor.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for GradeFactor in json format, subject to caller is entitled to edit Grade factors",
                "operationId": "updateEntitySpecificGradeFactor",
                "parameters": [
                    {
                        "description": "Id of Grade factor",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GradeFactor"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Grade factor",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeFactor"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Grade factor. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Grade factor subject to caller is entitled to edit Grade factors",
                "tags": [
                    "/GradeFactor/{Id}"
                ]
            }
        },
        "/Incoterm": {
            "get": {
                "operationId": "getEntityIncoterm",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Incoterms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Incoterm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Incoterm",
                        "examples": {
                            "Filter by Version, in operator": {
                                "description": "Filter by Version, in operator",
                                "value": "Version,IN,A,B,C"
                            },
                            "Filter by Version, not in operator": {
                                "description": "Filter by Version, not in operator",
                                "value": "Version,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Incoterm field. For possible fields, refer to the schema section for Incoterm",
                        "examples": {
                            "Sort by Version, ascending order": {
                                "description": "Sort by Version, ascending order",
                                "value": "Version:ASC"
                            },
                            "Sort by Version, descending order": {
                                "description": "Sort by Version, descending order",
                                "value": "Version:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Incoterm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Incoterm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Incoterm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Incoterms. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Incoterms in json format. This action requires the caller entitled to view Incoterms",
                "tags": [
                    "/Incoterm"
                ]
            },
            "post": {
                "description": "Creates a new  Incoterm.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Incoterm. This action requires the caller entitled to create Incoterms",
                "operationId": "createEntityIncoterm",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Incoterm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Incoterm",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Incoterm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Incoterm. The response body would contain the created Incoterm",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Incoterm. This action requires the caller entitled to create Incoterms",
                "tags": [
                    "/Incoterm"
                ]
            }
        },
        "/Incoterm/{Id}": {
            "delete": {
                "description": "Deletes a existing Incoterm.\n. This action is subject to caller is entitled to delete Incoterms",
                "operationId": "deleteEntitySpecificIncoterm",
                "parameters": [
                    {
                        "description": "Id of Incoterm",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Incoterm"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Incoterm subject to caller is entitled to delete Incoterms",
                "tags": [
                    "/Incoterm/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificIncoterm",
                "parameters": [
                    {
                        "description": "Id of Incoterm",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Incoterms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Incoterm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Incoterm",
                        "examples": {
                            "Filter by Version, in operator": {
                                "description": "Filter by Version, in operator",
                                "value": "Version,IN,A,B,C"
                            },
                            "Filter by Version, not in operator": {
                                "description": "Filter by Version, not in operator",
                                "value": "Version,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Incoterm field. For possible fields, refer to the schema section for Incoterm",
                        "examples": {
                            "Sort by Version, ascending order": {
                                "description": "Sort by Version, ascending order",
                                "value": "Version:ASC"
                            },
                            "Sort by Version, descending order": {
                                "description": "Sort by Version, descending order",
                                "value": "Version:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Incoterm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Incoterm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Incoterm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Incoterm. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Incoterm in json format. This action requires the caller entitled to view Incoterms",
                "tags": [
                    "/Incoterm/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Incoterm.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Incoterm in json format, subject to caller is entitled to edit Incoterms",
                "operationId": "updateEntitySpecificIncoterm",
                "parameters": [
                    {
                        "description": "Id of Incoterm",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Incoterm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Incoterm",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Incoterm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Incoterm. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Incoterm subject to caller is entitled to edit Incoterms",
                "tags": [
                    "/Incoterm/{Id}"
                ]
            }
        },
        "/InheritableField": {
            "get": {
                "operationId": "getEntityInheritableField",
                "parameters": [
                    {
                        "description": "Comma separated list of Inheritable field fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InheritableField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Inheritable field field. For possible fields, refer to the schema section for InheritableField",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Inheritable fields",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Inheritable field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InheritableField",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InheritableField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Inheritable fields. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Inheritable fields in json format. This action requires the caller entitled to view Inheritable fields",
                "tags": [
                    "/InheritableField"
                ]
            },
            "post": {
                "description": "Creates a new  Inheritable field.\nFields required for creation are EntityClass,Name.\n For possible entity Fields, refer to the schema section for InheritableField. This action requires the caller entitled to create Inheritable fields",
                "operationId": "createEntityInheritableField",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InheritableField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Inheritable field",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InheritableField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Inheritable field. The response body would contain the created Inheritable field",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Inheritable field. This action requires the caller entitled to create Inheritable fields",
                "tags": [
                    "/InheritableField"
                ]
            }
        },
        "/InheritableField/{Id}": {
            "delete": {
                "description": "Deletes a existing Inheritable field.\n. This action is subject to caller is entitled to delete Inheritable fields",
                "operationId": "deleteEntitySpecificInheritableField",
                "parameters": [
                    {
                        "description": "Id of Inheritable field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Inheritable field"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Inheritable field subject to caller is entitled to delete Inheritable fields",
                "tags": [
                    "/InheritableField/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificInheritableField",
                "parameters": [
                    {
                        "description": "Id of Inheritable field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Inheritable field fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InheritableField",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Inheritable field field. For possible fields, refer to the schema section for InheritableField",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Inheritable fields",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Inheritable field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InheritableField",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InheritableField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Inheritable field. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Inheritable field in json format. This action requires the caller entitled to view Inheritable fields",
                "tags": [
                    "/InheritableField/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Inheritable field.\nFields required to be passed while editing are EntityClass,Name.\n For possible entity Fields, refer to the schema section for InheritableField in json format, subject to caller is entitled to edit Inheritable fields",
                "operationId": "updateEntitySpecificInheritableField",
                "parameters": [
                    {
                        "description": "Id of Inheritable field",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InheritableField"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Inheritable field",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InheritableField"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Inheritable field. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Inheritable field subject to caller is entitled to edit Inheritable fields",
                "tags": [
                    "/InheritableField/{Id}"
                ]
            }
        },
        "/InvestorType": {
            "get": {
                "operationId": "getEntityInvestorType",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investor type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestorType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Investor types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Investor type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestorType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investor type field. For possible fields, refer to the schema section for InvestorType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InvestorType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Investor types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Investor types in json format. This action requires the caller entitled to view Investor types",
                "tags": [
                    "/InvestorType"
                ]
            },
            "post": {
                "description": "Creates a new  Investor type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for InvestorType. This action requires the caller entitled to create Investor types",
                "operationId": "createEntityInvestorType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestorType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Investor type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InvestorType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Investor type. The response body would contain the created Investor type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Investor type. This action requires the caller entitled to create Investor types",
                "tags": [
                    "/InvestorType"
                ]
            }
        },
        "/InvestorType/{Id}": {
            "delete": {
                "description": "Deletes a existing Investor type.\n. This action is subject to caller is entitled to delete Investor types",
                "operationId": "deleteEntitySpecificInvestorType",
                "parameters": [
                    {
                        "description": "Id of Investor type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Investor type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Investor type subject to caller is entitled to delete Investor types",
                "tags": [
                    "/InvestorType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificInvestorType",
                "parameters": [
                    {
                        "description": "Id of Investor type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investor type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestorType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Investor types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Investor type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestorType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investor type field. For possible fields, refer to the schema section for InvestorType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InvestorType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Investor type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Investor type in json format. This action requires the caller entitled to view Investor types",
                "tags": [
                    "/InvestorType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Investor type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for InvestorType in json format, subject to caller is entitled to edit Investor types",
                "operationId": "updateEntitySpecificInvestorType",
                "parameters": [
                    {
                        "description": "Id of Investor type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestorType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Investor type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InvestorType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Investor type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Investor type subject to caller is entitled to edit Investor types",
                "tags": [
                    "/InvestorType/{Id}"
                ]
            }
        },
        "/IonUser": {
            "get": {
                "operationId": "getEntityIonUser",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any ION user field. For possible fields, refer to the schema section for IonUser",
                        "examples": {
                            "Sort by RCFieldName, ascending order": {
                                "description": "Sort by RCFieldName, ascending order",
                                "value": "RCFieldName:ASC"
                            },
                            "Sort by RCFieldName, descending order": {
                                "description": "Sort by RCFieldName, descending order",
                                "value": "RCFieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned ION users",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of ION user fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for IonUser",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the ION user field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for IonUser",
                        "examples": {
                            "Filter by RCFieldName, in operator": {
                                "description": "Filter by RCFieldName, in operator",
                                "value": "RCFieldName,IN,A,B,C"
                            },
                            "Filter by RCFieldName, not in operator": {
                                "description": "Filter by RCFieldName, not in operator",
                                "value": "RCFieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/IonUser"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching ION users. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching ION users in json format. This action requires the caller entitled to view ION users",
                "tags": [
                    "/IonUser"
                ]
            },
            "post": {
                "description": "Creates a new  ION user.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for IonUser. This action requires the caller entitled to create ION users",
                "operationId": "createEntityIonUser",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IonUser"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the ION user",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/IonUser"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of ION user. The response body would contain the created ION user",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new ION user. This action requires the caller entitled to create ION users",
                "tags": [
                    "/IonUser"
                ]
            }
        },
        "/IonUser/{Id}": {
            "delete": {
                "description": "Deletes a existing ION user.\n. This action is subject to caller is entitled to delete ION users",
                "operationId": "deleteEntitySpecificIonUser",
                "parameters": [
                    {
                        "description": "Id of ION user",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific ION user"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing ION user subject to caller is entitled to delete ION users",
                "tags": [
                    "/IonUser/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificIonUser",
                "parameters": [
                    {
                        "description": "Id of ION user",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any ION user field. For possible fields, refer to the schema section for IonUser",
                        "examples": {
                            "Sort by RCFieldName, ascending order": {
                                "description": "Sort by RCFieldName, ascending order",
                                "value": "RCFieldName:ASC"
                            },
                            "Sort by RCFieldName, descending order": {
                                "description": "Sort by RCFieldName, descending order",
                                "value": "RCFieldName:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned ION users",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of ION user fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for IonUser",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the ION user field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for IonUser",
                        "examples": {
                            "Filter by RCFieldName, in operator": {
                                "description": "Filter by RCFieldName, in operator",
                                "value": "RCFieldName,IN,A,B,C"
                            },
                            "Filter by RCFieldName, not in operator": {
                                "description": "Filter by RCFieldName, not in operator",
                                "value": "RCFieldName,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/IonUser"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific ION user. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific ION user in json format. This action requires the caller entitled to view ION users",
                "tags": [
                    "/IonUser/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing ION user.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for IonUser in json format, subject to caller is entitled to edit ION users",
                "operationId": "updateEntitySpecificIonUser",
                "parameters": [
                    {
                        "description": "Id of ION user",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IonUser"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified ION user",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/IonUser"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific ION user. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing ION user subject to caller is entitled to edit ION users",
                "tags": [
                    "/IonUser/{Id}"
                ]
            }
        },
        "/LaytimeTerm": {
            "get": {
                "operationId": "getEntityLaytimeTerm",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Laytime term field. For possible fields, refer to the schema section for LaytimeTerm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Laytime terms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Laytime term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LaytimeTerm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Laytime term fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LaytimeTerm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LaytimeTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Laytime terms. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Laytime terms in json format. This action requires the caller entitled to view Laytime terms",
                "tags": [
                    "/LaytimeTerm"
                ]
            },
            "post": {
                "description": "Creates a new  Laytime term.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are TimeFrom,TimeTo,DaysTo,DaysFrom,Name.\n For possible entity Fields, refer to the schema section for LaytimeTerm. This action requires the caller entitled to create Laytime terms",
                "operationId": "createEntityLaytimeTerm",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LaytimeTerm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Laytime term",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LaytimeTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Laytime term. The response body would contain the created Laytime term",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Laytime term. This action requires the caller entitled to create Laytime terms",
                "tags": [
                    "/LaytimeTerm"
                ]
            }
        },
        "/LaytimeTerm/{Id}": {
            "delete": {
                "description": "Deletes a existing Laytime term.\n. This action is subject to caller is entitled to delete Laytime terms",
                "operationId": "deleteEntitySpecificLaytimeTerm",
                "parameters": [
                    {
                        "description": "Id of Laytime term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Laytime term"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Laytime term subject to caller is entitled to delete Laytime terms",
                "tags": [
                    "/LaytimeTerm/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificLaytimeTerm",
                "parameters": [
                    {
                        "description": "Id of Laytime term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Laytime term field. For possible fields, refer to the schema section for LaytimeTerm",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Laytime terms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Laytime term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LaytimeTerm",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Laytime term fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LaytimeTerm",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LaytimeTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Laytime term. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Laytime term in json format. This action requires the caller entitled to view Laytime terms",
                "tags": [
                    "/LaytimeTerm/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Laytime term.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are TimeFrom,TimeTo,DaysTo,DaysFrom,Name.\n For possible entity Fields, refer to the schema section for LaytimeTerm in json format, subject to caller is entitled to edit Laytime terms",
                "operationId": "updateEntitySpecificLaytimeTerm",
                "parameters": [
                    {
                        "description": "Id of Laytime term",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LaytimeTerm"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Laytime term",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LaytimeTerm"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Laytime term. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Laytime term subject to caller is entitled to edit Laytime terms",
                "tags": [
                    "/LaytimeTerm/{Id}"
                ]
            }
        },
        "/LegalEntity": {
            "get": {
                "operationId": "getEntityLegalEntity",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Legal entity fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LegalEntity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity field. For possible fields, refer to the schema section for LegalEntity",
                        "examples": {
                            "Sort by XtractUnderwriterId, ascending order": {
                                "description": "Sort by XtractUnderwriterId, ascending order",
                                "value": "XtractUnderwriterId:ASC"
                            },
                            "Sort by XtractUnderwriterId, descending order": {
                                "description": "Sort by XtractUnderwriterId, descending order",
                                "value": "XtractUnderwriterId:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Legal entities",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LegalEntity",
                        "examples": {
                            "Filter by XtractUnderwriterId, in operator": {
                                "description": "Filter by XtractUnderwriterId, in operator",
                                "value": "XtractUnderwriterId,IN,A,B,C"
                            },
                            "Filter by XtractUnderwriterId, not in operator": {
                                "description": "Filter by XtractUnderwriterId, not in operator",
                                "value": "XtractUnderwriterId,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Legal entities. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Legal entities in json format. This action requires the caller entitled to view Legal entities",
                "tags": [
                    "/LegalEntity"
                ]
            },
            "post": {
                "description": "Creates a new  Legal entity.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,LegalName.\n For possible entity Fields, refer to the schema section for LegalEntity. This action requires the caller entitled to create Legal entities",
                "operationId": "createEntityLegalEntity",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Legal entity. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Legal entity. The response body would contain the created Legal entity",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Legal entity. This action requires the caller entitled to create Legal entities",
                "tags": [
                    "/LegalEntity"
                ]
            }
        },
        "/LegalEntity/{Id}": {
            "delete": {
                "description": "Deletes a existing Legal entity.\n. This action is subject to caller is entitled to delete Legal entities",
                "operationId": "deleteEntitySpecificLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Legal entity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Legal entity subject to caller is entitled to delete Legal entities",
                "tags": [
                    "/LegalEntity/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Legal entity fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LegalEntity",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity field. For possible fields, refer to the schema section for LegalEntity",
                        "examples": {
                            "Sort by XtractUnderwriterId, ascending order": {
                                "description": "Sort by XtractUnderwriterId, ascending order",
                                "value": "XtractUnderwriterId:ASC"
                            },
                            "Sort by XtractUnderwriterId, descending order": {
                                "description": "Sort by XtractUnderwriterId, descending order",
                                "value": "XtractUnderwriterId:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Legal entities",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LegalEntity",
                        "examples": {
                            "Filter by XtractUnderwriterId, in operator": {
                                "description": "Filter by XtractUnderwriterId, in operator",
                                "value": "XtractUnderwriterId,IN,A,B,C"
                            },
                            "Filter by XtractUnderwriterId, not in operator": {
                                "description": "Filter by XtractUnderwriterId, not in operator",
                                "value": "XtractUnderwriterId,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Legal entity in json format. This action requires the caller entitled to view Legal entities",
                "tags": [
                    "/LegalEntity/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Legal entity.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,LegalName.\n For possible entity Fields, refer to the schema section for LegalEntity in json format, subject to caller is entitled to edit Legal entities",
                "operationId": "updateEntitySpecificLegalEntity",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Legal entity. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Legal entity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Legal entity subject to caller is entitled to edit Legal entities",
                "tags": [
                    "/LegalEntity/{Id}"
                ]
            }
        },
        "/LegalEntity/{Id}/BusinessVersions": {
            "get": {
                "operationId": "getEntityLegalEntityAnalyticsBusinessVersion",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business version fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalyticsBusinessVersion",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business versions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business version field. For possible fields, refer to the schema section for AnalyticsBusinessVersion",
                        "examples": {
                            "Sort by ValidTo, ascending order": {
                                "description": "Sort by ValidTo, ascending order",
                                "value": "ValidTo:ASC"
                            },
                            "Sort by ValidTo, descending order": {
                                "description": "Sort by ValidTo, descending order",
                                "value": "ValidTo:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business version field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalyticsBusinessVersion",
                        "examples": {
                            "Filter by ValidTo, in operator": {
                                "description": "Filter by ValidTo, in operator",
                                "value": "ValidTo,IN,A,B,C"
                            },
                            "Filter by ValidTo, not in operator": {
                                "description": "Filter by ValidTo, not in operator",
                                "value": "ValidTo,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Business versions belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Business versions belonging to the parent Legal entity in json format. This action requires the caller entitled to view Business versions",
                "tags": [
                    "/LegalEntity/{Id}/BusinessVersions"
                ]
            },
            "post": {
                "description": "Creates a new  Business version.\nBusiness version is a sub-entity of  Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are VersionId,LegalName.\n For possible entity Fields, refer to the schema section for AnalyticsBusinessVersion. This action requires the caller entitled to create Business versions",
                "operationId": "createEntityLegalEntityAnalyticsBusinessVersion",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Business version",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Business version for the parent Legal entity. The response body would contain the created Business version",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Business version belonging to Legal entity. This action requires the caller entitled to create Business versions",
                "tags": [
                    "/LegalEntity/{Id}/BusinessVersions"
                ]
            }
        },
        "/LegalEntity/{Id}/BusinessVersions/{BusinessVersionsId}": {
            "delete": {
                "description": "Deletes a existing Business version.\nBusiness version is a sub-entity of Legal entity. This action is subject to caller is entitled to delete Business versions",
                "operationId": "deleteEntitySpecificLegalEntityAnalyticsBusinessVersion",
                "parameters": [
                    {
                        "description": "Id of Business version",
                        "in": "path",
                        "name": "BusinessVersionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Business version belonging to the parent Legal entity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Business version belonging to Legal entity subject to caller is entitled to delete Business versions",
                "tags": [
                    "/LegalEntity/{Id}/BusinessVersions/{BusinessVersionsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificLegalEntityAnalyticsBusinessVersion",
                "parameters": [
                    {
                        "description": "Id of Business version",
                        "in": "path",
                        "name": "BusinessVersionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Business version fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AnalyticsBusinessVersion",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Business versions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business version field. For possible fields, refer to the schema section for AnalyticsBusinessVersion",
                        "examples": {
                            "Sort by ValidTo, ascending order": {
                                "description": "Sort by ValidTo, ascending order",
                                "value": "ValidTo:ASC"
                            },
                            "Sort by ValidTo, descending order": {
                                "description": "Sort by ValidTo, descending order",
                                "value": "ValidTo:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business version field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AnalyticsBusinessVersion",
                        "examples": {
                            "Filter by ValidTo, in operator": {
                                "description": "Filter by ValidTo, in operator",
                                "value": "ValidTo,IN,A,B,C"
                            },
                            "Filter by ValidTo, not in operator": {
                                "description": "Filter by ValidTo, not in operator",
                                "value": "ValidTo,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Business version belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Business version belonging to the parent Legal entity in json format. This action requires the caller entitled to view Business versions",
                "tags": [
                    "/LegalEntity/{Id}/BusinessVersions/{BusinessVersionsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Business version.\nBusiness version is a sub-entity of Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are VersionId,LegalName.\n For possible entity Fields, refer to the schema section for AnalyticsBusinessVersion in json format, subject to caller is entitled to edit Business versions",
                "operationId": "updateEntitySpecificLegalEntityAnalyticsBusinessVersion",
                "parameters": [
                    {
                        "description": "Id of Business version",
                        "in": "path",
                        "name": "BusinessVersionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Business version",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.AnalyticsBusinessVersion"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Business version belonging to the parent Legal entity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Business version belonging to Legal entity subject to caller is entitled to edit Business versions",
                "tags": [
                    "/LegalEntity/{Id}/BusinessVersions/{BusinessVersionsId}"
                ]
            }
        },
        "/LegalEntity/{Id}/OwnershipStakes": {
            "get": {
                "operationId": "getEntityLegalEntityOwnershipStake",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ownership stake fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for OwnershipStake",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership stake field. For possible fields, refer to the schema section for OwnershipStake",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ownership stakes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership stake field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for OwnershipStake",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Ownership stakes belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Ownership stakes belonging to the parent Legal entity in json format. This action requires the caller entitled to view Ownership stakes",
                "tags": [
                    "/LegalEntity/{Id}/OwnershipStakes"
                ]
            },
            "post": {
                "description": "Creates a new  Ownership stake.\nOwnership stake is a sub-entity of  Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Owner.\n For possible entity Fields, refer to the schema section for OwnershipStake. This action requires the caller entitled to create Ownership stakes",
                "operationId": "createEntityLegalEntityOwnershipStake",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Ownership stake",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Ownership stake for the parent Legal entity. The response body would contain the created Ownership stake",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Ownership stake belonging to Legal entity. This action requires the caller entitled to create Ownership stakes",
                "tags": [
                    "/LegalEntity/{Id}/OwnershipStakes"
                ]
            }
        },
        "/LegalEntity/{Id}/OwnershipStakes/{OwnershipStakesId}": {
            "delete": {
                "description": "Deletes a existing Ownership stake.\nOwnership stake is a sub-entity of Legal entity. This action is subject to caller is entitled to delete Ownership stakes",
                "operationId": "deleteEntitySpecificLegalEntityOwnershipStake",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ownership stake",
                        "in": "path",
                        "name": "OwnershipStakesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Ownership stake belonging to the parent Legal entity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Ownership stake belonging to Legal entity subject to caller is entitled to delete Ownership stakes",
                "tags": [
                    "/LegalEntity/{Id}/OwnershipStakes/{OwnershipStakesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificLegalEntityOwnershipStake",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ownership stake",
                        "in": "path",
                        "name": "OwnershipStakesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ownership stake fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for OwnershipStake",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership stake field. For possible fields, refer to the schema section for OwnershipStake",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ownership stakes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership stake field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for OwnershipStake",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Ownership stake belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Ownership stake belonging to the parent Legal entity in json format. This action requires the caller entitled to view Ownership stakes",
                "tags": [
                    "/LegalEntity/{Id}/OwnershipStakes/{OwnershipStakesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Ownership stake.\nOwnership stake is a sub-entity of Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Owner.\n For possible entity Fields, refer to the schema section for OwnershipStake in json format, subject to caller is entitled to edit Ownership stakes",
                "operationId": "updateEntitySpecificLegalEntityOwnershipStake",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ownership stake",
                        "in": "path",
                        "name": "OwnershipStakesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Ownership stake",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.OwnershipStake"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Ownership stake belonging to the parent Legal entity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Ownership stake belonging to Legal entity subject to caller is entitled to edit Ownership stakes",
                "tags": [
                    "/LegalEntity/{Id}/OwnershipStakes/{OwnershipStakesId}"
                ]
            }
        },
        "/LegalEntity/{Id}/Synonyms": {
            "get": {
                "operationId": "getEntityLegalEntityLegalEntitySynonym",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity synonym field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LegalEntitySynonym",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity synonym field. For possible fields, refer to the schema section for LegalEntitySynonym",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Legal entity synonym fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LegalEntitySynonym",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Legal entity synonyms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Legal entity synonyms belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Legal entity synonyms belonging to the parent Legal entity in json format. This action requires the caller entitled to view Legal entity synonyms",
                "tags": [
                    "/LegalEntity/{Id}/Synonyms"
                ]
            },
            "post": {
                "description": "Creates a new  Legal entity synonym.\nLegal entity synonym is a sub-entity of  Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for LegalEntitySynonym. This action requires the caller entitled to create Legal entity synonyms",
                "operationId": "createEntityLegalEntityLegalEntitySynonym",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Legal entity synonym",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Legal entity synonym for the parent Legal entity. The response body would contain the created Legal entity synonym",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Legal entity synonym belonging to Legal entity. This action requires the caller entitled to create Legal entity synonyms",
                "tags": [
                    "/LegalEntity/{Id}/Synonyms"
                ]
            }
        },
        "/LegalEntity/{Id}/Synonyms/{SynonymsId}": {
            "delete": {
                "description": "Deletes a existing Legal entity synonym.\nLegal entity synonym is a sub-entity of Legal entity. This action is subject to caller is entitled to delete Legal entity synonyms",
                "operationId": "deleteEntitySpecificLegalEntityLegalEntitySynonym",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity synonym",
                        "in": "path",
                        "name": "SynonymsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Legal entity synonym belonging to the parent Legal entity"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Legal entity synonym belonging to Legal entity subject to caller is entitled to delete Legal entity synonyms",
                "tags": [
                    "/LegalEntity/{Id}/Synonyms/{SynonymsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificLegalEntityLegalEntitySynonym",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity synonym",
                        "in": "path",
                        "name": "SynonymsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity synonym field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for LegalEntitySynonym",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity synonym field. For possible fields, refer to the schema section for LegalEntitySynonym",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Legal entity synonym fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for LegalEntitySynonym",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Legal entity synonyms",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Legal entity synonym belonging to the parent Legal entity. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Legal entity synonym belonging to the parent Legal entity in json format. This action requires the caller entitled to view Legal entity synonyms",
                "tags": [
                    "/LegalEntity/{Id}/Synonyms/{SynonymsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Legal entity synonym.\nLegal entity synonym is a sub-entity of Legal entity The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for LegalEntitySynonym in json format, subject to caller is entitled to edit Legal entity synonyms",
                "operationId": "updateEntitySpecificLegalEntityLegalEntitySynonym",
                "parameters": [
                    {
                        "description": "Id of Legal entity",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Legal entity synonym",
                        "in": "path",
                        "name": "SynonymsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Legal entity synonym",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/LegalEntity.LegalEntitySynonym"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Legal entity synonym belonging to the parent Legal entity. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Legal entity synonym belonging to Legal entity subject to caller is entitled to edit Legal entity synonyms",
                "tags": [
                    "/LegalEntity/{Id}/Synonyms/{SynonymsId}"
                ]
            }
        },
        "/ModeOfTransport": {
            "get": {
                "operationId": "getEntityModeOfTransport",
                "parameters": [
                    {
                        "description": "Maximum number of returned Mode of transports",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Mode of transport field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ModeOfTransport",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Mode of transport field. For possible fields, refer to the schema section for ModeOfTransport",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Mode of transport fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ModeOfTransport",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ModeOfTransport"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Mode of transports. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Mode of transports in json format. This action requires the caller entitled to view Mode of transports",
                "tags": [
                    "/ModeOfTransport"
                ]
            },
            "post": {
                "description": "Creates a new  Mode of transport.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ModeOfTransport. This action requires the caller entitled to create Mode of transports",
                "operationId": "createEntityModeOfTransport",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModeOfTransport"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Mode of transport",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ModeOfTransport"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Mode of transport. The response body would contain the created Mode of transport",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Mode of transport. This action requires the caller entitled to create Mode of transports",
                "tags": [
                    "/ModeOfTransport"
                ]
            }
        },
        "/ModeOfTransport/{Id}": {
            "delete": {
                "description": "Deletes a existing Mode of transport.\n. This action is subject to caller is entitled to delete Mode of transports",
                "operationId": "deleteEntitySpecificModeOfTransport",
                "parameters": [
                    {
                        "description": "Id of Mode of transport",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Mode of transport"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Mode of transport subject to caller is entitled to delete Mode of transports",
                "tags": [
                    "/ModeOfTransport/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificModeOfTransport",
                "parameters": [
                    {
                        "description": "Id of Mode of transport",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Mode of transports",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Mode of transport field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ModeOfTransport",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Mode of transport field. For possible fields, refer to the schema section for ModeOfTransport",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Mode of transport fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ModeOfTransport",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ModeOfTransport"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Mode of transport. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Mode of transport in json format. This action requires the caller entitled to view Mode of transports",
                "tags": [
                    "/ModeOfTransport/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Mode of transport.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ModeOfTransport in json format, subject to caller is entitled to edit Mode of transports",
                "operationId": "updateEntitySpecificModeOfTransport",
                "parameters": [
                    {
                        "description": "Id of Mode of transport",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModeOfTransport"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Mode of transport",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ModeOfTransport"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Mode of transport. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Mode of transport subject to caller is entitled to edit Mode of transports",
                "tags": [
                    "/ModeOfTransport/{Id}"
                ]
            }
        },
        "/NAICS2017Industry": {
            "get": {
                "operationId": "getEntityNAICS2017Industry",
                "parameters": [
                    {
                        "description": "Comma separated list of NAICS 2017 industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for NAICS2017Industry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any NAICS 2017 industry field. For possible fields, refer to the schema section for NAICS2017Industry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the NAICS 2017 industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for NAICS2017Industry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned NAICS 2017 industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NAICS2017Industry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching NAICS 2017 industries. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching NAICS 2017 industries in json format. This action requires the caller entitled to view NAICS 2017 industries",
                "tags": [
                    "/NAICS2017Industry"
                ]
            },
            "post": {
                "description": "Creates a new  NAICS 2017 industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for NAICS2017Industry. This action requires the caller entitled to create NAICS 2017 industries",
                "operationId": "createEntityNAICS2017Industry",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NAICS2017Industry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the NAICS 2017 industry",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NAICS2017Industry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of NAICS 2017 industry. The response body would contain the created NAICS 2017 industry",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new NAICS 2017 industry. This action requires the caller entitled to create NAICS 2017 industries",
                "tags": [
                    "/NAICS2017Industry"
                ]
            }
        },
        "/NAICS2017Industry/{Id}": {
            "delete": {
                "description": "Deletes a existing NAICS 2017 industry.\n. This action is subject to caller is entitled to delete NAICS 2017 industries",
                "operationId": "deleteEntitySpecificNAICS2017Industry",
                "parameters": [
                    {
                        "description": "Id of NAICS 2017 industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific NAICS 2017 industry"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing NAICS 2017 industry subject to caller is entitled to delete NAICS 2017 industries",
                "tags": [
                    "/NAICS2017Industry/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificNAICS2017Industry",
                "parameters": [
                    {
                        "description": "Id of NAICS 2017 industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of NAICS 2017 industry fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for NAICS2017Industry",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any NAICS 2017 industry field. For possible fields, refer to the schema section for NAICS2017Industry",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the NAICS 2017 industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for NAICS2017Industry",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned NAICS 2017 industries",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NAICS2017Industry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific NAICS 2017 industry. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific NAICS 2017 industry in json format. This action requires the caller entitled to view NAICS 2017 industries",
                "tags": [
                    "/NAICS2017Industry/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing NAICS 2017 industry.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for NAICS2017Industry in json format, subject to caller is entitled to edit NAICS 2017 industries",
                "operationId": "updateEntitySpecificNAICS2017Industry",
                "parameters": [
                    {
                        "description": "Id of NAICS 2017 industry",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NAICS2017Industry"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified NAICS 2017 industry",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NAICS2017Industry"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific NAICS 2017 industry. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing NAICS 2017 industry subject to caller is entitled to edit NAICS 2017 industries",
                "tags": [
                    "/NAICS2017Industry/{Id}"
                ]
            }
        },
        "/OwnershipType": {
            "get": {
                "operationId": "getEntityOwnershipType",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for OwnershipType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ownership types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ownership type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for OwnershipType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership type field. For possible fields, refer to the schema section for OwnershipType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OwnershipType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Ownership types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Ownership types in json format. This action requires the caller entitled to view Ownership types",
                "tags": [
                    "/OwnershipType"
                ]
            },
            "post": {
                "description": "Creates a new  Ownership type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for OwnershipType. This action requires the caller entitled to create Ownership types",
                "operationId": "createEntityOwnershipType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OwnershipType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Ownership type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OwnershipType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Ownership type. The response body would contain the created Ownership type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Ownership type. This action requires the caller entitled to create Ownership types",
                "tags": [
                    "/OwnershipType"
                ]
            }
        },
        "/OwnershipType/{Id}": {
            "delete": {
                "description": "Deletes a existing Ownership type.\n. This action is subject to caller is entitled to delete Ownership types",
                "operationId": "deleteEntitySpecificOwnershipType",
                "parameters": [
                    {
                        "description": "Id of Ownership type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Ownership type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Ownership type subject to caller is entitled to delete Ownership types",
                "tags": [
                    "/OwnershipType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificOwnershipType",
                "parameters": [
                    {
                        "description": "Id of Ownership type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for OwnershipType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ownership types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ownership type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for OwnershipType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership type field. For possible fields, refer to the schema section for OwnershipType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OwnershipType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Ownership type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Ownership type in json format. This action requires the caller entitled to view Ownership types",
                "tags": [
                    "/OwnershipType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Ownership type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DealogicId,Code,Name.\n For possible entity Fields, refer to the schema section for OwnershipType in json format, subject to caller is entitled to edit Ownership types",
                "operationId": "updateEntitySpecificOwnershipType",
                "parameters": [
                    {
                        "description": "Id of Ownership type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OwnershipType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Ownership type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OwnershipType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Ownership type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Ownership type subject to caller is entitled to edit Ownership types",
                "tags": [
                    "/OwnershipType/{Id}"
                ]
            }
        },
        "/Packaging": {
            "get": {
                "operationId": "getEntityPackaging",
                "parameters": [
                    {
                        "description": "Maximum number of returned Packagings",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Packaging field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Packaging",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Packaging fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Packaging",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Packaging field. For possible fields, refer to the schema section for Packaging",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Packaging"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Packagings. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Packagings in json format. This action requires the caller entitled to view Packagings",
                "tags": [
                    "/Packaging"
                ]
            },
            "post": {
                "description": "Creates a new  Packaging.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Packaging. This action requires the caller entitled to create Packagings",
                "operationId": "createEntityPackaging",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Packaging"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Packaging",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Packaging"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Packaging. The response body would contain the created Packaging",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Packaging. This action requires the caller entitled to create Packagings",
                "tags": [
                    "/Packaging"
                ]
            }
        },
        "/Packaging/{Id}": {
            "delete": {
                "description": "Deletes a existing Packaging.\n. This action is subject to caller is entitled to delete Packagings",
                "operationId": "deleteEntitySpecificPackaging",
                "parameters": [
                    {
                        "description": "Id of Packaging",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Packaging"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Packaging subject to caller is entitled to delete Packagings",
                "tags": [
                    "/Packaging/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificPackaging",
                "parameters": [
                    {
                        "description": "Id of Packaging",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Packagings",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Packaging field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Packaging",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Packaging fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Packaging",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Packaging field. For possible fields, refer to the schema section for Packaging",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Packaging"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Packaging. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Packaging in json format. This action requires the caller entitled to view Packagings",
                "tags": [
                    "/Packaging/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Packaging.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Packaging in json format, subject to caller is entitled to edit Packagings",
                "operationId": "updateEntitySpecificPackaging",
                "parameters": [
                    {
                        "description": "Id of Packaging",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Packaging"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Packaging",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Packaging"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Packaging. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Packaging subject to caller is entitled to edit Packagings",
                "tags": [
                    "/Packaging/{Id}"
                ]
            }
        },
        "/Port": {
            "get": {
                "operationId": "getEntityPort",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port field. For possible fields, refer to the schema section for Port",
                        "examples": {
                            "Sort by UNCode, ascending order": {
                                "description": "Sort by UNCode, ascending order",
                                "value": "UNCode:ASC"
                            },
                            "Sort by UNCode, descending order": {
                                "description": "Sort by UNCode, descending order",
                                "value": "UNCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Port fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Port",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ports",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Port",
                        "examples": {
                            "Filter by UNCode, in operator": {
                                "description": "Filter by UNCode, in operator",
                                "value": "UNCode,IN,A,B,C"
                            },
                            "Filter by UNCode, not in operator": {
                                "description": "Filter by UNCode, not in operator",
                                "value": "UNCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Ports. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Ports in json format. This action requires the caller entitled to view Ports",
                "tags": [
                    "/Port"
                ]
            },
            "post": {
                "description": "Creates a new  Port.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are TimeZone,Country,GeoZoneNumber,Name.\n For possible entity Fields, refer to the schema section for Port. This action requires the caller entitled to create Ports",
                "operationId": "createEntityPort",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Port. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Port. The response body would contain the created Port",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Port. This action requires the caller entitled to create Ports",
                "tags": [
                    "/Port"
                ]
            }
        },
        "/Port/{Id}": {
            "delete": {
                "description": "Deletes a existing Port.\n. This action is subject to caller is entitled to delete Ports",
                "operationId": "deleteEntitySpecificPort",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Port"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Port subject to caller is entitled to delete Ports",
                "tags": [
                    "/Port/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificPort",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port field. For possible fields, refer to the schema section for Port",
                        "examples": {
                            "Sort by UNCode, ascending order": {
                                "description": "Sort by UNCode, ascending order",
                                "value": "UNCode:ASC"
                            },
                            "Sort by UNCode, descending order": {
                                "description": "Sort by UNCode, descending order",
                                "value": "UNCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Port fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Port",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ports",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Port",
                        "examples": {
                            "Filter by UNCode, in operator": {
                                "description": "Filter by UNCode, in operator",
                                "value": "UNCode,IN,A,B,C"
                            },
                            "Filter by UNCode, not in operator": {
                                "description": "Filter by UNCode, not in operator",
                                "value": "UNCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Port. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Port in json format. This action requires the caller entitled to view Ports",
                "tags": [
                    "/Port/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Port.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are TimeZone,Country,GeoZoneNumber,Name.\n For possible entity Fields, refer to the schema section for Port in json format, subject to caller is entitled to edit Ports",
                "operationId": "updateEntitySpecificPort",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Port. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Port. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Port subject to caller is entitled to edit Ports",
                "tags": [
                    "/Port/{Id}"
                ]
            }
        },
        "/Port/{Id}/AlternativeNames": {
            "get": {
                "operationId": "getEntityPortAlternativePortName",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Alternative port name field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AlternativePortName",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Alternative port names",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Alternative port name fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AlternativePortName",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Alternative port name field. For possible fields, refer to the schema section for AlternativePortName",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.AlternativePortName"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Alternative port names belonging to the parent Port. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Alternative port names belonging to the parent Port in json format. This action requires the caller entitled to view Alternative port names",
                "tags": [
                    "/Port/{Id}/AlternativeNames"
                ]
            },
            "post": {
                "description": "Creates a new  Alternative port name.\nAlternative port name is a sub-entity of  Port The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for AlternativePortName. This action requires the caller entitled to create Alternative port names",
                "operationId": "createEntityPortAlternativePortName",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port.AlternativePortName"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Alternative port name",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.AlternativePortName"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Alternative port name for the parent Port. The response body would contain the created Alternative port name",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Alternative port name belonging to Port. This action requires the caller entitled to create Alternative port names",
                "tags": [
                    "/Port/{Id}/AlternativeNames"
                ]
            }
        },
        "/Port/{Id}/AlternativeNames/{AlternativeNamesId}": {
            "delete": {
                "description": "Deletes a existing Alternative port name.\nAlternative port name is a sub-entity of Port. This action is subject to caller is entitled to delete Alternative port names",
                "operationId": "deleteEntitySpecificPortAlternativePortName",
                "parameters": [
                    {
                        "description": "Id of Alternative port name",
                        "in": "path",
                        "name": "AlternativeNamesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Alternative port name belonging to the parent Port"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Alternative port name belonging to Port subject to caller is entitled to delete Alternative port names",
                "tags": [
                    "/Port/{Id}/AlternativeNames/{AlternativeNamesId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificPortAlternativePortName",
                "parameters": [
                    {
                        "description": "Id of Alternative port name",
                        "in": "path",
                        "name": "AlternativeNamesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Alternative port name field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for AlternativePortName",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Alternative port names",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Alternative port name fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for AlternativePortName",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Alternative port name field. For possible fields, refer to the schema section for AlternativePortName",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.AlternativePortName"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Alternative port name belonging to the parent Port. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Alternative port name belonging to the parent Port in json format. This action requires the caller entitled to view Alternative port names",
                "tags": [
                    "/Port/{Id}/AlternativeNames/{AlternativeNamesId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Alternative port name.\nAlternative port name is a sub-entity of Port The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for AlternativePortName in json format, subject to caller is entitled to edit Alternative port names",
                "operationId": "updateEntitySpecificPortAlternativePortName",
                "parameters": [
                    {
                        "description": "Id of Alternative port name",
                        "in": "path",
                        "name": "AlternativeNamesId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port.AlternativePortName"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Alternative port name",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.AlternativePortName"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Alternative port name belonging to the parent Port. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Alternative port name belonging to Port subject to caller is entitled to edit Alternative port names",
                "tags": [
                    "/Port/{Id}/AlternativeNames/{AlternativeNamesId}"
                ]
            }
        },
        "/Port/{Id}/Terminals": {
            "get": {
                "operationId": "getEntityPortPortTerminal",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Port terminal fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for PortTerminal",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port terminal field. For possible fields, refer to the schema section for PortTerminal",
                        "examples": {
                            "Sort by Restrictions, ascending order": {
                                "description": "Sort by Restrictions, ascending order",
                                "value": "Restrictions:ASC"
                            },
                            "Sort by Restrictions, descending order": {
                                "description": "Sort by Restrictions, descending order",
                                "value": "Restrictions:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Port terminals",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port terminal field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for PortTerminal",
                        "examples": {
                            "Filter by Restrictions, in operator": {
                                "description": "Filter by Restrictions, in operator",
                                "value": "Restrictions,IN,A,B,C"
                            },
                            "Filter by Restrictions, not in operator": {
                                "description": "Filter by Restrictions, not in operator",
                                "value": "Restrictions,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.PortTerminal"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Port terminals belonging to the parent Port. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Port terminals belonging to the parent Port in json format. This action requires the caller entitled to view Port terminals",
                "tags": [
                    "/Port/{Id}/Terminals"
                ]
            },
            "post": {
                "description": "Creates a new  Port terminal.\nPort terminal is a sub-entity of  Port The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for PortTerminal. This action requires the caller entitled to create Port terminals",
                "operationId": "createEntityPortPortTerminal",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port.PortTerminal"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Port terminal",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.PortTerminal"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Port terminal for the parent Port. The response body would contain the created Port terminal",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Port terminal belonging to Port. This action requires the caller entitled to create Port terminals",
                "tags": [
                    "/Port/{Id}/Terminals"
                ]
            }
        },
        "/Port/{Id}/Terminals/{TerminalsId}": {
            "delete": {
                "description": "Deletes a existing Port terminal.\nPort terminal is a sub-entity of Port. This action is subject to caller is entitled to delete Port terminals",
                "operationId": "deleteEntitySpecificPortPortTerminal",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port terminal",
                        "in": "path",
                        "name": "TerminalsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Port terminal belonging to the parent Port"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Port terminal belonging to Port subject to caller is entitled to delete Port terminals",
                "tags": [
                    "/Port/{Id}/Terminals/{TerminalsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificPortPortTerminal",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port terminal",
                        "in": "path",
                        "name": "TerminalsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Port terminal fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for PortTerminal",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port terminal field. For possible fields, refer to the schema section for PortTerminal",
                        "examples": {
                            "Sort by Restrictions, ascending order": {
                                "description": "Sort by Restrictions, ascending order",
                                "value": "Restrictions:ASC"
                            },
                            "Sort by Restrictions, descending order": {
                                "description": "Sort by Restrictions, descending order",
                                "value": "Restrictions:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Port terminals",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port terminal field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for PortTerminal",
                        "examples": {
                            "Filter by Restrictions, in operator": {
                                "description": "Filter by Restrictions, in operator",
                                "value": "Restrictions,IN,A,B,C"
                            },
                            "Filter by Restrictions, not in operator": {
                                "description": "Filter by Restrictions, not in operator",
                                "value": "Restrictions,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.PortTerminal"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Port terminal belonging to the parent Port. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Port terminal belonging to the parent Port in json format. This action requires the caller entitled to view Port terminals",
                "tags": [
                    "/Port/{Id}/Terminals/{TerminalsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Port terminal.\nPort terminal is a sub-entity of Port The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for PortTerminal in json format, subject to caller is entitled to edit Port terminals",
                "operationId": "updateEntitySpecificPortPortTerminal",
                "parameters": [
                    {
                        "description": "Id of Port",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Port terminal",
                        "in": "path",
                        "name": "TerminalsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Port.PortTerminal"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Port terminal",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Port.PortTerminal"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Port terminal belonging to the parent Port. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Port terminal belonging to Port subject to caller is entitled to edit Port terminals",
                "tags": [
                    "/Port/{Id}/Terminals/{TerminalsId}"
                ]
            }
        },
        "/SalesRep": {
            "get": {
                "operationId": "getEntitySalesRep",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative field. For possible fields, refer to the schema section for SalesRep",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Sales representative fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SalesRep",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SalesRep",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Sales representatives",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRep"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Sales representatives. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Sales representatives in json format. This action requires the caller entitled to view Sales representatives",
                "tags": [
                    "/SalesRep"
                ]
            },
            "post": {
                "description": "Creates a new  Sales representative.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for SalesRep. This action requires the caller entitled to create Sales representatives",
                "operationId": "createEntitySalesRep",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SalesRep"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Sales representative",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRep"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Sales representative. The response body would contain the created Sales representative",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Sales representative. This action requires the caller entitled to create Sales representatives",
                "tags": [
                    "/SalesRep"
                ]
            }
        },
        "/SalesRep/{Id}": {
            "delete": {
                "description": "Deletes a existing Sales representative.\n. This action is subject to caller is entitled to delete Sales representatives",
                "operationId": "deleteEntitySpecificSalesRep",
                "parameters": [
                    {
                        "description": "Id of Sales representative",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Sales representative"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Sales representative subject to caller is entitled to delete Sales representatives",
                "tags": [
                    "/SalesRep/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificSalesRep",
                "parameters": [
                    {
                        "description": "Id of Sales representative",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative field. For possible fields, refer to the schema section for SalesRep",
                        "examples": {
                            "Sort by Phone, ascending order": {
                                "description": "Sort by Phone, ascending order",
                                "value": "Phone:ASC"
                            },
                            "Sort by Phone, descending order": {
                                "description": "Sort by Phone, descending order",
                                "value": "Phone:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Sales representative fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SalesRep",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SalesRep",
                        "examples": {
                            "Filter by Phone, in operator": {
                                "description": "Filter by Phone, in operator",
                                "value": "Phone,IN,A,B,C"
                            },
                            "Filter by Phone, not in operator": {
                                "description": "Filter by Phone, not in operator",
                                "value": "Phone,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Sales representatives",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRep"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Sales representative. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Sales representative in json format. This action requires the caller entitled to view Sales representatives",
                "tags": [
                    "/SalesRep/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Sales representative.\n The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for SalesRep in json format, subject to caller is entitled to edit Sales representatives",
                "operationId": "updateEntitySpecificSalesRep",
                "parameters": [
                    {
                        "description": "Id of Sales representative",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SalesRep"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Sales representative",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRep"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Sales representative. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Sales representative subject to caller is entitled to edit Sales representatives",
                "tags": [
                    "/SalesRep/{Id}"
                ]
            }
        },
        "/SalesRepGroup": {
            "get": {
                "operationId": "getEntitySalesRepGroup",
                "parameters": [
                    {
                        "description": "Comma separated list of Sales representative group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SalesRepGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SalesRepGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative group field. For possible fields, refer to the schema section for SalesRepGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Sales representative groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRepGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Sales representative groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Sales representative groups in json format. This action requires the caller entitled to view Sales representative groups",
                "tags": [
                    "/SalesRepGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Sales representative group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for SalesRepGroup. This action requires the caller entitled to create Sales representative groups",
                "operationId": "createEntitySalesRepGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SalesRepGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Sales representative group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRepGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Sales representative group. The response body would contain the created Sales representative group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Sales representative group. This action requires the caller entitled to create Sales representative groups",
                "tags": [
                    "/SalesRepGroup"
                ]
            }
        },
        "/SalesRepGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Sales representative group.\n. This action is subject to caller is entitled to delete Sales representative groups",
                "operationId": "deleteEntitySpecificSalesRepGroup",
                "parameters": [
                    {
                        "description": "Id of Sales representative group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Sales representative group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Sales representative group subject to caller is entitled to delete Sales representative groups",
                "tags": [
                    "/SalesRepGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificSalesRepGroup",
                "parameters": [
                    {
                        "description": "Id of Sales representative group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Sales representative group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SalesRepGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SalesRepGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative group field. For possible fields, refer to the schema section for SalesRepGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Sales representative groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRepGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Sales representative group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Sales representative group in json format. This action requires the caller entitled to view Sales representative groups",
                "tags": [
                    "/SalesRepGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Sales representative group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for SalesRepGroup in json format, subject to caller is entitled to edit Sales representative groups",
                "operationId": "updateEntitySpecificSalesRepGroup",
                "parameters": [
                    {
                        "description": "Id of Sales representative group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SalesRepGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Sales representative group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SalesRepGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Sales representative group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Sales representative group subject to caller is entitled to edit Sales representative groups",
                "tags": [
                    "/SalesRepGroup/{Id}"
                ]
            }
        },
        "/TaxCode": {
            "get": {
                "operationId": "getEntityTaxCode",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Tax code field. For possible fields, refer to the schema section for TaxCode",
                        "examples": {
                            "Sort by TaxCode, ascending order": {
                                "description": "Sort by TaxCode, ascending order",
                                "value": "TaxCode:ASC"
                            },
                            "Sort by TaxCode, descending order": {
                                "description": "Sort by TaxCode, descending order",
                                "value": "TaxCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Tax code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for TaxCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Tax code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for TaxCode",
                        "examples": {
                            "Filter by TaxCode, in operator": {
                                "description": "Filter by TaxCode, in operator",
                                "value": "TaxCode,IN,A,B,C"
                            },
                            "Filter by TaxCode, not in operator": {
                                "description": "Filter by TaxCode, not in operator",
                                "value": "TaxCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Tax codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaxCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Tax codes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Tax codes in json format. This action requires the caller entitled to view Tax codes",
                "tags": [
                    "/TaxCode"
                ]
            },
            "post": {
                "description": "Creates a new  Tax code.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are TaxCode,TaxRate,Name.\n For possible entity Fields, refer to the schema section for TaxCode. This action requires the caller entitled to create Tax codes",
                "operationId": "createEntityTaxCode",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Tax code",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaxCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Tax code. The response body would contain the created Tax code",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Tax code. This action requires the caller entitled to create Tax codes",
                "tags": [
                    "/TaxCode"
                ]
            }
        },
        "/TaxCode/{Id}": {
            "delete": {
                "description": "Deletes a existing Tax code.\n. This action is subject to caller is entitled to delete Tax codes",
                "operationId": "deleteEntitySpecificTaxCode",
                "parameters": [
                    {
                        "description": "Id of Tax code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Tax code"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Tax code subject to caller is entitled to delete Tax codes",
                "tags": [
                    "/TaxCode/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificTaxCode",
                "parameters": [
                    {
                        "description": "Id of Tax code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Tax code field. For possible fields, refer to the schema section for TaxCode",
                        "examples": {
                            "Sort by TaxCode, ascending order": {
                                "description": "Sort by TaxCode, ascending order",
                                "value": "TaxCode:ASC"
                            },
                            "Sort by TaxCode, descending order": {
                                "description": "Sort by TaxCode, descending order",
                                "value": "TaxCode:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Tax code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for TaxCode",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Tax code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for TaxCode",
                        "examples": {
                            "Filter by TaxCode, in operator": {
                                "description": "Filter by TaxCode, in operator",
                                "value": "TaxCode,IN,A,B,C"
                            },
                            "Filter by TaxCode, not in operator": {
                                "description": "Filter by TaxCode, not in operator",
                                "value": "TaxCode,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Tax codes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaxCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Tax code. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Tax code in json format. This action requires the caller entitled to view Tax codes",
                "tags": [
                    "/TaxCode/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Tax code.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are TaxCode,TaxRate,Name.\n For possible entity Fields, refer to the schema section for TaxCode in json format, subject to caller is entitled to edit Tax codes",
                "operationId": "updateEntitySpecificTaxCode",
                "parameters": [
                    {
                        "description": "Id of Tax code",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxCode"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Tax code",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaxCode"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Tax code. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Tax code subject to caller is entitled to edit Tax codes",
                "tags": [
                    "/TaxCode/{Id}"
                ]
            }
        },
        "/UnitOfMeasure": {
            "get": {
                "operationId": "getEntityUnitOfMeasure",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure field. For possible fields, refer to the schema section for UnitOfMeasure",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Unit of measures",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UnitOfMeasure",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Unit of measure fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UnitOfMeasure",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasure"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Unit of measures. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Unit of measures in json format. This action requires the caller entitled to view Unit of measures",
                "tags": [
                    "/UnitOfMeasure"
                ]
            },
            "post": {
                "description": "Creates a new  Unit of measure.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for UnitOfMeasure. This action requires the caller entitled to create Unit of measures",
                "operationId": "createEntityUnitOfMeasure",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnitOfMeasure"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Unit of measure",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasure"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Unit of measure. The response body would contain the created Unit of measure",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Unit of measure. This action requires the caller entitled to create Unit of measures",
                "tags": [
                    "/UnitOfMeasure"
                ]
            }
        },
        "/UnitOfMeasure/{Id}": {
            "delete": {
                "description": "Deletes a existing Unit of measure.\n. This action is subject to caller is entitled to delete Unit of measures",
                "operationId": "deleteEntitySpecificUnitOfMeasure",
                "parameters": [
                    {
                        "description": "Id of Unit of measure",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Unit of measure"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Unit of measure subject to caller is entitled to delete Unit of measures",
                "tags": [
                    "/UnitOfMeasure/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificUnitOfMeasure",
                "parameters": [
                    {
                        "description": "Id of Unit of measure",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure field. For possible fields, refer to the schema section for UnitOfMeasure",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Unit of measures",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UnitOfMeasure",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Unit of measure fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UnitOfMeasure",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasure"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Unit of measure. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Unit of measure in json format. This action requires the caller entitled to view Unit of measures",
                "tags": [
                    "/UnitOfMeasure/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Unit of measure.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for UnitOfMeasure in json format, subject to caller is entitled to edit Unit of measures",
                "operationId": "updateEntitySpecificUnitOfMeasure",
                "parameters": [
                    {
                        "description": "Id of Unit of measure",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnitOfMeasure"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Unit of measure",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasure"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Unit of measure. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Unit of measure subject to caller is entitled to edit Unit of measures",
                "tags": [
                    "/UnitOfMeasure/{Id}"
                ]
            }
        },
        "/UnitOfMeasureType": {
            "get": {
                "operationId": "getEntityUnitOfMeasureType",
                "parameters": [
                    {
                        "description": "Maximum number of returned Unit of measure types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure type field. For possible fields, refer to the schema section for UnitOfMeasureType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UnitOfMeasureType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Unit of measure type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UnitOfMeasureType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasureType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Unit of measure types. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Unit of measure types in json format. This action requires the caller entitled to view Unit of measure types",
                "tags": [
                    "/UnitOfMeasureType"
                ]
            },
            "post": {
                "description": "Creates a new  Unit of measure type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for UnitOfMeasureType. This action requires the caller entitled to create Unit of measure types",
                "operationId": "createEntityUnitOfMeasureType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnitOfMeasureType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Unit of measure type",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasureType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Unit of measure type. The response body would contain the created Unit of measure type",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Unit of measure type. This action requires the caller entitled to create Unit of measure types",
                "tags": [
                    "/UnitOfMeasureType"
                ]
            }
        },
        "/UnitOfMeasureType/{Id}": {
            "delete": {
                "description": "Deletes a existing Unit of measure type.\n. This action is subject to caller is entitled to delete Unit of measure types",
                "operationId": "deleteEntitySpecificUnitOfMeasureType",
                "parameters": [
                    {
                        "description": "Id of Unit of measure type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Unit of measure type"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Unit of measure type subject to caller is entitled to delete Unit of measure types",
                "tags": [
                    "/UnitOfMeasureType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificUnitOfMeasureType",
                "parameters": [
                    {
                        "description": "Id of Unit of measure type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Unit of measure types",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure type field. For possible fields, refer to the schema section for UnitOfMeasureType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for UnitOfMeasureType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Unit of measure type fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for UnitOfMeasureType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasureType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Unit of measure type. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Unit of measure type in json format. This action requires the caller entitled to view Unit of measure types",
                "tags": [
                    "/UnitOfMeasureType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Unit of measure type.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for UnitOfMeasureType in json format, subject to caller is entitled to edit Unit of measure types",
                "operationId": "updateEntitySpecificUnitOfMeasureType",
                "parameters": [
                    {
                        "description": "Id of Unit of measure type",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnitOfMeasureType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Unit of measure type",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UnitOfMeasureType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Unit of measure type. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Unit of measure type subject to caller is entitled to edit Unit of measure types",
                "tags": [
                    "/UnitOfMeasureType/{Id}"
                ]
            }
        },
        "/Vessel": {
            "get": {
                "operationId": "getEntityVessel",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Vessel",
                        "examples": {
                            "Filter by ShipBuilder, in operator": {
                                "description": "Filter by ShipBuilder, in operator",
                                "value": "ShipBuilder,IN,A,B,C"
                            },
                            "Filter by ShipBuilder, not in operator": {
                                "description": "Filter by ShipBuilder, not in operator",
                                "value": "ShipBuilder,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Vessel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel field. For possible fields, refer to the schema section for Vessel",
                        "examples": {
                            "Sort by ShipBuilder, ascending order": {
                                "description": "Sort by ShipBuilder, ascending order",
                                "value": "ShipBuilder:ASC"
                            },
                            "Sort by ShipBuilder, descending order": {
                                "description": "Sort by ShipBuilder, descending order",
                                "value": "ShipBuilder:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessels. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessels in json format. This action requires the caller entitled to view Vessels",
                "tags": [
                    "/Vessel"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Vessel. This action requires the caller entitled to create Vessels",
                "operationId": "createEntityVessel",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel. The response body would contain the created Vessel",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel. This action requires the caller entitled to create Vessels",
                "tags": [
                    "/Vessel"
                ]
            }
        },
        "/Vessel/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel.\n. This action is subject to caller is entitled to delete Vessels",
                "operationId": "deleteEntitySpecificVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel subject to caller is entitled to delete Vessels",
                "tags": [
                    "/Vessel/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Vessel",
                        "examples": {
                            "Filter by ShipBuilder, in operator": {
                                "description": "Filter by ShipBuilder, in operator",
                                "value": "ShipBuilder,IN,A,B,C"
                            },
                            "Filter by ShipBuilder, not in operator": {
                                "description": "Filter by ShipBuilder, not in operator",
                                "value": "ShipBuilder,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Vessel",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessels",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel field. For possible fields, refer to the schema section for Vessel",
                        "examples": {
                            "Sort by ShipBuilder, ascending order": {
                                "description": "Sort by ShipBuilder, ascending order",
                                "value": "ShipBuilder:ASC"
                            },
                            "Sort by ShipBuilder, descending order": {
                                "description": "Sort by ShipBuilder, descending order",
                                "value": "ShipBuilder:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel in json format. This action requires the caller entitled to view Vessels",
                "tags": [
                    "/Vessel/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Vessel in json format, subject to caller is entitled to edit Vessels",
                "operationId": "updateEntitySpecificVessel",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel. Any subentity field (if any) would be ignored.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel subject to caller is entitled to edit Vessels",
                "tags": [
                    "/Vessel/{Id}"
                ]
            }
        },
        "/Vessel/{Id}/AuxiliaryConsumptions": {
            "get": {
                "operationId": "getEntityVesselVesselAuxiliaryConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel auxiliary consumption fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselAuxiliaryConsumption",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel auxiliary consumptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel auxiliary consumption field. For possible fields, refer to the schema section for VesselAuxiliaryConsumption",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel auxiliary consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselAuxiliaryConsumption",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel auxiliary consumptions belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel auxiliary consumptions belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel auxiliary consumptions",
                "tags": [
                    "/Vessel/{Id}/AuxiliaryConsumptions"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel auxiliary consumption.\nVessel auxiliary consumption is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is EngineType.\n For possible entity Fields, refer to the schema section for VesselAuxiliaryConsumption. This action requires the caller entitled to create Vessel auxiliary consumptions",
                "operationId": "createEntityVesselVesselAuxiliaryConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel auxiliary consumption",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel auxiliary consumption for the parent Vessel. The response body would contain the created Vessel auxiliary consumption",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel auxiliary consumption belonging to Vessel. This action requires the caller entitled to create Vessel auxiliary consumptions",
                "tags": [
                    "/Vessel/{Id}/AuxiliaryConsumptions"
                ]
            }
        },
        "/Vessel/{Id}/AuxiliaryConsumptions/{AuxiliaryConsumptionsId}": {
            "delete": {
                "description": "Deletes a existing Vessel auxiliary consumption.\nVessel auxiliary consumption is a sub-entity of Vessel. This action is subject to caller is entitled to delete Vessel auxiliary consumptions",
                "operationId": "deleteEntitySpecificVesselVesselAuxiliaryConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel auxiliary consumption",
                        "in": "path",
                        "name": "AuxiliaryConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel auxiliary consumption belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel auxiliary consumption belonging to Vessel subject to caller is entitled to delete Vessel auxiliary consumptions",
                "tags": [
                    "/Vessel/{Id}/AuxiliaryConsumptions/{AuxiliaryConsumptionsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselVesselAuxiliaryConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel auxiliary consumption",
                        "in": "path",
                        "name": "AuxiliaryConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel auxiliary consumption fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselAuxiliaryConsumption",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel auxiliary consumptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel auxiliary consumption field. For possible fields, refer to the schema section for VesselAuxiliaryConsumption",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel auxiliary consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselAuxiliaryConsumption",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel auxiliary consumption belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel auxiliary consumption belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel auxiliary consumptions",
                "tags": [
                    "/Vessel/{Id}/AuxiliaryConsumptions/{AuxiliaryConsumptionsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel auxiliary consumption.\nVessel auxiliary consumption is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is EngineType.\n For possible entity Fields, refer to the schema section for VesselAuxiliaryConsumption in json format, subject to caller is entitled to edit Vessel auxiliary consumptions",
                "operationId": "updateEntitySpecificVesselVesselAuxiliaryConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel auxiliary consumption",
                        "in": "path",
                        "name": "AuxiliaryConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel auxiliary consumption",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselAuxiliaryConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel auxiliary consumption belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel auxiliary consumption belonging to Vessel subject to caller is entitled to edit Vessel auxiliary consumptions",
                "tags": [
                    "/Vessel/{Id}/AuxiliaryConsumptions/{AuxiliaryConsumptionsId}"
                ]
            }
        },
        "/Vessel/{Id}/BunkerTanks": {
            "get": {
                "operationId": "getEntityVesselBunkerTank",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bunker tanks",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker tank field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerTank",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker tank field. For possible fields, refer to the schema section for BunkerTank",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker tank fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerTank",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.BunkerTank"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Bunker tanks belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Bunker tanks belonging to the parent Vessel in json format. This action requires the caller entitled to view Bunker tanks",
                "tags": [
                    "/Vessel/{Id}/BunkerTanks"
                ]
            },
            "post": {
                "description": "Creates a new  Bunker tank.\nBunker tank is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for BunkerTank. This action requires the caller entitled to create Bunker tanks",
                "operationId": "createEntityVesselBunkerTank",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.BunkerTank"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Bunker tank",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.BunkerTank"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Bunker tank for the parent Vessel. The response body would contain the created Bunker tank",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Bunker tank belonging to Vessel. This action requires the caller entitled to create Bunker tanks",
                "tags": [
                    "/Vessel/{Id}/BunkerTanks"
                ]
            }
        },
        "/Vessel/{Id}/BunkerTanks/{BunkerTanksId}": {
            "delete": {
                "description": "Deletes a existing Bunker tank.\nBunker tank is a sub-entity of Vessel. This action is subject to caller is entitled to delete Bunker tanks",
                "operationId": "deleteEntitySpecificVesselBunkerTank",
                "parameters": [
                    {
                        "description": "Id of Bunker tank",
                        "in": "path",
                        "name": "BunkerTanksId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Bunker tank belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Bunker tank belonging to Vessel subject to caller is entitled to delete Bunker tanks",
                "tags": [
                    "/Vessel/{Id}/BunkerTanks/{BunkerTanksId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselBunkerTank",
                "parameters": [
                    {
                        "description": "Id of Bunker tank",
                        "in": "path",
                        "name": "BunkerTanksId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Bunker tanks",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker tank field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BunkerTank",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker tank field. For possible fields, refer to the schema section for BunkerTank",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Bunker tank fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BunkerTank",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.BunkerTank"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Bunker tank belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Bunker tank belonging to the parent Vessel in json format. This action requires the caller entitled to view Bunker tanks",
                "tags": [
                    "/Vessel/{Id}/BunkerTanks/{BunkerTanksId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Bunker tank.\nBunker tank is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for BunkerTank in json format, subject to caller is entitled to edit Bunker tanks",
                "operationId": "updateEntitySpecificVesselBunkerTank",
                "parameters": [
                    {
                        "description": "Id of Bunker tank",
                        "in": "path",
                        "name": "BunkerTanksId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.BunkerTank"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Bunker tank",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.BunkerTank"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Bunker tank belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Bunker tank belonging to Vessel subject to caller is entitled to edit Bunker tanks",
                "tags": [
                    "/Vessel/{Id}/BunkerTanks/{BunkerTanksId}"
                ]
            }
        },
        "/Vessel/{Id}/Emissions": {
            "get": {
                "operationId": "getEntityVesselEmission",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Emissions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Emission field. For possible fields, refer to the schema section for Emission",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Emission field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Emission",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Emission fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Emission",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Emission"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Emissions belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Emissions belonging to the parent Vessel in json format. This action requires the caller entitled to view Emissions",
                "tags": [
                    "/Vessel/{Id}/Emissions"
                ]
            },
            "post": {
                "description": "Creates a new  Emission.\nEmission is a sub-entity of  VesselFields required for creation is Year.\n For possible entity Fields, refer to the schema section for Emission. This action requires the caller entitled to create Emissions",
                "operationId": "createEntityVesselEmission",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Emission"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Emission",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Emission"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Emission for the parent Vessel. The response body would contain the created Emission",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Emission belonging to Vessel. This action requires the caller entitled to create Emissions",
                "tags": [
                    "/Vessel/{Id}/Emissions"
                ]
            }
        },
        "/Vessel/{Id}/Emissions/{EmissionsId}": {
            "delete": {
                "description": "Deletes a existing Emission.\nEmission is a sub-entity of Vessel. This action is subject to caller is entitled to delete Emissions",
                "operationId": "deleteEntitySpecificVesselEmission",
                "parameters": [
                    {
                        "description": "Id of Emission",
                        "in": "path",
                        "name": "EmissionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Emission belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Emission belonging to Vessel subject to caller is entitled to delete Emissions",
                "tags": [
                    "/Vessel/{Id}/Emissions/{EmissionsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselEmission",
                "parameters": [
                    {
                        "description": "Id of Emission",
                        "in": "path",
                        "name": "EmissionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Emissions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Emission field. For possible fields, refer to the schema section for Emission",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Emission field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Emission",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Emission fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Emission",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Emission"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Emission belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Emission belonging to the parent Vessel in json format. This action requires the caller entitled to view Emissions",
                "tags": [
                    "/Vessel/{Id}/Emissions/{EmissionsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Emission.\nEmission is a sub-entity of VesselFields required to be passed while editing is Year.\n For possible entity Fields, refer to the schema section for Emission in json format, subject to caller is entitled to edit Emissions",
                "operationId": "updateEntitySpecificVesselEmission",
                "parameters": [
                    {
                        "description": "Id of Emission",
                        "in": "path",
                        "name": "EmissionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Emission"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Emission",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Emission"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Emission belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Emission belonging to Vessel subject to caller is entitled to edit Emissions",
                "tags": [
                    "/Vessel/{Id}/Emissions/{EmissionsId}"
                ]
            }
        },
        "/Vessel/{Id}/Holds": {
            "get": {
                "operationId": "getEntityVesselHold",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Hold field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Hold",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Holds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Hold fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Hold",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Hold field. For possible fields, refer to the schema section for Hold",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Hold"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Holds belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Holds belonging to the parent Vessel in json format. This action requires the caller entitled to view Holds",
                "tags": [
                    "/Vessel/{Id}/Holds"
                ]
            },
            "post": {
                "description": "Creates a new  Hold.\nHold is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for Hold. This action requires the caller entitled to create Holds",
                "operationId": "createEntityVesselHold",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Hold"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Hold",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Hold"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Hold for the parent Vessel. The response body would contain the created Hold",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Hold belonging to Vessel. This action requires the caller entitled to create Holds",
                "tags": [
                    "/Vessel/{Id}/Holds"
                ]
            }
        },
        "/Vessel/{Id}/Holds/{HoldsId}": {
            "delete": {
                "description": "Deletes a existing Hold.\nHold is a sub-entity of Vessel. This action is subject to caller is entitled to delete Holds",
                "operationId": "deleteEntitySpecificVesselHold",
                "parameters": [
                    {
                        "description": "Id of Hold",
                        "in": "path",
                        "name": "HoldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Hold belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Hold belonging to Vessel subject to caller is entitled to delete Holds",
                "tags": [
                    "/Vessel/{Id}/Holds/{HoldsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselHold",
                "parameters": [
                    {
                        "description": "Id of Hold",
                        "in": "path",
                        "name": "HoldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Hold field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Hold",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Holds",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Hold fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Hold",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Hold field. For possible fields, refer to the schema section for Hold",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Hold"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Hold belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Hold belonging to the parent Vessel in json format. This action requires the caller entitled to view Holds",
                "tags": [
                    "/Vessel/{Id}/Holds/{HoldsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Hold.\nHold is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for Hold in json format, subject to caller is entitled to edit Holds",
                "operationId": "updateEntitySpecificVesselHold",
                "parameters": [
                    {
                        "description": "Id of Hold",
                        "in": "path",
                        "name": "HoldsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Hold"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Hold",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Hold"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Hold belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Hold belonging to Vessel subject to caller is entitled to edit Holds",
                "tags": [
                    "/Vessel/{Id}/Holds/{HoldsId}"
                ]
            }
        },
        "/Vessel/{Id}/NameHistory": {
            "get": {
                "operationId": "getEntityVesselVesselNameOwnershipHistory",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel history field. For possible fields, refer to the schema section for VesselNameOwnershipHistory",
                        "examples": {
                            "Sort by RegisteredOwner, ascending order": {
                                "description": "Sort by RegisteredOwner, ascending order",
                                "value": "RegisteredOwner:ASC"
                            },
                            "Sort by RegisteredOwner, descending order": {
                                "description": "Sort by RegisteredOwner, descending order",
                                "value": "RegisteredOwner:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel histories",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel history field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselNameOwnershipHistory",
                        "examples": {
                            "Filter by RegisteredOwner, in operator": {
                                "description": "Filter by RegisteredOwner, in operator",
                                "value": "RegisteredOwner,IN,A,B,C"
                            },
                            "Filter by RegisteredOwner, not in operator": {
                                "description": "Filter by RegisteredOwner, not in operator",
                                "value": "RegisteredOwner,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel history fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselNameOwnershipHistory",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel histories belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel histories belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel histories",
                "tags": [
                    "/Vessel/{Id}/NameHistory"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel history.\nVessel history is a sub-entity of  VesselFields required for creation is Name.\n For possible entity Fields, refer to the schema section for VesselNameOwnershipHistory. This action requires the caller entitled to create Vessel histories",
                "operationId": "createEntityVesselVesselNameOwnershipHistory",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel history",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel history for the parent Vessel. The response body would contain the created Vessel history",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel history belonging to Vessel. This action requires the caller entitled to create Vessel histories",
                "tags": [
                    "/Vessel/{Id}/NameHistory"
                ]
            }
        },
        "/Vessel/{Id}/NameHistory/{NameHistoryId}": {
            "delete": {
                "description": "Deletes a existing Vessel history.\nVessel history is a sub-entity of Vessel. This action is subject to caller is entitled to delete Vessel histories",
                "operationId": "deleteEntitySpecificVesselVesselNameOwnershipHistory",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel history",
                        "in": "path",
                        "name": "NameHistoryId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel history belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel history belonging to Vessel subject to caller is entitled to delete Vessel histories",
                "tags": [
                    "/Vessel/{Id}/NameHistory/{NameHistoryId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselVesselNameOwnershipHistory",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel history",
                        "in": "path",
                        "name": "NameHistoryId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel history field. For possible fields, refer to the schema section for VesselNameOwnershipHistory",
                        "examples": {
                            "Sort by RegisteredOwner, ascending order": {
                                "description": "Sort by RegisteredOwner, ascending order",
                                "value": "RegisteredOwner:ASC"
                            },
                            "Sort by RegisteredOwner, descending order": {
                                "description": "Sort by RegisteredOwner, descending order",
                                "value": "RegisteredOwner:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel histories",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel history field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselNameOwnershipHistory",
                        "examples": {
                            "Filter by RegisteredOwner, in operator": {
                                "description": "Filter by RegisteredOwner, in operator",
                                "value": "RegisteredOwner,IN,A,B,C"
                            },
                            "Filter by RegisteredOwner, not in operator": {
                                "description": "Filter by RegisteredOwner, not in operator",
                                "value": "RegisteredOwner,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel history fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselNameOwnershipHistory",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel history belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel history belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel histories",
                "tags": [
                    "/Vessel/{Id}/NameHistory/{NameHistoryId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel history.\nVessel history is a sub-entity of VesselFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for VesselNameOwnershipHistory in json format, subject to caller is entitled to edit Vessel histories",
                "operationId": "updateEntitySpecificVesselVesselNameOwnershipHistory",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel history",
                        "in": "path",
                        "name": "NameHistoryId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel history",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselNameOwnershipHistory"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel history belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel history belonging to Vessel subject to caller is entitled to edit Vessel histories",
                "tags": [
                    "/Vessel/{Id}/NameHistory/{NameHistoryId}"
                ]
            }
        },
        "/Vessel/{Id}/ShipsGears": {
            "get": {
                "operationId": "getEntityVesselShipsGear",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ships gear field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ShipsGear",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ships gear field. For possible fields, refer to the schema section for ShipsGear",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ships gears",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ships gear fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ShipsGear",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.ShipsGear"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Ships gears belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Ships gears belonging to the parent Vessel in json format. This action requires the caller entitled to view Ships gears",
                "tags": [
                    "/Vessel/{Id}/ShipsGears"
                ]
            },
            "post": {
                "description": "Creates a new  Ships gear.\nShips gear is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for ShipsGear. This action requires the caller entitled to create Ships gears",
                "operationId": "createEntityVesselShipsGear",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.ShipsGear"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Ships gear",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.ShipsGear"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Ships gear for the parent Vessel. The response body would contain the created Ships gear",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Ships gear belonging to Vessel. This action requires the caller entitled to create Ships gears",
                "tags": [
                    "/Vessel/{Id}/ShipsGears"
                ]
            }
        },
        "/Vessel/{Id}/ShipsGears/{ShipsGearsId}": {
            "delete": {
                "description": "Deletes a existing Ships gear.\nShips gear is a sub-entity of Vessel. This action is subject to caller is entitled to delete Ships gears",
                "operationId": "deleteEntitySpecificVesselShipsGear",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ships gear",
                        "in": "path",
                        "name": "ShipsGearsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Ships gear belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Ships gear belonging to Vessel subject to caller is entitled to delete Ships gears",
                "tags": [
                    "/Vessel/{Id}/ShipsGears/{ShipsGearsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselShipsGear",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ships gear",
                        "in": "path",
                        "name": "ShipsGearsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ships gear field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ShipsGear",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ships gear field. For possible fields, refer to the schema section for ShipsGear",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Ships gears",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Ships gear fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ShipsGear",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.ShipsGear"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Ships gear belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Ships gear belonging to the parent Vessel in json format. This action requires the caller entitled to view Ships gears",
                "tags": [
                    "/Vessel/{Id}/ShipsGears/{ShipsGearsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Ships gear.\nShips gear is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for ShipsGear in json format, subject to caller is entitled to edit Ships gears",
                "operationId": "updateEntitySpecificVesselShipsGear",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Ships gear",
                        "in": "path",
                        "name": "ShipsGearsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.ShipsGear"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Ships gear",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.ShipsGear"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Ships gear belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Ships gear belonging to Vessel subject to caller is entitled to edit Ships gears",
                "tags": [
                    "/Vessel/{Id}/ShipsGears/{ShipsGearsId}"
                ]
            }
        },
        "/Vessel/{Id}/SpeedAndConsumptions": {
            "get": {
                "operationId": "getEntityVesselVesselSpeedAndConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel speed and consumptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel speed and consumption fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSpeedAndConsumption",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed and consumption field. For possible fields, refer to the schema section for VesselSpeedAndConsumption",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed and consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSpeedAndConsumption",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel speed and consumptions belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel speed and consumptions belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel speed and consumptions",
                "tags": [
                    "/Vessel/{Id}/SpeedAndConsumptions"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel speed and consumption.\nVessel speed and consumption is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for VesselSpeedAndConsumption. This action requires the caller entitled to create Vessel speed and consumptions",
                "operationId": "createEntityVesselVesselSpeedAndConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel speed and consumption",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel speed and consumption for the parent Vessel. The response body would contain the created Vessel speed and consumption",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel speed and consumption belonging to Vessel. This action requires the caller entitled to create Vessel speed and consumptions",
                "tags": [
                    "/Vessel/{Id}/SpeedAndConsumptions"
                ]
            }
        },
        "/Vessel/{Id}/SpeedAndConsumptions/{SpeedAndConsumptionsId}": {
            "delete": {
                "description": "Deletes a existing Vessel speed and consumption.\nVessel speed and consumption is a sub-entity of Vessel. This action is subject to caller is entitled to delete Vessel speed and consumptions",
                "operationId": "deleteEntitySpecificVesselVesselSpeedAndConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel speed and consumption",
                        "in": "path",
                        "name": "SpeedAndConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel speed and consumption belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel speed and consumption belonging to Vessel subject to caller is entitled to delete Vessel speed and consumptions",
                "tags": [
                    "/Vessel/{Id}/SpeedAndConsumptions/{SpeedAndConsumptionsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselVesselSpeedAndConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel speed and consumption",
                        "in": "path",
                        "name": "SpeedAndConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel speed and consumptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel speed and consumption fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSpeedAndConsumption",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed and consumption field. For possible fields, refer to the schema section for VesselSpeedAndConsumption",
                        "examples": {
                            "Sort by Id, ascending order": {
                                "description": "Sort by Id, ascending order",
                                "value": "Id:ASC"
                            },
                            "Sort by Id, descending order": {
                                "description": "Sort by Id, descending order",
                                "value": "Id:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed and consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSpeedAndConsumption",
                        "examples": {
                            "Filter by Id, in operator": {
                                "description": "Filter by Id, in operator",
                                "value": "Id,IN,A,B,C"
                            },
                            "Filter by Id, not in operator": {
                                "description": "Filter by Id, not in operator",
                                "value": "Id,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel speed and consumption belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel speed and consumption belonging to the parent Vessel in json format. This action requires the caller entitled to view Vessel speed and consumptions",
                "tags": [
                    "/Vessel/{Id}/SpeedAndConsumptions/{SpeedAndConsumptionsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel speed and consumption.\nVessel speed and consumption is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for VesselSpeedAndConsumption in json format, subject to caller is entitled to edit Vessel speed and consumptions",
                "operationId": "updateEntitySpecificVesselVesselSpeedAndConsumption",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vessel speed and consumption",
                        "in": "path",
                        "name": "SpeedAndConsumptionsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel speed and consumption",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.VesselSpeedAndConsumption"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel speed and consumption belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel speed and consumption belonging to Vessel subject to caller is entitled to edit Vessel speed and consumptions",
                "tags": [
                    "/Vessel/{Id}/SpeedAndConsumptions/{SpeedAndConsumptionsId}"
                ]
            }
        },
        "/Vessel/{Id}/Vettings": {
            "get": {
                "operationId": "getEntityVesselVetting",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vetting field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Vetting",
                        "examples": {
                            "Filter by Value, in operator": {
                                "description": "Filter by Value, in operator",
                                "value": "Value,IN,A,B,C"
                            },
                            "Filter by Value, not in operator": {
                                "description": "Filter by Value, not in operator",
                                "value": "Value,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vetting fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Vetting",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vetting field. For possible fields, refer to the schema section for Vetting",
                        "examples": {
                            "Sort by Value, ascending order": {
                                "description": "Sort by Value, ascending order",
                                "value": "Value:ASC"
                            },
                            "Sort by Value, descending order": {
                                "description": "Sort by Value, descending order",
                                "value": "Value:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vettings",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Vetting"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vettings belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vettings belonging to the parent Vessel in json format. This action requires the caller entitled to view Vettings",
                "tags": [
                    "/Vessel/{Id}/Vettings"
                ]
            },
            "post": {
                "description": "Creates a new  Vetting.\nVetting is a sub-entity of  Vessel The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Vetting. This action requires the caller entitled to create Vettings",
                "operationId": "createEntityVesselVetting",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Vetting"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vetting",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Vetting"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vetting for the parent Vessel. The response body would contain the created Vetting",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vetting belonging to Vessel. This action requires the caller entitled to create Vettings",
                "tags": [
                    "/Vessel/{Id}/Vettings"
                ]
            }
        },
        "/Vessel/{Id}/Vettings/{VettingsId}": {
            "delete": {
                "description": "Deletes a existing Vetting.\nVetting is a sub-entity of Vessel. This action is subject to caller is entitled to delete Vettings",
                "operationId": "deleteEntitySpecificVesselVetting",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vetting",
                        "in": "path",
                        "name": "VettingsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vetting belonging to the parent Vessel"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vetting belonging to Vessel subject to caller is entitled to delete Vettings",
                "tags": [
                    "/Vessel/{Id}/Vettings/{VettingsId}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselVetting",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vetting",
                        "in": "path",
                        "name": "VettingsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vetting field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Vetting",
                        "examples": {
                            "Filter by Value, in operator": {
                                "description": "Filter by Value, in operator",
                                "value": "Value,IN,A,B,C"
                            },
                            "Filter by Value, not in operator": {
                                "description": "Filter by Value, not in operator",
                                "value": "Value,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vetting fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Vetting",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vetting field. For possible fields, refer to the schema section for Vetting",
                        "examples": {
                            "Sort by Value, ascending order": {
                                "description": "Sort by Value, ascending order",
                                "value": "Value:ASC"
                            },
                            "Sort by Value, descending order": {
                                "description": "Sort by Value, descending order",
                                "value": "Value:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vettings",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Vetting"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vetting belonging to the parent Vessel. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vetting belonging to the parent Vessel in json format. This action requires the caller entitled to view Vettings",
                "tags": [
                    "/Vessel/{Id}/Vettings/{VettingsId}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vetting.\nVetting is a sub-entity of Vessel The Id property is optional, if not provided it will auto generate an Id.\n For possible entity Fields, refer to the schema section for Vetting in json format, subject to caller is entitled to edit Vettings",
                "operationId": "updateEntitySpecificVesselVetting",
                "parameters": [
                    {
                        "description": "Id of Vessel",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Id of Vetting",
                        "in": "path",
                        "name": "VettingsId",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vessel.Vetting"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vetting",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Vessel.Vetting"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vetting belonging to the parent Vessel. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vetting belonging to Vessel subject to caller is entitled to edit Vettings",
                "tags": [
                    "/Vessel/{Id}/Vettings/{VettingsId}"
                ]
            }
        },
        "/VesselClass": {
            "get": {
                "operationId": "getEntityVesselClass",
                "parameters": [
                    {
                        "description": "Comma separated list of Vessel class fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselClass",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel class field. For possible fields, refer to the schema section for VesselClass",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel classes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel class field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselClass",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselClass"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel classes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel classes in json format. This action requires the caller entitled to view Vessel classes",
                "tags": [
                    "/VesselClass"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel class.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are MinSize,MaxSize,Name.\n For possible entity Fields, refer to the schema section for VesselClass. This action requires the caller entitled to create Vessel classes",
                "operationId": "createEntityVesselClass",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselClass"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel class",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselClass"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel class. The response body would contain the created Vessel class",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel class. This action requires the caller entitled to create Vessel classes",
                "tags": [
                    "/VesselClass"
                ]
            }
        },
        "/VesselClass/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel class.\n. This action is subject to caller is entitled to delete Vessel classes",
                "operationId": "deleteEntitySpecificVesselClass",
                "parameters": [
                    {
                        "description": "Id of Vessel class",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel class"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel class subject to caller is entitled to delete Vessel classes",
                "tags": [
                    "/VesselClass/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselClass",
                "parameters": [
                    {
                        "description": "Id of Vessel class",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel class fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselClass",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel class field. For possible fields, refer to the schema section for VesselClass",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel classes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel class field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselClass",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselClass"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel class. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel class in json format. This action requires the caller entitled to view Vessel classes",
                "tags": [
                    "/VesselClass/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel class.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are MinSize,MaxSize,Name.\n For possible entity Fields, refer to the schema section for VesselClass in json format, subject to caller is entitled to edit Vessel classes",
                "operationId": "updateEntitySpecificVesselClass",
                "parameters": [
                    {
                        "description": "Id of Vessel class",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselClass"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel class",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselClass"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel class. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel class subject to caller is entitled to edit Vessel classes",
                "tags": [
                    "/VesselClass/{Id}"
                ]
            }
        },
        "/VesselGroup": {
            "get": {
                "operationId": "getEntityVesselGroup",
                "parameters": [
                    {
                        "description": "Maximum number of returned Vessel groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel group field. For possible fields, refer to the schema section for VesselGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel groups. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel groups in json format. This action requires the caller entitled to view Vessel groups",
                "tags": [
                    "/VesselGroup"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel group.\nFields required for creation is Id.\n For possible entity Fields, refer to the schema section for VesselGroup. This action requires the caller entitled to create Vessel groups",
                "operationId": "createEntityVesselGroup",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel group. The response body would contain the created Vessel group",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel group. This action requires the caller entitled to create Vessel groups",
                "tags": [
                    "/VesselGroup"
                ]
            }
        },
        "/VesselGroup/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel group.\n. This action is subject to caller is entitled to delete Vessel groups",
                "operationId": "deleteEntitySpecificVesselGroup",
                "parameters": [
                    {
                        "description": "Id of Vessel group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel group"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel group subject to caller is entitled to delete Vessel groups",
                "tags": [
                    "/VesselGroup/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselGroup",
                "parameters": [
                    {
                        "description": "Id of Vessel group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel groups",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel group fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselGroup",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselGroup",
                        "examples": {
                            "Filter by Rule, in operator": {
                                "description": "Filter by Rule, in operator",
                                "value": "Rule,IN,A,B,C"
                            },
                            "Filter by Rule, not in operator": {
                                "description": "Filter by Rule, not in operator",
                                "value": "Rule,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel group field. For possible fields, refer to the schema section for VesselGroup",
                        "examples": {
                            "Sort by Rule, ascending order": {
                                "description": "Sort by Rule, ascending order",
                                "value": "Rule:ASC"
                            },
                            "Sort by Rule, descending order": {
                                "description": "Sort by Rule, descending order",
                                "value": "Rule:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel group. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel group in json format. This action requires the caller entitled to view Vessel groups",
                "tags": [
                    "/VesselGroup/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel group.\nFields required to be passed while editing is Id.\n For possible entity Fields, refer to the schema section for VesselGroup in json format, subject to caller is entitled to edit Vessel groups",
                "operationId": "updateEntitySpecificVesselGroup",
                "parameters": [
                    {
                        "description": "Id of Vessel group",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselGroup"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel group",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselGroup"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel group. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel group subject to caller is entitled to edit Vessel groups",
                "tags": [
                    "/VesselGroup/{Id}"
                ]
            }
        },
        "/VesselReportingFact": {
            "get": {
                "operationId": "getEntityVesselReportingFact",
                "parameters": [
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel reporting fact field. For possible fields, refer to the schema section for VesselReportingFact",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel reporting fact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselReportingFact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel reporting fact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselReportingFact",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel reporting facts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselReportingFact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel reporting facts. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel reporting facts in json format. This action requires the caller entitled to view Vessel reporting facts",
                "tags": [
                    "/VesselReportingFact"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel reporting fact.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are DataType,Name.\n For possible entity Fields, refer to the schema section for VesselReportingFact. This action requires the caller entitled to create Vessel reporting facts",
                "operationId": "createEntityVesselReportingFact",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselReportingFact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel reporting fact",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselReportingFact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel reporting fact. The response body would contain the created Vessel reporting fact",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel reporting fact. This action requires the caller entitled to create Vessel reporting facts",
                "tags": [
                    "/VesselReportingFact"
                ]
            }
        },
        "/VesselReportingFact/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel reporting fact.\n. This action is subject to caller is entitled to delete Vessel reporting facts",
                "operationId": "deleteEntitySpecificVesselReportingFact",
                "parameters": [
                    {
                        "description": "Id of Vessel reporting fact",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel reporting fact"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel reporting fact subject to caller is entitled to delete Vessel reporting facts",
                "tags": [
                    "/VesselReportingFact/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselReportingFact",
                "parameters": [
                    {
                        "description": "Id of Vessel reporting fact",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel reporting fact field. For possible fields, refer to the schema section for VesselReportingFact",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel reporting fact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselReportingFact",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel reporting fact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselReportingFact",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel reporting facts",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselReportingFact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel reporting fact. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel reporting fact in json format. This action requires the caller entitled to view Vessel reporting facts",
                "tags": [
                    "/VesselReportingFact/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel reporting fact.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are DataType,Name.\n For possible entity Fields, refer to the schema section for VesselReportingFact in json format, subject to caller is entitled to edit Vessel reporting facts",
                "operationId": "updateEntitySpecificVesselReportingFact",
                "parameters": [
                    {
                        "description": "Id of Vessel reporting fact",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselReportingFact"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel reporting fact",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselReportingFact"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel reporting fact. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel reporting fact subject to caller is entitled to edit Vessel reporting facts",
                "tags": [
                    "/VesselReportingFact/{Id}"
                ]
            }
        },
        "/VesselSpeedDescription": {
            "get": {
                "operationId": "getEntityVesselSpeedDescription",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed description field. For possible fields, refer to the schema section for VesselSpeedDescription",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed description field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSpeedDescription",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel speed descriptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel speed description fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSpeedDescription",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSpeedDescription"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel speed descriptions. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel speed descriptions in json format. This action requires the caller entitled to view Vessel speed descriptions",
                "tags": [
                    "/VesselSpeedDescription"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel speed description.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for VesselSpeedDescription. This action requires the caller entitled to create Vessel speed descriptions",
                "operationId": "createEntityVesselSpeedDescription",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselSpeedDescription"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel speed description",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSpeedDescription"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel speed description. The response body would contain the created Vessel speed description",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel speed description. This action requires the caller entitled to create Vessel speed descriptions",
                "tags": [
                    "/VesselSpeedDescription"
                ]
            }
        },
        "/VesselSpeedDescription/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel speed description.\n. This action is subject to caller is entitled to delete Vessel speed descriptions",
                "operationId": "deleteEntitySpecificVesselSpeedDescription",
                "parameters": [
                    {
                        "description": "Id of Vessel speed description",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel speed description"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel speed description subject to caller is entitled to delete Vessel speed descriptions",
                "tags": [
                    "/VesselSpeedDescription/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselSpeedDescription",
                "parameters": [
                    {
                        "description": "Id of Vessel speed description",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed description field. For possible fields, refer to the schema section for VesselSpeedDescription",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed description field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSpeedDescription",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel speed descriptions",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel speed description fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSpeedDescription",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSpeedDescription"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel speed description. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel speed description in json format. This action requires the caller entitled to view Vessel speed descriptions",
                "tags": [
                    "/VesselSpeedDescription/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel speed description.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for VesselSpeedDescription in json format, subject to caller is entitled to edit Vessel speed descriptions",
                "operationId": "updateEntitySpecificVesselSpeedDescription",
                "parameters": [
                    {
                        "description": "Id of Vessel speed description",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselSpeedDescription"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel speed description",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSpeedDescription"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel speed description. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel speed description subject to caller is entitled to edit Vessel speed descriptions",
                "tags": [
                    "/VesselSpeedDescription/{Id}"
                ]
            }
        },
        "/VesselSubType": {
            "get": {
                "operationId": "getEntityVesselSubType",
                "parameters": [
                    {
                        "description": "Maximum number of returned Vessel subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSubType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel subtype field. For possible fields, refer to the schema section for VesselSubType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSubType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSubType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel subtypes. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel subtypes in json format. This action requires the caller entitled to view Vessel subtypes",
                "tags": [
                    "/VesselSubType"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for VesselSubType. This action requires the caller entitled to create Vessel subtypes",
                "operationId": "createEntityVesselSubType",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselSubType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel subtype",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSubType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel subtype. The response body would contain the created Vessel subtype",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel subtype. This action requires the caller entitled to create Vessel subtypes",
                "tags": [
                    "/VesselSubType"
                ]
            }
        },
        "/VesselSubType/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel subtype.\n. This action is subject to caller is entitled to delete Vessel subtypes",
                "operationId": "deleteEntitySpecificVesselSubType",
                "parameters": [
                    {
                        "description": "Id of Vessel subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel subtype"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel subtype subject to caller is entitled to delete Vessel subtypes",
                "tags": [
                    "/VesselSubType/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselSubType",
                "parameters": [
                    {
                        "description": "Id of Vessel subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel subtypes",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselSubType",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel subtype field. For possible fields, refer to the schema section for VesselSubType",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel subtype fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselSubType",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSubType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel subtype. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel subtype in json format. This action requires the caller entitled to view Vessel subtypes",
                "tags": [
                    "/VesselSubType/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel subtype.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for VesselSubType in json format, subject to caller is entitled to edit Vessel subtypes",
                "operationId": "updateEntitySpecificVesselSubType",
                "parameters": [
                    {
                        "description": "Id of Vessel subtype",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselSubType"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel subtype",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselSubType"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel subtype. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel subtype subject to caller is entitled to edit Vessel subtypes",
                "tags": [
                    "/VesselSubType/{Id}"
                ]
            }
        },
        "/VesselTradingStatus": {
            "get": {
                "operationId": "getEntityVesselTradingStatus",
                "parameters": [
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel trading status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselTradingStatus",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel trading status field. For possible fields, refer to the schema section for VesselTradingStatus",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel trading status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselTradingStatus",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel trading statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselTradingStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Vessel trading statuses. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Vessel trading statuses in json format. This action requires the caller entitled to view Vessel trading statuses",
                "tags": [
                    "/VesselTradingStatus"
                ]
            },
            "post": {
                "description": "Creates a new  Vessel trading status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation is Name.\n For possible entity Fields, refer to the schema section for VesselTradingStatus. This action requires the caller entitled to create Vessel trading statuses",
                "operationId": "createEntityVesselTradingStatus",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselTradingStatus"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Vessel trading status",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselTradingStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Vessel trading status. The response body would contain the created Vessel trading status",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Vessel trading status. This action requires the caller entitled to create Vessel trading statuses",
                "tags": [
                    "/VesselTradingStatus"
                ]
            }
        },
        "/VesselTradingStatus/{Id}": {
            "delete": {
                "description": "Deletes a existing Vessel trading status.\n. This action is subject to caller is entitled to delete Vessel trading statuses",
                "operationId": "deleteEntitySpecificVesselTradingStatus",
                "parameters": [
                    {
                        "description": "Id of Vessel trading status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Vessel trading status"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Vessel trading status subject to caller is entitled to delete Vessel trading statuses",
                "tags": [
                    "/VesselTradingStatus/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificVesselTradingStatus",
                "parameters": [
                    {
                        "description": "Id of Vessel trading status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel trading status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for VesselTradingStatus",
                        "examples": {
                            "Filter by Name, in operator": {
                                "description": "Filter by Name, in operator",
                                "value": "Name,IN,A,B,C"
                            },
                            "Filter by Name, not in operator": {
                                "description": "Filter by Name, not in operator",
                                "value": "Name,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel trading status field. For possible fields, refer to the schema section for VesselTradingStatus",
                        "examples": {
                            "Sort by Name, ascending order": {
                                "description": "Sort by Name, ascending order",
                                "value": "Name:ASC"
                            },
                            "Sort by Name, descending order": {
                                "description": "Sort by Name, descending order",
                                "value": "Name:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Vessel trading status fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for VesselTradingStatus",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Vessel trading statuses",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselTradingStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Vessel trading status. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Vessel trading status in json format. This action requires the caller entitled to view Vessel trading statuses",
                "tags": [
                    "/VesselTradingStatus/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Vessel trading status.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing is Name.\n For possible entity Fields, refer to the schema section for VesselTradingStatus in json format, subject to caller is entitled to edit Vessel trading statuses",
                "operationId": "updateEntitySpecificVesselTradingStatus",
                "parameters": [
                    {
                        "description": "Id of Vessel trading status",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VesselTradingStatus"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Vessel trading status",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/VesselTradingStatus"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Vessel trading status. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Vessel trading status subject to caller is entitled to edit Vessel trading statuses",
                "tags": [
                    "/VesselTradingStatus/{Id}"
                ]
            }
        },
        "/Water": {
            "get": {
                "operationId": "getEntityWater",
                "parameters": [
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Water field. For possible fields, refer to the schema section for Water",
                        "examples": {
                            "Sort by WaterType, ascending order": {
                                "description": "Sort by WaterType, ascending order",
                                "value": "WaterType:ASC"
                            },
                            "Sort by WaterType, descending order": {
                                "description": "Sort by WaterType, descending order",
                                "value": "WaterType:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Water fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Water",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Waters",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Water field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Water",
                        "examples": {
                            "Filter by WaterType, in operator": {
                                "description": "Filter by WaterType, in operator",
                                "value": "WaterType,IN,A,B,C"
                            },
                            "Filter by WaterType, not in operator": {
                                "description": "Filter by WaterType, not in operator",
                                "value": "WaterType,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Water"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  all matching Waters. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest versions of all matching Waters in json format. This action requires the caller entitled to view Waters",
                "tags": [
                    "/Water"
                ]
            },
            "post": {
                "description": "Creates a new  Water.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required for creation are Salinity,WaterType.\n For possible entity Fields, refer to the schema section for Water. This action requires the caller entitled to create Waters",
                "operationId": "createEntityWater",
                "parameters": [
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Water"
                            }
                        }
                    },
                    "description": "A json containing field/values to be set while creating the Water",
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Water"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  creation of Water. The response body would contain the created Water",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the created entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the created entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Creates a new Water. This action requires the caller entitled to create Waters",
                "tags": [
                    "/Water"
                ]
            }
        },
        "/Water/{Id}": {
            "delete": {
                "description": "Deletes a existing Water.\n. This action is subject to caller is entitled to delete Waters",
                "operationId": "deleteEntitySpecificWater",
                "parameters": [
                    {
                        "description": "Id of Water",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "204": {
                        "content": {
                            "application/json": {
                            }
                        },
                        "description": "Indicates successful  deletion of  the specific Water"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data deletion was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Deletes an existing Water subject to caller is entitled to delete Waters",
                "tags": [
                    "/Water/{Id}"
                ]
            },
            "get": {
                "operationId": "getEntitySpecificWater",
                "parameters": [
                    {
                        "description": "Id of Water",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "description": "Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Water field. For possible fields, refer to the schema section for Water",
                        "examples": {
                            "Sort by WaterType, ascending order": {
                                "description": "Sort by WaterType, ascending order",
                                "value": "WaterType:ASC"
                            },
                            "Sort by WaterType, descending order": {
                                "description": "Sort by WaterType, descending order",
                                "value": "WaterType:DESC"
                            }
                        },
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "composeFiltersOR",
                        "schema": {
                        }
                    },
                    {
                        "in": "query",
                        "name": "where",
                        "schema": {
                        }
                    },
                    {
                        "description": "Comma separated list of Water fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Water",
                        "in": "query",
                        "name": "fields",
                        "schema": {
                        }
                    },
                    {
                        "description": "Maximum number of returned Waters",
                        "in": "query",
                        "name": "maxResults",
                        "schema": {
                        }
                    },
                    {
                        "description": "Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Water field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Water",
                        "examples": {
                            "Filter by WaterType, in operator": {
                                "description": "Filter by WaterType, in operator",
                                "value": "WaterType,IN,A,B,C"
                            },
                            "Filter by WaterType, not in operator": {
                                "description": "Filter by WaterType, not in operator",
                                "value": "WaterType,NOT_IN,A,B,C"
                            }
                        },
                        "in": "query",
                        "name": "filter",
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Water"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  in receiving  the specific Water. The response body would be a json containing resultant set.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the existing resource if a specific resource is asked",
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid search request arguments"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    }
                },
                "summary": "Returns latest version of a specific Water in json format. This action requires the caller entitled to view Waters",
                "tags": [
                    "/Water/{Id}"
                ]
            },
            "patch": {
                "description": "Updates a existing Water.\n The Id property is optional, if not provided it will auto generate an Id.\nFields required to be passed while editing are Salinity,WaterType.\n For possible entity Fields, refer to the schema section for Water in json format, subject to caller is entitled to edit Waters",
                "operationId": "updateEntitySpecificWater",
                "parameters": [
                    {
                        "description": "Id of Water",
                        "in": "path",
                        "name": "Id",
                        "required": true,
                        "schema": {
                        }
                    },
                    {
                        "in": "header",
                        "name": "If-Match",
                        "schema": {
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Water"
                            }
                        }
                    },
                    "description": "A json containing field/values to be updated in the specified Water",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Water"
                                    }
                                }
                            }
                        },
                        "description": "Indicates successful  update of  the specific Water. The response body would be a json containing updated entity.",
                        "headers": {
                            "ETag": {
                                "description": "ETag of the updated entity in format rootEntityId:revisionId",
                                "style": "simple"
                            },
                            "Location": {
                                "description": "Location of the updated entity",
                                "style": "simple"
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Rest4EyesMessage"
                                    }
                                }
                            }
                        },
                        "description": "Request submitted for 4-eyes approval"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Invalid input data"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "User action forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Entity not found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Conflicting entity already exists"
                    },
                    "412": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Data change was done on an outdated revision"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RestServiceError"
                                    }
                                }
                            }
                        },
                        "description": "Internal server error / Request not processable / Four-Eyes request submission failed"
                    }
                },
                "summary": "Updates an existing Water subject to caller is entitled to edit Waters",
                "tags": [
                    "/Water/{Id}"
                ]
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost:8080/ionweb/r/restapi/RDX_CPS/"
        }
    ]
}