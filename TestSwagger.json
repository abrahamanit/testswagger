{"openapi":"3.0.1","paths":{"/AcurisPrimeIndustry":{"get":{"tags":["/AcurisPrimeIndustry"],"summary":"Returns latest versions of all matching Acuris Prime industries in json format subject to caller is entitled to view Acuris Prime industries","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Acuris Prime industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Acuris Prime industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Acuris Prime industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Acuris Prime industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AcurisPrimeIndustry/{id}":{"get":{"tags":["/AcurisPrimeIndustry/{id}"],"summary":"Returns latest version of a specific Acuris Prime industry in json format subject to caller is entitled to view Acuris Prime industries","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Acuris Prime industry","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Acuris Prime industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Acuris Prime industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Acuris Prime industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Acuris Prime industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AddressType":{"get":{"tags":["/AddressType"],"summary":"Returns latest versions of all matching Address types in json format subject to caller is entitled to view Address types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Address types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AddressType/{id}":{"get":{"tags":["/AddressType/{id}"],"summary":"Returns latest version of a specific Address type in json format subject to caller is entitled to view Address types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Address type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Address types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AnalysisCode":{"get":{"tags":["/AnalysisCode"],"summary":"Returns latest versions of all matching Analysis codes in json format subject to caller is entitled to view Analysis codes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Analysis code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Analysis code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Analysis code field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Analysis codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AnalysisCode/{id}":{"get":{"tags":["/AnalysisCode/{id}"],"summary":"Returns latest version of a specific Analysis code in json format subject to caller is entitled to view Analysis codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Analysis code","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Analysis code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Analysis code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Analysis code field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Analysis codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AnalyticsLocation":{"get":{"tags":["/AnalyticsLocation"],"summary":"Returns latest versions of all matching Locations in json format subject to caller is entitled to view Locations","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Location field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Type, not in operator":{"description":"Filter by Type, not in operator","value":"Type,NOT_IN,A,B,C"},"Filter by Type, in operator":{"description":"Filter by Type, in operator","value":"Type,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Location fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Location field","schema":{},"examples":{"Sort by Type, descending order":{"description":"Sort by Type, descending order","value":"Type:DESC"},"Sort by Type, ascending order":{"description":"Sort by Type, ascending order","value":"Type:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Locations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AnalyticsLocation/{id}":{"get":{"tags":["/AnalyticsLocation/{id}"],"summary":"Returns latest version of a specific Location in json format subject to caller is entitled to view Locations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Location","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Location field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Type, not in operator":{"description":"Filter by Type, not in operator","value":"Type,NOT_IN,A,B,C"},"Filter by Type, in operator":{"description":"Filter by Type, in operator","value":"Type,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Location fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Location field","schema":{},"examples":{"Sort by Type, descending order":{"description":"Sort by Type, descending order","value":"Type:DESC"},"Sort by Type, ascending order":{"description":"Sort by Type, ascending order","value":"Type:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Locations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AttachmentBase":{"get":{"tags":["/AttachmentBase"],"summary":"Returns latest versions of all matching Attachment bases in json format subject to caller is entitled to view Attachment bases","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment base field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Attachment base fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment base field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Attachment bases","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AttachmentBase/{id}":{"get":{"tags":["/AttachmentBase/{id}"],"summary":"Returns latest version of a specific Attachment base in json format subject to caller is entitled to view Attachment bases","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Attachment base","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment base field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Attachment base fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment base field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Attachment bases","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AttachmentBase/{id}/Attachments":{"get":{"tags":["/AttachmentBase/{id}/Attachments"],"summary":"Returns latest versions of all matching Attachments belonging to the parent Attachment base in json format subject to caller is entitled to view Attachments","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Attachment base","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Type, not in operator":{"description":"Filter by Type, not in operator","value":"Type,NOT_IN,A,B,C"},"Filter by Type, in operator":{"description":"Filter by Type, in operator","value":"Type,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Attachment fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment field","schema":{},"examples":{"Sort by Type, descending order":{"description":"Sort by Type, descending order","value":"Type:DESC"},"Sort by Type, ascending order":{"description":"Sort by Type, ascending order","value":"Type:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Attachments","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/AttachmentBase/{id}/Attachments/{attachmentsId}":{"get":{"tags":["/AttachmentBase/{id}/Attachments/{attachmentsId}"],"summary":"Returns latest version of a specific Attachment belonging to the parent Attachment base in json format subject to caller is entitled to view Attachments","operationId":"getEntity","parameters":[{"name":"{attachmentsId}","in":"path","description":"Id of Attachment","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Attachment base","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Attachment field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Type, not in operator":{"description":"Filter by Type, not in operator","value":"Type,NOT_IN,A,B,C"},"Filter by Type, in operator":{"description":"Filter by Type, in operator","value":"Type,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Attachment fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Attachment field","schema":{},"examples":{"Sort by Type, descending order":{"description":"Sort by Type, descending order","value":"Type:DESC"},"Sort by Type, ascending order":{"description":"Sort by Type, ascending order","value":"Type:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Attachments","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/binary/AttachmentBase/{id}/Attachments/{attachmentsId}/Attachment":{"get":{"tags":["/binary/AttachmentBase/{id}/Attachments/{attachmentsId}/Attachment"],"summary":"Returns latest versions of all matching Attachments belonging to the parent Attachment in json format subject to caller is entitled to view Attachments","operationId":"downloadBinary","parameters":[{"name":"{attachmentsId}","in":"path","description":"Id of Attachment","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Attachment base","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BIC":{"get":{"tags":["/BIC"],"summary":"Returns latest versions of all matching BICs in json format subject to caller is entitled to view BICs","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValueAddedServices, in operator":{"description":"Filter by ValueAddedServices, in operator","value":"ValueAddedServices,IN,A,B,C"},"Filter by ValueAddedServices, not in operator":{"description":"Filter by ValueAddedServices, not in operator","value":"ValueAddedServices,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC field","schema":{},"examples":{"Sort by ValueAddedServices, ascending order":{"description":"Sort by ValueAddedServices, ascending order","value":"ValueAddedServices:ASC"},"Sort by ValueAddedServices, descending order":{"description":"Sort by ValueAddedServices, descending order","value":"ValueAddedServices:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BICs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BIC/{id}":{"get":{"tags":["/BIC/{id}"],"summary":"Returns latest version of a specific BIC in json format subject to caller is entitled to view BICs","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of BIC","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValueAddedServices, in operator":{"description":"Filter by ValueAddedServices, in operator","value":"ValueAddedServices,IN,A,B,C"},"Filter by ValueAddedServices, not in operator":{"description":"Filter by ValueAddedServices, not in operator","value":"ValueAddedServices,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC field","schema":{},"examples":{"Sort by ValueAddedServices, ascending order":{"description":"Sort by ValueAddedServices, ascending order","value":"ValueAddedServices:ASC"},"Sort by ValueAddedServices, descending order":{"description":"Sort by ValueAddedServices, descending order","value":"ValueAddedServices:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BICs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BICType":{"get":{"tags":["/BICType"],"summary":"Returns latest versions of all matching BIC types in json format subject to caller is entitled to view BIC types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BICType/{id}":{"get":{"tags":["/BICType/{id}"],"summary":"Returns latest version of a specific BIC type in json format subject to caller is entitled to view BIC types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of BIC type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Bond":{"get":{"tags":["/Bond"],"summary":"Returns latest versions of all matching Bonds in json format subject to caller is entitled to view Bonds","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Ticker, not in operator":{"description":"Filter by Ticker, not in operator","value":"Ticker,NOT_IN,A,B,C"},"Filter by Ticker, in operator":{"description":"Filter by Ticker, in operator","value":"Ticker,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bond fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond field","schema":{},"examples":{"Sort by Ticker, ascending order":{"description":"Sort by Ticker, ascending order","value":"Ticker:ASC"},"Sort by Ticker, descending order":{"description":"Sort by Ticker, descending order","value":"Ticker:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bonds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Bond/{id}":{"get":{"tags":["/Bond/{id}"],"summary":"Returns latest version of a specific Bond in json format subject to caller is entitled to view Bonds","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Bond","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Ticker, not in operator":{"description":"Filter by Ticker, not in operator","value":"Ticker,NOT_IN,A,B,C"},"Filter by Ticker, in operator":{"description":"Filter by Ticker, in operator","value":"Ticker,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bond fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond field","schema":{},"examples":{"Sort by Ticker, ascending order":{"description":"Sort by Ticker, ascending order","value":"Ticker:ASC"},"Sort by Ticker, descending order":{"description":"Sort by Ticker, descending order","value":"Ticker:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bonds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BondGroup":{"get":{"tags":["/BondGroup"],"summary":"Returns latest versions of all matching Bond groups in json format subject to caller is entitled to view Bond groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bond group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bond groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BondGroup/{id}":{"get":{"tags":["/BondGroup/{id}"],"summary":"Returns latest version of a specific Bond group in json format subject to caller is entitled to view Bond groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Bond group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bond group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bond group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bond group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bond groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Book":{"get":{"tags":["/Book"],"summary":"Returns latest versions of all matching Books in json format subject to caller is entitled to view Books","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TraderLastName, not in operator":{"description":"Filter by TraderLastName, not in operator","value":"TraderLastName,NOT_IN,A,B,C"},"Filter by TraderLastName, in operator":{"description":"Filter by TraderLastName, in operator","value":"TraderLastName,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book field","schema":{},"examples":{"Sort by TraderLastName, ascending order":{"description":"Sort by TraderLastName, ascending order","value":"TraderLastName:ASC"},"Sort by TraderLastName, descending order":{"description":"Sort by TraderLastName, descending order","value":"TraderLastName:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Books","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Book/{id}":{"get":{"tags":["/Book/{id}"],"summary":"Returns latest version of a specific Book in json format subject to caller is entitled to view Books","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TraderLastName, not in operator":{"description":"Filter by TraderLastName, not in operator","value":"TraderLastName,NOT_IN,A,B,C"},"Filter by TraderLastName, in operator":{"description":"Filter by TraderLastName, in operator","value":"TraderLastName,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book field","schema":{},"examples":{"Sort by TraderLastName, ascending order":{"description":"Sort by TraderLastName, ascending order","value":"TraderLastName:ASC"},"Sort by TraderLastName, descending order":{"description":"Sort by TraderLastName, descending order","value":"TraderLastName:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Books","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Book/{id}/Contacts":{"get":{"tags":["/Book/{id}/Contacts"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Book in json format subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Book/{id}/Contacts/{contactsId}":{"get":{"tags":["/Book/{id}/Contacts/{contactsId}"],"summary":"Returns latest version of a specific Contact belonging to the parent Book in json format subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Book","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/binary/Book/{id}/Contacts/{contactsId}/Signature":{"get":{"tags":["/binary/Book/{id}/Contacts/{contactsId}/Signature"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Contact in json format subject to caller is entitled to view Contacts","operationId":"downloadBinary","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Book","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookGroup":{"get":{"tags":["/BookGroup"],"summary":"Returns latest versions of all matching Book groups in json format subject to caller is entitled to view Book groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookGroup/{id}":{"get":{"tags":["/BookGroup/{id}"],"summary":"Returns latest version of a specific Book group in json format subject to caller is entitled to view Book groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy":{"get":{"tags":["/BookHierarchy"],"summary":"Returns latest versions of all matching Book hierarchies in json format subject to caller is entitled to view Book hierarchies","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}":{"get":{"tags":["/BookHierarchy/{id}"],"summary":"Returns latest version of a specific Book hierarchy in json format subject to caller is entitled to view Book hierarchies","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/LevelDefault":{"get":{"tags":["/BookHierarchy/{id}/LevelDefault"],"summary":"Returns latest versions of all matching Level defaults belonging to the parent Book hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/LevelDefault/{levelDefaultId}":{"get":{"tags":["/BookHierarchy/{id}/LevelDefault/{levelDefaultId}"],"summary":"Returns latest version of a specific Level default belonging to the parent Book hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue":{"get":{"tags":["/BookHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue"],"summary":"Returns latest versions of all matching Level default values belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}":{"get":{"tags":["/BookHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}"],"summary":"Returns latest version of a specific Level default value belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{defaultValueId}","in":"path","description":"Id of Level default value","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/Levels":{"get":{"tags":["/BookHierarchy/{id}/Levels"],"summary":"Returns latest versions of all matching Book levels belonging to the parent Book hierarchy in json format subject to caller is entitled to view Book levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookHierarchy/{id}/Levels/{levelsId}":{"get":{"tags":["/BookHierarchy/{id}/Levels/{levelsId}"],"summary":"Returns latest version of a specific Book level belonging to the parent Book hierarchy in json format subject to caller is entitled to view Book levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book hierarchy","required":true,"schema":{}},{"name":"{levelsId}","in":"path","description":"Id of Book level","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookSubtype":{"get":{"tags":["/BookSubtype"],"summary":"Returns latest versions of all matching Book subtypes in json format subject to caller is entitled to view Book subtypes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookSubtype/{id}":{"get":{"tags":["/BookSubtype/{id}"],"summary":"Returns latest version of a specific Book subtype in json format subject to caller is entitled to view Book subtypes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book subtype","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookType":{"get":{"tags":["/BookType"],"summary":"Returns latest versions of all matching Book types in json format subject to caller is entitled to view Book types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BookType/{id}":{"get":{"tags":["/BookType/{id}"],"summary":"Returns latest version of a specific Book type in json format subject to caller is entitled to view Book types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Book type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Book type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Book type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Book type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Book types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BunkerGrade":{"get":{"tags":["/BunkerGrade"],"summary":"Returns latest versions of all matching Bunker grades in json format subject to caller is entitled to view Bunker grades","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker grade fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker grade field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker grades","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BunkerGrade/{id}":{"get":{"tags":["/BunkerGrade/{id}"],"summary":"Returns latest version of a specific Bunker grade in json format subject to caller is entitled to view Bunker grades","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Bunker grade","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker grade fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker grade field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker grades","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BunkerSpecification":{"get":{"tags":["/BunkerSpecification"],"summary":"Returns latest versions of all matching Bunker specifications in json format subject to caller is entitled to view Bunker specifications","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker specification field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker specification fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker specification field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker specifications","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BunkerSpecification/{id}":{"get":{"tags":["/BunkerSpecification/{id}"],"summary":"Returns latest version of a specific Bunker specification in json format subject to caller is entitled to view Bunker specifications","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Bunker specification","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker specification field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker specification fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker specification field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker specifications","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BusinessDate":{"get":{"tags":["/BusinessDate"],"summary":"Returns latest versions of all matching Business dates in json format subject to caller is entitled to view Business dates","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business date fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business date field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business dates","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BusinessDate/{id}":{"get":{"tags":["/BusinessDate/{id}"],"summary":"Returns latest version of a specific Business date in json format subject to caller is entitled to view Business dates","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Business date","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business date fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business date field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business dates","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BusinessUnit":{"get":{"tags":["/BusinessUnit"],"summary":"Returns latest versions of all matching Business units in json format subject to caller is entitled to view Business units","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business unit field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RCFieldName, in operator":{"description":"Filter by RCFieldName, in operator","value":"RCFieldName,IN,A,B,C"},"Filter by RCFieldName, not in operator":{"description":"Filter by RCFieldName, not in operator","value":"RCFieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business unit fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business unit field","schema":{},"examples":{"Sort by RCFieldName, descending order":{"description":"Sort by RCFieldName, descending order","value":"RCFieldName:DESC"},"Sort by RCFieldName, ascending order":{"description":"Sort by RCFieldName, ascending order","value":"RCFieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business units","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/BusinessUnit/{id}":{"get":{"tags":["/BusinessUnit/{id}"],"summary":"Returns latest version of a specific Business unit in json format subject to caller is entitled to view Business units","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Business unit","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business unit field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RCFieldName, in operator":{"description":"Filter by RCFieldName, in operator","value":"RCFieldName,IN,A,B,C"},"Filter by RCFieldName, not in operator":{"description":"Filter by RCFieldName, not in operator","value":"RCFieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business unit fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business unit field","schema":{},"examples":{"Sort by RCFieldName, descending order":{"description":"Sort by RCFieldName, descending order","value":"RCFieldName:DESC"},"Sort by RCFieldName, ascending order":{"description":"Sort by RCFieldName, ascending order","value":"RCFieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business units","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Calendar":{"get":{"tags":["/Calendar"],"summary":"Returns latest versions of all matching Calendars in json format subject to caller is entitled to view Calendars","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Calendar field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Calendar fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Calendar field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Calendars","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Calendar/{id}":{"get":{"tags":["/Calendar/{id}"],"summary":"Returns latest version of a specific Calendar in json format subject to caller is entitled to view Calendars","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Calendar","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Calendar field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Calendar fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Calendar field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Calendars","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Calendar/{id}/Holidays":{"get":{"tags":["/Calendar/{id}/Holidays"],"summary":"Returns latest versions of all matching Holidays belonging to the parent Calendar in json format subject to caller is entitled to view Holidays","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Calendar","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Holiday field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Description, in operator":{"description":"Filter by Description, in operator","value":"Description,IN,A,B,C"},"Filter by Description, not in operator":{"description":"Filter by Description, not in operator","value":"Description,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Holiday fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Holiday field","schema":{},"examples":{"Sort by Description, ascending order":{"description":"Sort by Description, ascending order","value":"Description:ASC"},"Sort by Description, descending order":{"description":"Sort by Description, descending order","value":"Description:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Holidays","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Calendar/{id}/Holidays/{holidaysId}":{"get":{"tags":["/Calendar/{id}/Holidays/{holidaysId}"],"summary":"Returns latest version of a specific Holiday belonging to the parent Calendar in json format subject to caller is entitled to view Holidays","operationId":"getEntity","parameters":[{"name":"{holidaysId}","in":"path","description":"Id of Holiday","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Calendar","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Holiday field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Description, in operator":{"description":"Filter by Description, in operator","value":"Description,IN,A,B,C"},"Filter by Description, not in operator":{"description":"Filter by Description, not in operator","value":"Description,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Holiday fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Holiday field","schema":{},"examples":{"Sort by Description, ascending order":{"description":"Sort by Description, ascending order","value":"Description:ASC"},"Sort by Description, descending order":{"description":"Sort by Description, descending order","value":"Description:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Holidays","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingCodeType":{"get":{"tags":["/ClearingCodeType"],"summary":"Returns latest versions of all matching Clearing code types in json format subject to caller is entitled to view Clearing code types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing code types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingCodeType/{id}":{"get":{"tags":["/ClearingCodeType/{id}"],"summary":"Returns latest version of a specific Clearing code type in json format subject to caller is entitled to view Clearing code types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Clearing code type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing code types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingFormat":{"get":{"tags":["/ClearingFormat"],"summary":"Returns latest versions of all matching Clearing formats in json format subject to caller is entitled to view Clearing formats","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Structure, not in operator":{"description":"Filter by Structure, not in operator","value":"Structure,NOT_IN,A,B,C"},"Filter by Structure, in operator":{"description":"Filter by Structure, in operator","value":"Structure,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing format fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing format field","schema":{},"examples":{"Sort by Structure, ascending order":{"description":"Sort by Structure, ascending order","value":"Structure:ASC"},"Sort by Structure, descending order":{"description":"Sort by Structure, descending order","value":"Structure:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing formats","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingFormat/{id}":{"get":{"tags":["/ClearingFormat/{id}"],"summary":"Returns latest version of a specific Clearing format in json format subject to caller is entitled to view Clearing formats","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Clearing format","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Structure, not in operator":{"description":"Filter by Structure, not in operator","value":"Structure,NOT_IN,A,B,C"},"Filter by Structure, in operator":{"description":"Filter by Structure, in operator","value":"Structure,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing format fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing format field","schema":{},"examples":{"Sort by Structure, ascending order":{"description":"Sort by Structure, ascending order","value":"Structure:ASC"},"Sort by Structure, descending order":{"description":"Sort by Structure, descending order","value":"Structure:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing formats","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystem":{"get":{"tags":["/ClearingSystem"],"summary":"Returns latest versions of all matching Clearing systems in json format subject to caller is entitled to view Clearing systems","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing system fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing systems","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystem/{id}":{"get":{"tags":["/ClearingSystem/{id}"],"summary":"Returns latest version of a specific Clearing system in json format subject to caller is entitled to view Clearing systems","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Clearing system","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing system fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing systems","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystem/{id}/Countries":{"get":{"tags":["/ClearingSystem/{id}/Countries"],"summary":"Returns latest versions of all matching Country relations belonging to the parent Clearing system in json format subject to caller is entitled to view Country relations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Clearing system","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Country relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Country relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystem/{id}/Countries/{countriesId}":{"get":{"tags":["/ClearingSystem/{id}/Countries/{countriesId}"],"summary":"Returns latest version of a specific Country relation belonging to the parent Clearing system in json format subject to caller is entitled to view Country relations","operationId":"getEntity","parameters":[{"name":"{countriesId}","in":"path","description":"Id of Country relation","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Clearing system","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Country relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Country relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystemType":{"get":{"tags":["/ClearingSystemType"],"summary":"Returns latest versions of all matching Clearing system types in json format subject to caller is entitled to view Clearing system types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing system type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing system types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ClearingSystemType/{id}":{"get":{"tags":["/ClearingSystemType/{id}"],"summary":"Returns latest version of a specific Clearing system type in json format subject to caller is entitled to view Clearing system types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Clearing system type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing system type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing system type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing system type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing system types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CodeTypeField":{"get":{"tags":["/CodeTypeField"],"summary":"Returns latest versions of all matching Code types in json format subject to caller is entitled to view Code types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Code type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Code type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Code types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CodeTypeField/{id}":{"get":{"tags":["/CodeTypeField/{id}"],"summary":"Returns latest version of a specific Code type in json format subject to caller is entitled to view Code types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Code type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Code type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Code type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Code type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Code types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Commodity":{"get":{"tags":["/Commodity"],"summary":"Returns latest versions of all matching Commodities in json format subject to caller is entitled to view Commodities","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by UNNumber, in operator":{"description":"Filter by UNNumber, in operator","value":"UNNumber,IN,A,B,C"},"Filter by UNNumber, not in operator":{"description":"Filter by UNNumber, not in operator","value":"UNNumber,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Commodity fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity field","schema":{},"examples":{"Sort by UNNumber, ascending order":{"description":"Sort by UNNumber, ascending order","value":"UNNumber:ASC"},"Sort by UNNumber, descending order":{"description":"Sort by UNNumber, descending order","value":"UNNumber:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Commodities","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Commodity/{id}":{"get":{"tags":["/Commodity/{id}"],"summary":"Returns latest version of a specific Commodity in json format subject to caller is entitled to view Commodities","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Commodity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by UNNumber, in operator":{"description":"Filter by UNNumber, in operator","value":"UNNumber,IN,A,B,C"},"Filter by UNNumber, not in operator":{"description":"Filter by UNNumber, not in operator","value":"UNNumber,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Commodity fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity field","schema":{},"examples":{"Sort by UNNumber, ascending order":{"description":"Sort by UNNumber, ascending order","value":"UNNumber:ASC"},"Sort by UNNumber, descending order":{"description":"Sort by UNNumber, descending order","value":"UNNumber:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Commodities","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Commodity/{id}/Conversion":{"get":{"tags":["/Commodity/{id}/Conversion"],"summary":"Returns latest versions of all matching UOM conversions belonging to the parent Commodity in json format subject to caller is entitled to view UOM conversions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Commodity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the UOM conversion field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DisplayName, not in operator":{"description":"Filter by DisplayName, not in operator","value":"DisplayName,NOT_IN,A,B,C"},"Filter by DisplayName, in operator":{"description":"Filter by DisplayName, in operator","value":"DisplayName,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of UOM conversion fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any UOM conversion field","schema":{},"examples":{"Sort by DisplayName, ascending order":{"description":"Sort by DisplayName, ascending order","value":"DisplayName:ASC"},"Sort by DisplayName, descending order":{"description":"Sort by DisplayName, descending order","value":"DisplayName:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned UOM conversions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Commodity/{id}/Conversion/{conversionId}":{"get":{"tags":["/Commodity/{id}/Conversion/{conversionId}"],"summary":"Returns latest version of a specific UOM conversion belonging to the parent Commodity in json format subject to caller is entitled to view UOM conversions","operationId":"getEntity","parameters":[{"name":"{conversionId}","in":"path","description":"Id of UOM conversion","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Commodity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the UOM conversion field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DisplayName, not in operator":{"description":"Filter by DisplayName, not in operator","value":"DisplayName,NOT_IN,A,B,C"},"Filter by DisplayName, in operator":{"description":"Filter by DisplayName, in operator","value":"DisplayName,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of UOM conversion fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any UOM conversion field","schema":{},"examples":{"Sort by DisplayName, ascending order":{"description":"Sort by DisplayName, ascending order","value":"DisplayName:ASC"},"Sort by DisplayName, descending order":{"description":"Sort by DisplayName, descending order","value":"DisplayName:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned UOM conversions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityGroup":{"get":{"tags":["/CommodityGroup"],"summary":"Returns latest versions of all matching Commodity groups in json format subject to caller is entitled to view Commodity groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Commodity group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Commodity groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityGroup/{id}":{"get":{"tags":["/CommodityGroup/{id}"],"summary":"Returns latest version of a specific Commodity group in json format subject to caller is entitled to view Commodity groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Commodity group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Commodity group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Commodity group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Commodity group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Commodity groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategy":{"get":{"tags":["/CommodityStrategy"],"summary":"Returns latest versions of all matching Strategies in json format subject to caller is entitled to view Strategies","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategy/{id}":{"get":{"tags":["/CommodityStrategy/{id}"],"summary":"Returns latest version of a specific Strategy in json format subject to caller is entitled to view Strategies","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy":{"get":{"tags":["/CommodityStrategyHierarchy"],"summary":"Returns latest versions of all matching Strategy hierarchies in json format subject to caller is entitled to view Strategy hierarchies","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategy hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}":{"get":{"tags":["/CommodityStrategyHierarchy/{id}"],"summary":"Returns latest version of a specific Strategy hierarchy in json format subject to caller is entitled to view Strategy hierarchies","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategy hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/LevelDefault":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/LevelDefault"],"summary":"Returns latest versions of all matching Level defaults belonging to the parent Strategy hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}"],"summary":"Returns latest version of a specific Level default belonging to the parent Strategy hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue"],"summary":"Returns latest versions of all matching Level default values belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}"],"summary":"Returns latest version of a specific Level default value belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{defaultValueId}","in":"path","description":"Id of Level default value","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/Levels":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/Levels"],"summary":"Returns latest versions of all matching Levels belonging to the parent Strategy hierarchy in json format subject to caller is entitled to view Levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyHierarchy/{id}/Levels/{levelsId}":{"get":{"tags":["/CommodityStrategyHierarchy/{id}/Levels/{levelsId}"],"summary":"Returns latest version of a specific Level belonging to the parent Strategy hierarchy in json format subject to caller is entitled to view Levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy hierarchy","required":true,"schema":{}},{"name":"{levelsId}","in":"path","description":"Id of Level","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyType":{"get":{"tags":["/CommodityStrategyType"],"summary":"Returns latest versions of all matching Strategy types in json format subject to caller is entitled to view Strategy types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategy types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CommodityStrategyType/{id}":{"get":{"tags":["/CommodityStrategyType/{id}"],"summary":"Returns latest version of a specific Strategy type in json format subject to caller is entitled to view Strategy types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Strategy type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Strategy type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Strategy type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Strategy type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Strategy types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ConfirmationFieldType":{"get":{"tags":["/ConfirmationFieldType"],"summary":"Returns latest versions of all matching Confirmation field types in json format subject to caller is entitled to view Confirmation field types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation field type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Confirmation field type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation field type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Confirmation field types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ConfirmationFieldType/{id}":{"get":{"tags":["/ConfirmationFieldType/{id}"],"summary":"Returns latest version of a specific Confirmation field type in json format subject to caller is entitled to view Confirmation field types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Confirmation field type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation field type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Confirmation field type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation field type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Confirmation field types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ConfirmationPlatform":{"get":{"tags":["/ConfirmationPlatform"],"summary":"Returns latest versions of all matching Confirmation platforms in json format subject to caller is entitled to view Confirmation platforms","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation platform field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Confirmation platform fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation platform field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Confirmation platforms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ConfirmationPlatform/{id}":{"get":{"tags":["/ConfirmationPlatform/{id}"],"summary":"Returns latest version of a specific Confirmation platform in json format subject to caller is entitled to view Confirmation platforms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Confirmation platform","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Confirmation platform field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Confirmation platform fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Confirmation platform field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Confirmation platforms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContactType":{"get":{"tags":["/ContactType"],"summary":"Returns latest versions of all matching Contact types in json format subject to caller is entitled to view Contact types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contact types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContactType/{id}":{"get":{"tags":["/ContactType/{id}"],"summary":"Returns latest version of a specific Contact type in json format subject to caller is entitled to view Contact types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Contact type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contact types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContractGroup":{"get":{"tags":["/ContractGroup"],"summary":"Returns latest versions of all matching Contract groups in json format subject to caller is entitled to view Contract groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contract group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract group field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contract groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContractGroup/{id}":{"get":{"tags":["/ContractGroup/{id}"],"summary":"Returns latest version of a specific Contract group in json format subject to caller is entitled to view Contract groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Contract group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contract group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract group field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contract groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContractStatus":{"get":{"tags":["/ContractStatus"],"summary":"Returns latest versions of all matching Contract statuses in json format subject to caller is entitled to view Contract statuses","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contract status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contract statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ContractStatus/{id}":{"get":{"tags":["/ContractStatus/{id}"],"summary":"Returns latest version of a specific Contract status in json format subject to caller is entitled to view Contract statuses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Contract status","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contract status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contract status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contract status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contract statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty":{"get":{"tags":["/Counterparty"],"summary":"Returns latest versions of all matching Counterparties in json format subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,NOT_IN,A,B,C"},"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field","schema":{},"examples":{"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order","value":"__RESERVED_ALL_CPTYS_HrcParent:DESC"},"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order","value":"__RESERVED_ALL_CPTYS_HrcParent:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}":{"get":{"tags":["/Counterparty/{id}"],"summary":"Returns latest version of a specific Counterparty in json format subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,NOT_IN,A,B,C"},"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field","schema":{},"examples":{"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order","value":"__RESERVED_ALL_CPTYS_HrcParent:DESC"},"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order","value":"__RESERVED_ALL_CPTYS_HrcParent:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Addresses":{"get":{"tags":["/Counterparty/{id}/Addresses"],"summary":"Returns latest versions of all matching Addresses belonging to the parent Counterparty in json format subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Addresses/{addressesId}":{"get":{"tags":["/Counterparty/{id}/Addresses/{addressesId}"],"summary":"Returns latest version of a specific Address belonging to the parent Counterparty in json format subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"{addressesId}","in":"path","description":"Id of Address","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BICs":{"get":{"tags":["/Counterparty/{id}/BICs"],"summary":"Returns latest versions of all matching BIC Type Relations belonging to the parent Counterparty in json format subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BICs/{bICsId}":{"get":{"tags":["/Counterparty/{id}/BICs/{bICsId}"],"summary":"Returns latest version of a specific BIC Type Relation belonging to the parent Counterparty in json format subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"{bICsId}","in":"path","description":"Id of BIC Type Relation","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BankAccounts":{"get":{"tags":["/Counterparty/{id}/BankAccounts"],"summary":"Returns latest versions of all matching Bank accounts belonging to the parent Counterparty in json format subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BankAccounts/{bankAccountsId}":{"get":{"tags":["/Counterparty/{id}/BankAccounts/{bankAccountsId}"],"summary":"Returns latest version of a specific Bank account belonging to the parent Counterparty in json format subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"{bankAccountsId}","in":"path","description":"Id of Bank account","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BusinessUnits":{"get":{"tags":["/Counterparty/{id}/BusinessUnits"],"summary":"Returns latest versions of all matching Business Unit Relations belonging to the parent Counterparty in json format subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/BusinessUnits/{businessUnitsId}":{"get":{"tags":["/Counterparty/{id}/BusinessUnits/{businessUnitsId}"],"summary":"Returns latest version of a specific Business Unit Relation belonging to the parent Counterparty in json format subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"{businessUnitsId}","in":"path","description":"Id of Business Unit Relation","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/ClearingCodes":{"get":{"tags":["/Counterparty/{id}/ClearingCodes"],"summary":"Returns latest versions of all matching Clearing codes belonging to the parent Counterparty in json format subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/ClearingCodes/{clearingCodesId}":{"get":{"tags":["/Counterparty/{id}/ClearingCodes/{clearingCodesId}"],"summary":"Returns latest version of a specific Clearing code belonging to the parent Counterparty in json format subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"{clearingCodesId}","in":"path","description":"Id of Clearing code","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Contacts":{"get":{"tags":["/Counterparty/{id}/Contacts"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Counterparty in json format subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Contacts/{contactsId}":{"get":{"tags":["/Counterparty/{id}/Contacts/{contactsId}"],"summary":"Returns latest version of a specific Contact belonging to the parent Counterparty in json format subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/DepositoryCodes":{"get":{"tags":["/Counterparty/{id}/DepositoryCodes"],"summary":"Returns latest versions of all matching Depository codes belonging to the parent Counterparty in json format subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/DepositoryCodes/{depositoryCodesId}":{"get":{"tags":["/Counterparty/{id}/DepositoryCodes/{depositoryCodesId}"],"summary":"Returns latest version of a specific Depository code belonging to the parent Counterparty in json format subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"{depositoryCodesId}","in":"path","description":"Id of Depository code","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Farms":{"get":{"tags":["/Counterparty/{id}/Farms"],"summary":"Returns latest versions of all matching Farms belonging to the parent Counterparty in json format subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Farms/{farmsId}":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}"],"summary":"Returns latest version of a specific Farm belonging to the parent Counterparty in json format subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Farms/{farmsId}/SplitDefaults":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Farm in json format subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/Farms/{farmsId}/SplitDefaults/{splitDefaultsId}":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}/SplitDefaults/{splitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Farm in json format subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{splitDefaultsId}","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/InvestmentManagers":{"get":{"tags":["/Counterparty/{id}/InvestmentManagers"],"summary":"Returns latest versions of all matching Investment managers belonging to the parent Counterparty in json format subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/InvestmentManagers/{investmentManagersId}":{"get":{"tags":["/Counterparty/{id}/InvestmentManagers/{investmentManagersId}"],"summary":"Returns latest version of a specific Investment manager belonging to the parent Counterparty in json format subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{investmentManagersId}","in":"path","description":"Id of Investment manager","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/SWIFTFields":{"get":{"tags":["/Counterparty/{id}/SWIFTFields"],"summary":"Returns latest versions of all matching SWIFT fieldses belonging to the parent Counterparty in json format subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/SWIFTFields/{sWIFTFieldsId}":{"get":{"tags":["/Counterparty/{id}/SWIFTFields/{sWIFTFieldsId}"],"summary":"Returns latest version of a specific SWIFT fields belonging to the parent Counterparty in json format subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{sWIFTFieldsId}","in":"path","description":"Id of SWIFT fields","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/SplitDefaults":{"get":{"tags":["/Counterparty/{id}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Counterparty in json format subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Counterparty/{id}/SplitDefaults/{splitDefaultsId}":{"get":{"tags":["/Counterparty/{id}/SplitDefaults/{splitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Counterparty in json format subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{splitDefaultsId}","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/binary/Counterparty/{id}/Contacts/{contactsId}/Signature":{"get":{"tags":["/binary/Counterparty/{id}/Contacts/{contactsId}/Signature"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Contact in json format subject to caller is entitled to view Contacts","operationId":"downloadBinary","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyGroup":{"get":{"tags":["/CounterpartyGroup"],"summary":"Returns latest versions of all matching Counterparty groups in json format subject to caller is entitled to view Counterparty groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyGroup/{id}":{"get":{"tags":["/CounterpartyGroup/{id}"],"summary":"Returns latest version of a specific Counterparty group in json format subject to caller is entitled to view Counterparty groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy":{"get":{"tags":["/CounterpartyHierarchy"],"summary":"Returns latest versions of all matching Counterparty hierarchies in json format subject to caller is entitled to view Counterparty hierarchies","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}":{"get":{"tags":["/CounterpartyHierarchy/{id}"],"summary":"Returns latest version of a specific Counterparty hierarchy in json format subject to caller is entitled to view Counterparty hierarchies","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty hierarchy field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by EntityClassStr, in operator":{"description":"Filter by EntityClassStr, in operator","value":"EntityClassStr,IN,A,B,C"},"Filter by EntityClassStr, not in operator":{"description":"Filter by EntityClassStr, not in operator","value":"EntityClassStr,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty hierarchy fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty hierarchy field","schema":{},"examples":{"Sort by EntityClassStr, ascending order":{"description":"Sort by EntityClassStr, ascending order","value":"EntityClassStr:ASC"},"Sort by EntityClassStr, descending order":{"description":"Sort by EntityClassStr, descending order","value":"EntityClassStr:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty hierarchies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/LevelDefault":{"get":{"tags":["/CounterpartyHierarchy/{id}/LevelDefault"],"summary":"Returns latest versions of all matching Level defaults belonging to the parent Counterparty hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}":{"get":{"tags":["/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}"],"summary":"Returns latest version of a specific Level default belonging to the parent Counterparty hierarchy in json format subject to caller is entitled to view Level defaults","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by FieldName, in operator":{"description":"Filter by FieldName, in operator","value":"FieldName,IN,A,B,C"},"Filter by FieldName, not in operator":{"description":"Filter by FieldName, not in operator","value":"FieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default field","schema":{},"examples":{"Sort by FieldName, descending order":{"description":"Sort by FieldName, descending order","value":"FieldName:DESC"},"Sort by FieldName, ascending order":{"description":"Sort by FieldName, ascending order","value":"FieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level defaults","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue":{"get":{"tags":["/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue"],"summary":"Returns latest versions of all matching Level default values belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}":{"get":{"tags":["/CounterpartyHierarchy/{id}/LevelDefault/{levelDefaultId}/DefaultValue/{defaultValueId}"],"summary":"Returns latest version of a specific Level default value belonging to the parent Level default in json format subject to caller is entitled to view Level default values","operationId":"getEntity","parameters":[{"name":"{defaultValueId}","in":"path","description":"Id of Level default value","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"{levelDefaultId}","in":"path","description":"Id of Level default","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Level default value field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by DefaultValue, not in operator":{"description":"Filter by DefaultValue, not in operator","value":"DefaultValue,NOT_IN,A,B,C"},"Filter by DefaultValue, in operator":{"description":"Filter by DefaultValue, in operator","value":"DefaultValue,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Level default value fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Level default value field","schema":{},"examples":{"Sort by DefaultValue, ascending order":{"description":"Sort by DefaultValue, ascending order","value":"DefaultValue:ASC"},"Sort by DefaultValue, descending order":{"description":"Sort by DefaultValue, descending order","value":"DefaultValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Level default values","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/Levels":{"get":{"tags":["/CounterpartyHierarchy/{id}/Levels"],"summary":"Returns latest versions of all matching Counterparty levels belonging to the parent Counterparty hierarchy in json format subject to caller is entitled to view Counterparty levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyHierarchy/{id}/Levels/{levelsId}":{"get":{"tags":["/CounterpartyHierarchy/{id}/Levels/{levelsId}"],"summary":"Returns latest version of a specific Counterparty level belonging to the parent Counterparty hierarchy in json format subject to caller is entitled to view Counterparty levels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty hierarchy","required":true,"schema":{}},{"name":"{levelsId}","in":"path","description":"Id of Counterparty level","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty level field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty level fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty level field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty levels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyStatusCMD":{"get":{"tags":["/CounterpartyStatusCMD"],"summary":"Returns latest versions of all matching CMD statuses in json format subject to caller is entitled to view CMD statuses","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of CMD status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned CMD statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyStatusCMD/{id}":{"get":{"tags":["/CounterpartyStatusCMD/{id}"],"summary":"Returns latest version of a specific CMD status in json format subject to caller is entitled to view CMD statuses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of CMD status","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of CMD status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned CMD statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartySubtype":{"get":{"tags":["/CounterpartySubtype"],"summary":"Returns latest versions of all matching Counterparty subtypes in json format subject to caller is entitled to view Counterparty subtypes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartySubtype/{id}":{"get":{"tags":["/CounterpartySubtype/{id}"],"summary":"Returns latest version of a specific Counterparty subtype in json format subject to caller is entitled to view Counterparty subtypes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty subtype","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyType":{"get":{"tags":["/CounterpartyType"],"summary":"Returns latest versions of all matching Counterparty types in json format subject to caller is entitled to view Counterparty types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyType/{id}":{"get":{"tags":["/CounterpartyType/{id}"],"summary":"Returns latest version of a specific Counterparty type in json format subject to caller is entitled to view Counterparty types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparty types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyTypeCMD":{"get":{"tags":["/CounterpartyTypeCMD"],"summary":"Returns latest versions of all matching CMD types in json format subject to caller is entitled to view CMD types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of CMD type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned CMD types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CounterpartyTypeCMD/{id}":{"get":{"tags":["/CounterpartyTypeCMD/{id}"],"summary":"Returns latest version of a specific CMD type in json format subject to caller is entitled to view CMD types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of CMD type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the CMD type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of CMD type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any CMD type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned CMD types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Country":{"get":{"tags":["/Country"],"summary":"Returns latest versions of all matching Countries in json format subject to caller is entitled to view Countries","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by NumericCode, not in operator":{"description":"Filter by NumericCode, not in operator","value":"NumericCode,NOT_IN,A,B,C"},"Filter by NumericCode, in operator":{"description":"Filter by NumericCode, in operator","value":"NumericCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Country fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country field","schema":{},"examples":{"Sort by NumericCode, ascending order":{"description":"Sort by NumericCode, ascending order","value":"NumericCode:ASC"},"Sort by NumericCode, descending order":{"description":"Sort by NumericCode, descending order","value":"NumericCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Countries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Country/{id}":{"get":{"tags":["/Country/{id}"],"summary":"Returns latest version of a specific Country in json format subject to caller is entitled to view Countries","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Country","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Country field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by NumericCode, not in operator":{"description":"Filter by NumericCode, not in operator","value":"NumericCode,NOT_IN,A,B,C"},"Filter by NumericCode, in operator":{"description":"Filter by NumericCode, in operator","value":"NumericCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Country fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Country field","schema":{},"examples":{"Sort by NumericCode, ascending order":{"description":"Sort by NumericCode, ascending order","value":"NumericCode:ASC"},"Sort by NumericCode, descending order":{"description":"Sort by NumericCode, descending order","value":"NumericCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Countries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Currency":{"get":{"tags":["/Currency"],"summary":"Returns latest versions of all matching Currencies in json format subject to caller is entitled to view Currencies","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Currency field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Symbol, not in operator":{"description":"Filter by Symbol, not in operator","value":"Symbol,NOT_IN,A,B,C"},"Filter by Symbol, in operator":{"description":"Filter by Symbol, in operator","value":"Symbol,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Currency fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Currency field","schema":{},"examples":{"Sort by Symbol, descending order":{"description":"Sort by Symbol, descending order","value":"Symbol:DESC"},"Sort by Symbol, ascending order":{"description":"Sort by Symbol, ascending order","value":"Symbol:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Currencies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Currency/{id}":{"get":{"tags":["/Currency/{id}"],"summary":"Returns latest version of a specific Currency in json format subject to caller is entitled to view Currencies","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Currency","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Currency field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Symbol, not in operator":{"description":"Filter by Symbol, not in operator","value":"Symbol,NOT_IN,A,B,C"},"Filter by Symbol, in operator":{"description":"Filter by Symbol, in operator","value":"Symbol,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Currency fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Currency field","schema":{},"examples":{"Sort by Symbol, descending order":{"description":"Sort by Symbol, descending order","value":"Symbol:DESC"},"Sort by Symbol, ascending order":{"description":"Sort by Symbol, ascending order","value":"Symbol:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Currencies","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CustomField":{"get":{"tags":["/CustomField"],"summary":"Returns latest versions of all matching Custom fields in json format subject to caller is entitled to view Custom fields","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Custom field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValidationFailureMessage, not in operator":{"description":"Filter by ValidationFailureMessage, not in operator","value":"ValidationFailureMessage,NOT_IN,A,B,C"},"Filter by ValidationFailureMessage, in operator":{"description":"Filter by ValidationFailureMessage, in operator","value":"ValidationFailureMessage,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Custom field fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Custom field field","schema":{},"examples":{"Sort by ValidationFailureMessage, ascending order":{"description":"Sort by ValidationFailureMessage, ascending order","value":"ValidationFailureMessage:ASC"},"Sort by ValidationFailureMessage, descending order":{"description":"Sort by ValidationFailureMessage, descending order","value":"ValidationFailureMessage:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Custom fields","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/CustomField/{id}":{"get":{"tags":["/CustomField/{id}"],"summary":"Returns latest version of a specific Custom field in json format subject to caller is entitled to view Custom fields","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Custom field","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Custom field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValidationFailureMessage, not in operator":{"description":"Filter by ValidationFailureMessage, not in operator","value":"ValidationFailureMessage,NOT_IN,A,B,C"},"Filter by ValidationFailureMessage, in operator":{"description":"Filter by ValidationFailureMessage, in operator","value":"ValidationFailureMessage,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Custom field fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Custom field field","schema":{},"examples":{"Sort by ValidationFailureMessage, ascending order":{"description":"Sort by ValidationFailureMessage, ascending order","value":"ValidationFailureMessage:ASC"},"Sort by ValidationFailureMessage, descending order":{"description":"Sort by ValidationFailureMessage, descending order","value":"ValidationFailureMessage:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Custom fields","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/DealogicIndustry":{"get":{"tags":["/DealogicIndustry"],"summary":"Returns latest versions of all matching Dealogic industries in json format subject to caller is entitled to view Dealogic industries","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Dealogic industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Dealogic industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Dealogic industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Dealogic industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/DealogicIndustry/{id}":{"get":{"tags":["/DealogicIndustry/{id}"],"summary":"Returns latest version of a specific Dealogic industry in json format subject to caller is entitled to view Dealogic industries","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Dealogic industry","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Dealogic industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Dealogic industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Dealogic industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Dealogic industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/DepositoryCodeFormat":{"get":{"tags":["/DepositoryCodeFormat"],"summary":"Returns latest versions of all matching Depository code formats in json format subject to caller is entitled to view Depository code formats","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code format fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code format field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository code formats","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/DepositoryCodeFormat/{id}":{"get":{"tags":["/DepositoryCodeFormat/{id}"],"summary":"Returns latest version of a specific Depository code format in json format subject to caller is entitled to view Depository code formats","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Depository code format","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code format field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code format fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code format field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository code formats","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EconomicArea":{"get":{"tags":["/EconomicArea"],"summary":"Returns latest versions of all matching Economic areas in json format subject to caller is entitled to view Economic areas","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Economic area field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Economic area fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Economic area field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Economic areas","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EconomicArea/{id}":{"get":{"tags":["/EconomicArea/{id}"],"summary":"Returns latest version of a specific Economic area in json format subject to caller is entitled to view Economic areas","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Economic area","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Economic area field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Economic area fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Economic area field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Economic areas","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig":{"get":{"tags":["/EntityConfig"],"summary":"Returns latest versions of all matching Entity configs in json format subject to caller is entitled to view Entity configs","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Entity config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by NumberOfFields, in operator":{"description":"Filter by NumberOfFields, in operator","value":"NumberOfFields,IN,A,B,C"},"Filter by NumberOfFields, not in operator":{"description":"Filter by NumberOfFields, not in operator","value":"NumberOfFields,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Entity config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Entity config field","schema":{},"examples":{"Sort by NumberOfFields, descending order":{"description":"Sort by NumberOfFields, descending order","value":"NumberOfFields:DESC"},"Sort by NumberOfFields, ascending order":{"description":"Sort by NumberOfFields, ascending order","value":"NumberOfFields:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Entity configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig/{id}":{"get":{"tags":["/EntityConfig/{id}"],"summary":"Returns latest version of a specific Entity config in json format subject to caller is entitled to view Entity configs","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Entity config","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Entity config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by NumberOfFields, in operator":{"description":"Filter by NumberOfFields, in operator","value":"NumberOfFields,IN,A,B,C"},"Filter by NumberOfFields, not in operator":{"description":"Filter by NumberOfFields, not in operator","value":"NumberOfFields,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Entity config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Entity config field","schema":{},"examples":{"Sort by NumberOfFields, descending order":{"description":"Sort by NumberOfFields, descending order","value":"NumberOfFields:DESC"},"Sort by NumberOfFields, ascending order":{"description":"Sort by NumberOfFields, ascending order","value":"NumberOfFields:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Entity configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig/{id}/FeedConfigs":{"get":{"tags":["/EntityConfig/{id}/FeedConfigs"],"summary":"Returns latest versions of all matching Feed configs belonging to the parent Entity config in json format subject to caller is entitled to view Feed configs","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Entity config","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TriggerValue, in operator":{"description":"Filter by TriggerValue, in operator","value":"TriggerValue,IN,A,B,C"},"Filter by TriggerValue, not in operator":{"description":"Filter by TriggerValue, not in operator","value":"TriggerValue,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Feed config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed config field","schema":{},"examples":{"Sort by TriggerValue, ascending order":{"description":"Sort by TriggerValue, ascending order","value":"TriggerValue:ASC"},"Sort by TriggerValue, descending order":{"description":"Sort by TriggerValue, descending order","value":"TriggerValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Feed configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig/{id}/FeedConfigs/{feedConfigsId}":{"get":{"tags":["/EntityConfig/{id}/FeedConfigs/{feedConfigsId}"],"summary":"Returns latest version of a specific Feed config belonging to the parent Entity config in json format subject to caller is entitled to view Feed configs","operationId":"getEntity","parameters":[{"name":"{feedConfigsId}","in":"path","description":"Id of Feed config","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Entity config","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TriggerValue, in operator":{"description":"Filter by TriggerValue, in operator","value":"TriggerValue,IN,A,B,C"},"Filter by TriggerValue, not in operator":{"description":"Filter by TriggerValue, not in operator","value":"TriggerValue,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Feed config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed config field","schema":{},"examples":{"Sort by TriggerValue, ascending order":{"description":"Sort by TriggerValue, ascending order","value":"TriggerValue:ASC"},"Sort by TriggerValue, descending order":{"description":"Sort by TriggerValue, descending order","value":"TriggerValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Feed configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig/{id}/FieldConfigs":{"get":{"tags":["/EntityConfig/{id}/FieldConfigs"],"summary":"Returns latest versions of all matching Field configs belonging to the parent Entity config in json format subject to caller is entitled to view Field configs","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Entity config","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Field config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ReferenceFieldId, in operator":{"description":"Filter by ReferenceFieldId, in operator","value":"ReferenceFieldId,IN,A,B,C"},"Filter by ReferenceFieldId, not in operator":{"description":"Filter by ReferenceFieldId, not in operator","value":"ReferenceFieldId,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Field config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Field config field","schema":{},"examples":{"Sort by ReferenceFieldId, ascending order":{"description":"Sort by ReferenceFieldId, ascending order","value":"ReferenceFieldId:ASC"},"Sort by ReferenceFieldId, descending order":{"description":"Sort by ReferenceFieldId, descending order","value":"ReferenceFieldId:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Field configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EntityConfig/{id}/FieldConfigs/{fieldConfigsId}":{"get":{"tags":["/EntityConfig/{id}/FieldConfigs/{fieldConfigsId}"],"summary":"Returns latest version of a specific Field config belonging to the parent Entity config in json format subject to caller is entitled to view Field configs","operationId":"getEntity","parameters":[{"name":"{fieldConfigsId}","in":"path","description":"Id of Field config","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Entity config","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Field config field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ReferenceFieldId, in operator":{"description":"Filter by ReferenceFieldId, in operator","value":"ReferenceFieldId,IN,A,B,C"},"Filter by ReferenceFieldId, not in operator":{"description":"Filter by ReferenceFieldId, not in operator","value":"ReferenceFieldId,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Field config fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Field config field","schema":{},"examples":{"Sort by ReferenceFieldId, ascending order":{"description":"Sort by ReferenceFieldId, ascending order","value":"ReferenceFieldId:ASC"},"Sort by ReferenceFieldId, descending order":{"description":"Sort by ReferenceFieldId, descending order","value":"ReferenceFieldId:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Field configs","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EventDate":{"get":{"tags":["/EventDate"],"summary":"Returns latest versions of all matching Event dates in json format subject to caller is entitled to view Event dates","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Event date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Event date fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Event date field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Event dates","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/EventDate/{id}":{"get":{"tags":["/EventDate/{id}"],"summary":"Returns latest version of a specific Event date in json format subject to caller is entitled to view Event dates","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Event date","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Event date field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Event date fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Event date field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Event dates","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Exchange":{"get":{"tags":["/Exchange"],"summary":"Returns latest versions of all matching Exchanges in json format subject to caller is entitled to view Exchanges","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Exchange field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Exchange fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Exchange field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Exchanges","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Exchange/{id}":{"get":{"tags":["/Exchange/{id}"],"summary":"Returns latest version of a specific Exchange in json format subject to caller is entitled to view Exchanges","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Exchange","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Exchange field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Exchange fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Exchange field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Exchanges","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Feed":{"get":{"tags":["/Feed"],"summary":"Returns latest versions of all matching Feeds in json format subject to caller is entitled to view Feeds","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TriggerValue, in operator":{"description":"Filter by TriggerValue, in operator","value":"TriggerValue,IN,A,B,C"},"Filter by TriggerValue, not in operator":{"description":"Filter by TriggerValue, not in operator","value":"TriggerValue,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Feed fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed field","schema":{},"examples":{"Sort by TriggerValue, ascending order":{"description":"Sort by TriggerValue, ascending order","value":"TriggerValue:ASC"},"Sort by TriggerValue, descending order":{"description":"Sort by TriggerValue, descending order","value":"TriggerValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Feeds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Feed/{id}":{"get":{"tags":["/Feed/{id}"],"summary":"Returns latest version of a specific Feed in json format subject to caller is entitled to view Feeds","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Feed","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Feed field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TriggerValue, in operator":{"description":"Filter by TriggerValue, in operator","value":"TriggerValue,IN,A,B,C"},"Filter by TriggerValue, not in operator":{"description":"Filter by TriggerValue, not in operator","value":"TriggerValue,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Feed fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Feed field","schema":{},"examples":{"Sort by TriggerValue, ascending order":{"description":"Sort by TriggerValue, ascending order","value":"TriggerValue:ASC"},"Sort by TriggerValue, descending order":{"description":"Sort by TriggerValue, descending order","value":"TriggerValue:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Feeds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightCharge":{"get":{"tags":["/FreightCharge"],"summary":"Returns latest versions of all matching Charges in json format subject to caller is entitled to view Charges","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Charge field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Charge fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Charge field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Charges","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightCharge/{id}":{"get":{"tags":["/FreightCharge/{id}"],"summary":"Returns latest version of a specific Charge in json format subject to caller is entitled to view Charges","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Charge","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Charge field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Charge fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Charge field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Charges","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightIndex":{"get":{"tags":["/FreightIndex"],"summary":"Returns latest versions of all matching Freight indexes in json format subject to caller is entitled to view Freight indexes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight index field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TradingPlace, not in operator":{"description":"Filter by TradingPlace, not in operator","value":"TradingPlace,NOT_IN,A,B,C"},"Filter by TradingPlace, in operator":{"description":"Filter by TradingPlace, in operator","value":"TradingPlace,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Freight index fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight index field","schema":{},"examples":{"Sort by TradingPlace, ascending order":{"description":"Sort by TradingPlace, ascending order","value":"TradingPlace:ASC"},"Sort by TradingPlace, descending order":{"description":"Sort by TradingPlace, descending order","value":"TradingPlace:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Freight indexes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightIndex/{id}":{"get":{"tags":["/FreightIndex/{id}"],"summary":"Returns latest version of a specific Freight index in json format subject to caller is entitled to view Freight indexes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Freight index","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight index field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TradingPlace, not in operator":{"description":"Filter by TradingPlace, not in operator","value":"TradingPlace,NOT_IN,A,B,C"},"Filter by TradingPlace, in operator":{"description":"Filter by TradingPlace, in operator","value":"TradingPlace,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Freight index fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight index field","schema":{},"examples":{"Sort by TradingPlace, ascending order":{"description":"Sort by TradingPlace, ascending order","value":"TradingPlace:ASC"},"Sort by TradingPlace, descending order":{"description":"Sort by TradingPlace, descending order","value":"TradingPlace:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Freight indexes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightPaymentTerm":{"get":{"tags":["/FreightPaymentTerm"],"summary":"Returns latest versions of all matching Freight payment terms in json format subject to caller is entitled to view Freight payment terms","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight payment term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Freight payment term fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight payment term field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Freight payment terms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/FreightPaymentTerm/{id}":{"get":{"tags":["/FreightPaymentTerm/{id}"],"summary":"Returns latest version of a specific Freight payment term in json format subject to caller is entitled to view Freight payment terms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Freight payment term","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Freight payment term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Freight payment term fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Freight payment term field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Freight payment terms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Future":{"get":{"tags":["/Future"],"summary":"Returns latest versions of all matching Futures in json format subject to caller is entitled to view Futures","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Future field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Ticker, not in operator":{"description":"Filter by Ticker, not in operator","value":"Ticker,NOT_IN,A,B,C"},"Filter by Ticker, in operator":{"description":"Filter by Ticker, in operator","value":"Ticker,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Future fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Future field","schema":{},"examples":{"Sort by Ticker, ascending order":{"description":"Sort by Ticker, ascending order","value":"Ticker:ASC"},"Sort by Ticker, descending order":{"description":"Sort by Ticker, descending order","value":"Ticker:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Futures","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Future/{id}":{"get":{"tags":["/Future/{id}"],"summary":"Returns latest version of a specific Future in json format subject to caller is entitled to view Futures","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Future","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Future field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Ticker, not in operator":{"description":"Filter by Ticker, not in operator","value":"Ticker,NOT_IN,A,B,C"},"Filter by Ticker, in operator":{"description":"Filter by Ticker, in operator","value":"Ticker,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Future fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Future field","schema":{},"examples":{"Sort by Ticker, ascending order":{"description":"Sort by Ticker, ascending order","value":"Ticker:ASC"},"Sort by Ticker, descending order":{"description":"Sort by Ticker, descending order","value":"Ticker:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Futures","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GICSIndustry":{"get":{"tags":["/GICSIndustry"],"summary":"Returns latest versions of all matching GICS industries in json format subject to caller is entitled to view GICS industries","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the GICS industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of GICS industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any GICS industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned GICS industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GICSIndustry/{id}":{"get":{"tags":["/GICSIndustry/{id}"],"summary":"Returns latest version of a specific GICS industry in json format subject to caller is entitled to view GICS industries","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of GICS industry","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the GICS industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of GICS industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any GICS industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned GICS industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GeoZone":{"get":{"tags":["/GeoZone"],"summary":"Returns latest versions of all matching Geo zones in json format subject to caller is entitled to view Geo zones","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Geo zone field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Zone, not in operator":{"description":"Filter by Zone, not in operator","value":"Zone,NOT_IN,A,B,C"},"Filter by Zone, in operator":{"description":"Filter by Zone, in operator","value":"Zone,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Geo zone fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Geo zone field","schema":{},"examples":{"Sort by Zone, ascending order":{"description":"Sort by Zone, ascending order","value":"Zone:ASC"},"Sort by Zone, descending order":{"description":"Sort by Zone, descending order","value":"Zone:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Geo zones","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GeoZone/{id}":{"get":{"tags":["/GeoZone/{id}"],"summary":"Returns latest version of a specific Geo zone in json format subject to caller is entitled to view Geo zones","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Geo zone","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Geo zone field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Zone, not in operator":{"description":"Filter by Zone, not in operator","value":"Zone,NOT_IN,A,B,C"},"Filter by Zone, in operator":{"description":"Filter by Zone, in operator","value":"Zone,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Geo zone fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Geo zone field","schema":{},"examples":{"Sort by Zone, ascending order":{"description":"Sort by Zone, ascending order","value":"Zone:ASC"},"Sort by Zone, descending order":{"description":"Sort by Zone, descending order","value":"Zone:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Geo zones","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Grade":{"get":{"tags":["/Grade"],"summary":"Returns latest versions of all matching Grades in json format subject to caller is entitled to view Grades","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Standard, not in operator":{"description":"Filter by Standard, not in operator","value":"Standard,NOT_IN,A,B,C"},"Filter by Standard, in operator":{"description":"Filter by Standard, in operator","value":"Standard,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Grade fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade field","schema":{},"examples":{"Sort by Standard, descending order":{"description":"Sort by Standard, descending order","value":"Standard:DESC"},"Sort by Standard, ascending order":{"description":"Sort by Standard, ascending order","value":"Standard:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Grades","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Grade/{id}":{"get":{"tags":["/Grade/{id}"],"summary":"Returns latest version of a specific Grade in json format subject to caller is entitled to view Grades","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Grade","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Standard, not in operator":{"description":"Filter by Standard, not in operator","value":"Standard,NOT_IN,A,B,C"},"Filter by Standard, in operator":{"description":"Filter by Standard, in operator","value":"Standard,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Grade fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade field","schema":{},"examples":{"Sort by Standard, descending order":{"description":"Sort by Standard, descending order","value":"Standard:DESC"},"Sort by Standard, ascending order":{"description":"Sort by Standard, ascending order","value":"Standard:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Grades","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GradeFactor":{"get":{"tags":["/GradeFactor"],"summary":"Returns latest versions of all matching Grade factors in json format subject to caller is entitled to view Grade factors","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade factor field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Grade factor fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade factor field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Grade factors","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/GradeFactor/{id}":{"get":{"tags":["/GradeFactor/{id}"],"summary":"Returns latest version of a specific Grade factor in json format subject to caller is entitled to view Grade factors","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Grade factor","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Grade factor field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Grade factor fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Grade factor field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Grade factors","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Incoterm":{"get":{"tags":["/Incoterm"],"summary":"Returns latest versions of all matching Incoterms in json format subject to caller is entitled to view Incoterms","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Incoterm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Version, in operator":{"description":"Filter by Version, in operator","value":"Version,IN,A,B,C"},"Filter by Version, not in operator":{"description":"Filter by Version, not in operator","value":"Version,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Incoterm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Incoterm field","schema":{},"examples":{"Sort by Version, ascending order":{"description":"Sort by Version, ascending order","value":"Version:ASC"},"Sort by Version, descending order":{"description":"Sort by Version, descending order","value":"Version:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Incoterms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Incoterm/{id}":{"get":{"tags":["/Incoterm/{id}"],"summary":"Returns latest version of a specific Incoterm in json format subject to caller is entitled to view Incoterms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Incoterm","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Incoterm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Version, in operator":{"description":"Filter by Version, in operator","value":"Version,IN,A,B,C"},"Filter by Version, not in operator":{"description":"Filter by Version, not in operator","value":"Version,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Incoterm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Incoterm field","schema":{},"examples":{"Sort by Version, ascending order":{"description":"Sort by Version, ascending order","value":"Version:ASC"},"Sort by Version, descending order":{"description":"Sort by Version, descending order","value":"Version:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Incoterms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/InheritableField":{"get":{"tags":["/InheritableField"],"summary":"Returns latest versions of all matching Inheritable fields in json format subject to caller is entitled to view Inheritable fields","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Inheritable field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Inheritable field fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Inheritable field field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Inheritable fields","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/InheritableField/{id}":{"get":{"tags":["/InheritableField/{id}"],"summary":"Returns latest version of a specific Inheritable field in json format subject to caller is entitled to view Inheritable fields","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Inheritable field","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Inheritable field field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Inheritable field fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Inheritable field field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Inheritable fields","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/InvestorType":{"get":{"tags":["/InvestorType"],"summary":"Returns latest versions of all matching Investor types in json format subject to caller is entitled to view Investor types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investor type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investor type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investor type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investor types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/InvestorType/{id}":{"get":{"tags":["/InvestorType/{id}"],"summary":"Returns latest version of a specific Investor type in json format subject to caller is entitled to view Investor types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Investor type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investor type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investor type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investor type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investor types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/IonUser":{"get":{"tags":["/IonUser"],"summary":"Returns latest versions of all matching ION users in json format subject to caller is entitled to view ION users","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the ION user field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RCFieldName, in operator":{"description":"Filter by RCFieldName, in operator","value":"RCFieldName,IN,A,B,C"},"Filter by RCFieldName, not in operator":{"description":"Filter by RCFieldName, not in operator","value":"RCFieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of ION user fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any ION user field","schema":{},"examples":{"Sort by RCFieldName, descending order":{"description":"Sort by RCFieldName, descending order","value":"RCFieldName:DESC"},"Sort by RCFieldName, ascending order":{"description":"Sort by RCFieldName, ascending order","value":"RCFieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned ION users","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/IonUser/{id}":{"get":{"tags":["/IonUser/{id}"],"summary":"Returns latest version of a specific ION user in json format subject to caller is entitled to view ION users","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of ION user","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the ION user field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RCFieldName, in operator":{"description":"Filter by RCFieldName, in operator","value":"RCFieldName,IN,A,B,C"},"Filter by RCFieldName, not in operator":{"description":"Filter by RCFieldName, not in operator","value":"RCFieldName,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of ION user fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any ION user field","schema":{},"examples":{"Sort by RCFieldName, descending order":{"description":"Sort by RCFieldName, descending order","value":"RCFieldName:DESC"},"Sort by RCFieldName, ascending order":{"description":"Sort by RCFieldName, ascending order","value":"RCFieldName:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned ION users","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LaytimeTerm":{"get":{"tags":["/LaytimeTerm"],"summary":"Returns latest versions of all matching Laytime terms in json format subject to caller is entitled to view Laytime terms","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Laytime term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Laytime term fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Laytime term field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Laytime terms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LaytimeTerm/{id}":{"get":{"tags":["/LaytimeTerm/{id}"],"summary":"Returns latest version of a specific Laytime term in json format subject to caller is entitled to view Laytime terms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Laytime term","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Laytime term field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Laytime term fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Laytime term field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Laytime terms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity":{"get":{"tags":["/LegalEntity"],"summary":"Returns latest versions of all matching Legal entities in json format subject to caller is entitled to view Legal entities","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by XtractUnderwriterId, in operator":{"description":"Filter by XtractUnderwriterId, in operator","value":"XtractUnderwriterId,IN,A,B,C"},"Filter by XtractUnderwriterId, not in operator":{"description":"Filter by XtractUnderwriterId, not in operator","value":"XtractUnderwriterId,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Legal entity fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity field","schema":{},"examples":{"Sort by XtractUnderwriterId, ascending order":{"description":"Sort by XtractUnderwriterId, ascending order","value":"XtractUnderwriterId:ASC"},"Sort by XtractUnderwriterId, descending order":{"description":"Sort by XtractUnderwriterId, descending order","value":"XtractUnderwriterId:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Legal entities","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}":{"get":{"tags":["/LegalEntity/{id}"],"summary":"Returns latest version of a specific Legal entity in json format subject to caller is entitled to view Legal entities","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by XtractUnderwriterId, in operator":{"description":"Filter by XtractUnderwriterId, in operator","value":"XtractUnderwriterId,IN,A,B,C"},"Filter by XtractUnderwriterId, not in operator":{"description":"Filter by XtractUnderwriterId, not in operator","value":"XtractUnderwriterId,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Legal entity fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity field","schema":{},"examples":{"Sort by XtractUnderwriterId, ascending order":{"description":"Sort by XtractUnderwriterId, ascending order","value":"XtractUnderwriterId:ASC"},"Sort by XtractUnderwriterId, descending order":{"description":"Sort by XtractUnderwriterId, descending order","value":"XtractUnderwriterId:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Legal entities","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/BusinessVersions":{"get":{"tags":["/LegalEntity/{id}/BusinessVersions"],"summary":"Returns latest versions of all matching Business versions belonging to the parent Legal entity in json format subject to caller is entitled to view Business versions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business version field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValidTo, not in operator":{"description":"Filter by ValidTo, not in operator","value":"ValidTo,NOT_IN,A,B,C"},"Filter by ValidTo, in operator":{"description":"Filter by ValidTo, in operator","value":"ValidTo,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business version fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business version field","schema":{},"examples":{"Sort by ValidTo, ascending order":{"description":"Sort by ValidTo, ascending order","value":"ValidTo:ASC"},"Sort by ValidTo, descending order":{"description":"Sort by ValidTo, descending order","value":"ValidTo:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business versions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/BusinessVersions/{businessVersionsId}":{"get":{"tags":["/LegalEntity/{id}/BusinessVersions/{businessVersionsId}"],"summary":"Returns latest version of a specific Business version belonging to the parent Legal entity in json format subject to caller is entitled to view Business versions","operationId":"getEntity","parameters":[{"name":"{businessVersionsId}","in":"path","description":"Id of Business version","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business version field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ValidTo, not in operator":{"description":"Filter by ValidTo, not in operator","value":"ValidTo,NOT_IN,A,B,C"},"Filter by ValidTo, in operator":{"description":"Filter by ValidTo, in operator","value":"ValidTo,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business version fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business version field","schema":{},"examples":{"Sort by ValidTo, ascending order":{"description":"Sort by ValidTo, ascending order","value":"ValidTo:ASC"},"Sort by ValidTo, descending order":{"description":"Sort by ValidTo, descending order","value":"ValidTo:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business versions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/OwnershipStakes":{"get":{"tags":["/LegalEntity/{id}/OwnershipStakes"],"summary":"Returns latest versions of all matching Ownership stakes belonging to the parent Legal entity in json format subject to caller is entitled to view Ownership stakes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership stake field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ownership stake fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership stake field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ownership stakes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/OwnershipStakes/{ownershipStakesId}":{"get":{"tags":["/LegalEntity/{id}/OwnershipStakes/{ownershipStakesId}"],"summary":"Returns latest version of a specific Ownership stake belonging to the parent Legal entity in json format subject to caller is entitled to view Ownership stakes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"{ownershipStakesId}","in":"path","description":"Id of Ownership stake","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership stake field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ownership stake fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership stake field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ownership stakes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/Synonyms":{"get":{"tags":["/LegalEntity/{id}/Synonyms"],"summary":"Returns latest versions of all matching Legal entity synonyms belonging to the parent Legal entity in json format subject to caller is entitled to view Legal entity synonyms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity synonym field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Legal entity synonym fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity synonym field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Legal entity synonyms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/LegalEntity/{id}/Synonyms/{synonymsId}":{"get":{"tags":["/LegalEntity/{id}/Synonyms/{synonymsId}"],"summary":"Returns latest version of a specific Legal entity synonym belonging to the parent Legal entity in json format subject to caller is entitled to view Legal entity synonyms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"{synonymsId}","in":"path","description":"Id of Legal entity synonym","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Legal entity synonym field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Legal entity synonym fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Legal entity synonym field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Legal entity synonyms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/binary/LegalEntity/{id}/Logo":{"get":{"tags":["/binary/LegalEntity/{id}/Logo"],"summary":"Returns latest versions of all matching Legal entities belonging to the parent Legal entity in json format subject to caller is entitled to view Legal entities","operationId":"downloadBinary","parameters":[{"name":"{id}","in":"path","description":"Id of Legal entity","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ModeOfTransport":{"get":{"tags":["/ModeOfTransport"],"summary":"Returns latest versions of all matching Mode of transports in json format subject to caller is entitled to view Mode of transports","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Mode of transport field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Mode of transport fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Mode of transport field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Mode of transports","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/ModeOfTransport/{id}":{"get":{"tags":["/ModeOfTransport/{id}"],"summary":"Returns latest version of a specific Mode of transport in json format subject to caller is entitled to view Mode of transports","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Mode of transport","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Mode of transport field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Mode of transport fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Mode of transport field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Mode of transports","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/NAICS2017Industry":{"get":{"tags":["/NAICS2017Industry"],"summary":"Returns latest versions of all matching NAICS 2017 industries in json format subject to caller is entitled to view NAICS 2017 industries","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the NAICS 2017 industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of NAICS 2017 industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any NAICS 2017 industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned NAICS 2017 industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/NAICS2017Industry/{id}":{"get":{"tags":["/NAICS2017Industry/{id}"],"summary":"Returns latest version of a specific NAICS 2017 industry in json format subject to caller is entitled to view NAICS 2017 industries","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of NAICS 2017 industry","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the NAICS 2017 industry field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of NAICS 2017 industry fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any NAICS 2017 industry field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned NAICS 2017 industries","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/OwnershipType":{"get":{"tags":["/OwnershipType"],"summary":"Returns latest versions of all matching Ownership types in json format subject to caller is entitled to view Ownership types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ownership type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ownership types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/OwnershipType/{id}":{"get":{"tags":["/OwnershipType/{id}"],"summary":"Returns latest version of a specific Ownership type in json format subject to caller is entitled to view Ownership types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Ownership type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ownership type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ownership type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ownership type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ownership types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Packaging":{"get":{"tags":["/Packaging"],"summary":"Returns latest versions of all matching Packagings in json format subject to caller is entitled to view Packagings","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Packaging field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Packaging fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Packaging field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Packagings","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Packaging/{id}":{"get":{"tags":["/Packaging/{id}"],"summary":"Returns latest version of a specific Packaging in json format subject to caller is entitled to view Packagings","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Packaging","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Packaging field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Packaging fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Packaging field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Packagings","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port":{"get":{"tags":["/Port"],"summary":"Returns latest versions of all matching Ports in json format subject to caller is entitled to view Ports","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by UNCode, not in operator":{"description":"Filter by UNCode, not in operator","value":"UNCode,NOT_IN,A,B,C"},"Filter by UNCode, in operator":{"description":"Filter by UNCode, in operator","value":"UNCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Port fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port field","schema":{},"examples":{"Sort by UNCode, descending order":{"description":"Sort by UNCode, descending order","value":"UNCode:DESC"},"Sort by UNCode, ascending order":{"description":"Sort by UNCode, ascending order","value":"UNCode:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ports","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port/{id}":{"get":{"tags":["/Port/{id}"],"summary":"Returns latest version of a specific Port in json format subject to caller is entitled to view Ports","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Port","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by UNCode, not in operator":{"description":"Filter by UNCode, not in operator","value":"UNCode,NOT_IN,A,B,C"},"Filter by UNCode, in operator":{"description":"Filter by UNCode, in operator","value":"UNCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Port fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port field","schema":{},"examples":{"Sort by UNCode, descending order":{"description":"Sort by UNCode, descending order","value":"UNCode:DESC"},"Sort by UNCode, ascending order":{"description":"Sort by UNCode, ascending order","value":"UNCode:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ports","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port/{id}/AlternativeNames":{"get":{"tags":["/Port/{id}/AlternativeNames"],"summary":"Returns latest versions of all matching Alternative port names belonging to the parent Port in json format subject to caller is entitled to view Alternative port names","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Port","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Alternative port name field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Alternative port name fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Alternative port name field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Alternative port names","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port/{id}/AlternativeNames/{alternativeNamesId}":{"get":{"tags":["/Port/{id}/AlternativeNames/{alternativeNamesId}"],"summary":"Returns latest version of a specific Alternative port name belonging to the parent Port in json format subject to caller is entitled to view Alternative port names","operationId":"getEntity","parameters":[{"name":"{alternativeNamesId}","in":"path","description":"Id of Alternative port name","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Port","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Alternative port name field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Alternative port name fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Alternative port name field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Alternative port names","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port/{id}/Terminals":{"get":{"tags":["/Port/{id}/Terminals"],"summary":"Returns latest versions of all matching Port terminals belonging to the parent Port in json format subject to caller is entitled to view Port terminals","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Port","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port terminal field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Restrictions, in operator":{"description":"Filter by Restrictions, in operator","value":"Restrictions,IN,A,B,C"},"Filter by Restrictions, not in operator":{"description":"Filter by Restrictions, not in operator","value":"Restrictions,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Port terminal fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port terminal field","schema":{},"examples":{"Sort by Restrictions, descending order":{"description":"Sort by Restrictions, descending order","value":"Restrictions:DESC"},"Sort by Restrictions, ascending order":{"description":"Sort by Restrictions, ascending order","value":"Restrictions:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Port terminals","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Port/{id}/Terminals/{terminalsId}":{"get":{"tags":["/Port/{id}/Terminals/{terminalsId}"],"summary":"Returns latest version of a specific Port terminal belonging to the parent Port in json format subject to caller is entitled to view Port terminals","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Port","required":true,"schema":{}},{"name":"{terminalsId}","in":"path","description":"Id of Port terminal","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Port terminal field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Restrictions, in operator":{"description":"Filter by Restrictions, in operator","value":"Restrictions,IN,A,B,C"},"Filter by Restrictions, not in operator":{"description":"Filter by Restrictions, not in operator","value":"Restrictions,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Port terminal fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Port terminal field","schema":{},"examples":{"Sort by Restrictions, descending order":{"description":"Sort by Restrictions, descending order","value":"Restrictions:DESC"},"Sort by Restrictions, ascending order":{"description":"Sort by Restrictions, ascending order","value":"Restrictions:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Port terminals","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/SalesRep":{"get":{"tags":["/SalesRep"],"summary":"Returns latest versions of all matching Sales representatives in json format subject to caller is entitled to view Sales representatives","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Sales representative fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Sales representatives","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/SalesRep/{id}":{"get":{"tags":["/SalesRep/{id}"],"summary":"Returns latest version of a specific Sales representative in json format subject to caller is entitled to view Sales representatives","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Sales representative","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Sales representative fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Sales representatives","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/SalesRepGroup":{"get":{"tags":["/SalesRepGroup"],"summary":"Returns latest versions of all matching Sales representative groups in json format subject to caller is entitled to view Sales representative groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Sales representative group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Sales representative groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/SalesRepGroup/{id}":{"get":{"tags":["/SalesRepGroup/{id}"],"summary":"Returns latest version of a specific Sales representative group in json format subject to caller is entitled to view Sales representative groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Sales representative group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Sales representative group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Sales representative group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Sales representative group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Sales representative groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/TaxCode":{"get":{"tags":["/TaxCode"],"summary":"Returns latest versions of all matching Tax codes in json format subject to caller is entitled to view Tax codes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Tax code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TaxCode, not in operator":{"description":"Filter by TaxCode, not in operator","value":"TaxCode,NOT_IN,A,B,C"},"Filter by TaxCode, in operator":{"description":"Filter by TaxCode, in operator","value":"TaxCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Tax code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Tax code field","schema":{},"examples":{"Sort by TaxCode, descending order":{"description":"Sort by TaxCode, descending order","value":"TaxCode:DESC"},"Sort by TaxCode, ascending order":{"description":"Sort by TaxCode, ascending order","value":"TaxCode:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Tax codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/TaxCode/{id}":{"get":{"tags":["/TaxCode/{id}"],"summary":"Returns latest version of a specific Tax code in json format subject to caller is entitled to view Tax codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Tax code","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Tax code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by TaxCode, not in operator":{"description":"Filter by TaxCode, not in operator","value":"TaxCode,NOT_IN,A,B,C"},"Filter by TaxCode, in operator":{"description":"Filter by TaxCode, in operator","value":"TaxCode,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Tax code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Tax code field","schema":{},"examples":{"Sort by TaxCode, descending order":{"description":"Sort by TaxCode, descending order","value":"TaxCode:DESC"},"Sort by TaxCode, ascending order":{"description":"Sort by TaxCode, ascending order","value":"TaxCode:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Tax codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/UnitOfMeasure":{"get":{"tags":["/UnitOfMeasure"],"summary":"Returns latest versions of all matching Unit of measures in json format subject to caller is entitled to view Unit of measures","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Unit of measure fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Unit of measures","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/UnitOfMeasure/{id}":{"get":{"tags":["/UnitOfMeasure/{id}"],"summary":"Returns latest version of a specific Unit of measure in json format subject to caller is entitled to view Unit of measures","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Unit of measure","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Unit of measure fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Unit of measures","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/UnitOfMeasureType":{"get":{"tags":["/UnitOfMeasureType"],"summary":"Returns latest versions of all matching Unit of measure types in json format subject to caller is entitled to view Unit of measure types","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Unit of measure type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Unit of measure types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/UnitOfMeasureType/{id}":{"get":{"tags":["/UnitOfMeasureType/{id}"],"summary":"Returns latest version of a specific Unit of measure type in json format subject to caller is entitled to view Unit of measure types","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Unit of measure type","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Unit of measure type field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Unit of measure type fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Unit of measure type field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Unit of measure types","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel":{"get":{"tags":["/Vessel"],"summary":"Returns latest versions of all matching Vessels in json format subject to caller is entitled to view Vessels","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ShipBuilder, not in operator":{"description":"Filter by ShipBuilder, not in operator","value":"ShipBuilder,NOT_IN,A,B,C"},"Filter by ShipBuilder, in operator":{"description":"Filter by ShipBuilder, in operator","value":"ShipBuilder,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel field","schema":{},"examples":{"Sort by ShipBuilder, ascending order":{"description":"Sort by ShipBuilder, ascending order","value":"ShipBuilder:ASC"},"Sort by ShipBuilder, descending order":{"description":"Sort by ShipBuilder, descending order","value":"ShipBuilder:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}":{"get":{"tags":["/Vessel/{id}"],"summary":"Returns latest version of a specific Vessel in json format subject to caller is entitled to view Vessels","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by ShipBuilder, not in operator":{"description":"Filter by ShipBuilder, not in operator","value":"ShipBuilder,NOT_IN,A,B,C"},"Filter by ShipBuilder, in operator":{"description":"Filter by ShipBuilder, in operator","value":"ShipBuilder,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel field","schema":{},"examples":{"Sort by ShipBuilder, ascending order":{"description":"Sort by ShipBuilder, ascending order","value":"ShipBuilder:ASC"},"Sort by ShipBuilder, descending order":{"description":"Sort by ShipBuilder, descending order","value":"ShipBuilder:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessels","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/AuxiliaryConsumptions":{"get":{"tags":["/Vessel/{id}/AuxiliaryConsumptions"],"summary":"Returns latest versions of all matching Vessel auxiliary consumptions belonging to the parent Vessel in json format subject to caller is entitled to view Vessel auxiliary consumptions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel auxiliary consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel auxiliary consumption fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel auxiliary consumption field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel auxiliary consumptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/AuxiliaryConsumptions/{auxiliaryConsumptionsId}":{"get":{"tags":["/Vessel/{id}/AuxiliaryConsumptions/{auxiliaryConsumptionsId}"],"summary":"Returns latest version of a specific Vessel auxiliary consumption belonging to the parent Vessel in json format subject to caller is entitled to view Vessel auxiliary consumptions","operationId":"getEntity","parameters":[{"name":"{auxiliaryConsumptionsId}","in":"path","description":"Id of Vessel auxiliary consumption","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel auxiliary consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel auxiliary consumption fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel auxiliary consumption field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel auxiliary consumptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/BunkerTanks":{"get":{"tags":["/Vessel/{id}/BunkerTanks"],"summary":"Returns latest versions of all matching Bunker tanks belonging to the parent Vessel in json format subject to caller is entitled to view Bunker tanks","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker tank field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker tank fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker tank field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker tanks","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/BunkerTanks/{bunkerTanksId}":{"get":{"tags":["/Vessel/{id}/BunkerTanks/{bunkerTanksId}"],"summary":"Returns latest version of a specific Bunker tank belonging to the parent Vessel in json format subject to caller is entitled to view Bunker tanks","operationId":"getEntity","parameters":[{"name":"{bunkerTanksId}","in":"path","description":"Id of Bunker tank","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bunker tank field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bunker tank fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bunker tank field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bunker tanks","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Emissions":{"get":{"tags":["/Vessel/{id}/Emissions"],"summary":"Returns latest versions of all matching Emissions belonging to the parent Vessel in json format subject to caller is entitled to view Emissions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Emission field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Emission fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Emission field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Emissions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Emissions/{emissionsId}":{"get":{"tags":["/Vessel/{id}/Emissions/{emissionsId}"],"summary":"Returns latest version of a specific Emission belonging to the parent Vessel in json format subject to caller is entitled to view Emissions","operationId":"getEntity","parameters":[{"name":"{emissionsId}","in":"path","description":"Id of Emission","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Emission field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Emission fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Emission field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Emissions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Holds":{"get":{"tags":["/Vessel/{id}/Holds"],"summary":"Returns latest versions of all matching Holds belonging to the parent Vessel in json format subject to caller is entitled to view Holds","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Hold field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Hold fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Hold field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Holds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Holds/{holdsId}":{"get":{"tags":["/Vessel/{id}/Holds/{holdsId}"],"summary":"Returns latest version of a specific Hold belonging to the parent Vessel in json format subject to caller is entitled to view Holds","operationId":"getEntity","parameters":[{"name":"{holdsId}","in":"path","description":"Id of Hold","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Hold field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Hold fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Hold field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Holds","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/NameHistory":{"get":{"tags":["/Vessel/{id}/NameHistory"],"summary":"Returns latest versions of all matching Vessel histories belonging to the parent Vessel in json format subject to caller is entitled to view Vessel histories","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel history field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RegisteredOwner, not in operator":{"description":"Filter by RegisteredOwner, not in operator","value":"RegisteredOwner,NOT_IN,A,B,C"},"Filter by RegisteredOwner, in operator":{"description":"Filter by RegisteredOwner, in operator","value":"RegisteredOwner,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel history fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel history field","schema":{},"examples":{"Sort by RegisteredOwner, descending order":{"description":"Sort by RegisteredOwner, descending order","value":"RegisteredOwner:DESC"},"Sort by RegisteredOwner, ascending order":{"description":"Sort by RegisteredOwner, ascending order","value":"RegisteredOwner:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel histories","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/NameHistory/{nameHistoryId}":{"get":{"tags":["/Vessel/{id}/NameHistory/{nameHistoryId}"],"summary":"Returns latest version of a specific Vessel history belonging to the parent Vessel in json format subject to caller is entitled to view Vessel histories","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"{nameHistoryId}","in":"path","description":"Id of Vessel history","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel history field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by RegisteredOwner, not in operator":{"description":"Filter by RegisteredOwner, not in operator","value":"RegisteredOwner,NOT_IN,A,B,C"},"Filter by RegisteredOwner, in operator":{"description":"Filter by RegisteredOwner, in operator","value":"RegisteredOwner,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel history fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel history field","schema":{},"examples":{"Sort by RegisteredOwner, descending order":{"description":"Sort by RegisteredOwner, descending order","value":"RegisteredOwner:DESC"},"Sort by RegisteredOwner, ascending order":{"description":"Sort by RegisteredOwner, ascending order","value":"RegisteredOwner:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel histories","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/ShipsGears":{"get":{"tags":["/Vessel/{id}/ShipsGears"],"summary":"Returns latest versions of all matching Ships gears belonging to the parent Vessel in json format subject to caller is entitled to view Ships gears","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ships gear field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ships gear fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ships gear field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ships gears","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/ShipsGears/{shipsGearsId}":{"get":{"tags":["/Vessel/{id}/ShipsGears/{shipsGearsId}"],"summary":"Returns latest version of a specific Ships gear belonging to the parent Vessel in json format subject to caller is entitled to view Ships gears","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"{shipsGearsId}","in":"path","description":"Id of Ships gear","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Ships gear field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Ships gear fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Ships gear field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Ships gears","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/SpeedAndConsumptions":{"get":{"tags":["/Vessel/{id}/SpeedAndConsumptions"],"summary":"Returns latest versions of all matching Vessel speed and consumptions belonging to the parent Vessel in json format subject to caller is entitled to view Vessel speed and consumptions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed and consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel speed and consumption fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed and consumption field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel speed and consumptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/SpeedAndConsumptions/{speedAndConsumptionsId}":{"get":{"tags":["/Vessel/{id}/SpeedAndConsumptions/{speedAndConsumptionsId}"],"summary":"Returns latest version of a specific Vessel speed and consumption belonging to the parent Vessel in json format subject to caller is entitled to view Vessel speed and consumptions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"{speedAndConsumptionsId}","in":"path","description":"Id of Vessel speed and consumption","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed and consumption field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel speed and consumption fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed and consumption field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel speed and consumptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Vettings":{"get":{"tags":["/Vessel/{id}/Vettings"],"summary":"Returns latest versions of all matching Vettings belonging to the parent Vessel in json format subject to caller is entitled to view Vettings","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vetting field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Value, in operator":{"description":"Filter by Value, in operator","value":"Value,IN,A,B,C"},"Filter by Value, not in operator":{"description":"Filter by Value, not in operator","value":"Value,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vetting fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vetting field","schema":{},"examples":{"Sort by Value, descending order":{"description":"Sort by Value, descending order","value":"Value:DESC"},"Sort by Value, ascending order":{"description":"Sort by Value, ascending order","value":"Value:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vettings","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Vessel/{id}/Vettings/{vettingsId}":{"get":{"tags":["/Vessel/{id}/Vettings/{vettingsId}"],"summary":"Returns latest version of a specific Vetting belonging to the parent Vessel in json format subject to caller is entitled to view Vettings","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"{vettingsId}","in":"path","description":"Id of Vetting","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vetting field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Value, in operator":{"description":"Filter by Value, in operator","value":"Value,IN,A,B,C"},"Filter by Value, not in operator":{"description":"Filter by Value, not in operator","value":"Value,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vetting fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vetting field","schema":{},"examples":{"Sort by Value, descending order":{"description":"Sort by Value, descending order","value":"Value:DESC"},"Sort by Value, ascending order":{"description":"Sort by Value, ascending order","value":"Value:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vettings","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/binary/Vessel/{id}/VesselImage":{"get":{"tags":["/binary/Vessel/{id}/VesselImage"],"summary":"Returns latest versions of all matching Vessels belonging to the parent Vessel in json format subject to caller is entitled to view Vessels","operationId":"downloadBinary","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselClass":{"get":{"tags":["/VesselClass"],"summary":"Returns latest versions of all matching Vessel classes in json format subject to caller is entitled to view Vessel classes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel class field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel class fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel class field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel classes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselClass/{id}":{"get":{"tags":["/VesselClass/{id}"],"summary":"Returns latest version of a specific Vessel class in json format subject to caller is entitled to view Vessel classes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel class","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel class field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel class fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel class field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel classes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselGroup":{"get":{"tags":["/VesselGroup"],"summary":"Returns latest versions of all matching Vessel groups in json format subject to caller is entitled to view Vessel groups","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselGroup/{id}":{"get":{"tags":["/VesselGroup/{id}"],"summary":"Returns latest version of a specific Vessel group in json format subject to caller is entitled to view Vessel groups","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel group","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel group field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Rule, in operator":{"description":"Filter by Rule, in operator","value":"Rule,IN,A,B,C"},"Filter by Rule, not in operator":{"description":"Filter by Rule, not in operator","value":"Rule,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel group fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel group field","schema":{},"examples":{"Sort by Rule, descending order":{"description":"Sort by Rule, descending order","value":"Rule:DESC"},"Sort by Rule, ascending order":{"description":"Sort by Rule, ascending order","value":"Rule:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel groups","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselReportingFact":{"get":{"tags":["/VesselReportingFact"],"summary":"Returns latest versions of all matching Vessel reporting facts in json format subject to caller is entitled to view Vessel reporting facts","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel reporting fact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel reporting fact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel reporting fact field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel reporting facts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselReportingFact/{id}":{"get":{"tags":["/VesselReportingFact/{id}"],"summary":"Returns latest version of a specific Vessel reporting fact in json format subject to caller is entitled to view Vessel reporting facts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel reporting fact","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel reporting fact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel reporting fact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel reporting fact field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel reporting facts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselSpeedDescription":{"get":{"tags":["/VesselSpeedDescription"],"summary":"Returns latest versions of all matching Vessel speed descriptions in json format subject to caller is entitled to view Vessel speed descriptions","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed description field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel speed description fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed description field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel speed descriptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselSpeedDescription/{id}":{"get":{"tags":["/VesselSpeedDescription/{id}"],"summary":"Returns latest version of a specific Vessel speed description in json format subject to caller is entitled to view Vessel speed descriptions","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel speed description","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel speed description field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel speed description fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel speed description field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel speed descriptions","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselSubType":{"get":{"tags":["/VesselSubType"],"summary":"Returns latest versions of all matching Vessel subtypes in json format subject to caller is entitled to view Vessel subtypes","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselSubType/{id}":{"get":{"tags":["/VesselSubType/{id}"],"summary":"Returns latest version of a specific Vessel subtype in json format subject to caller is entitled to view Vessel subtypes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel subtype","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel subtype field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel subtype fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel subtype field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel subtypes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselTradingStatus":{"get":{"tags":["/VesselTradingStatus"],"summary":"Returns latest versions of all matching Vessel trading statuses in json format subject to caller is entitled to view Vessel trading statuses","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel trading status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel trading status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel trading status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel trading statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/VesselTradingStatus/{id}":{"get":{"tags":["/VesselTradingStatus/{id}"],"summary":"Returns latest version of a specific Vessel trading status in json format subject to caller is entitled to view Vessel trading statuses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Vessel trading status","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Vessel trading status field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Vessel trading status fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Vessel trading status field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Vessel trading statuses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Water":{"get":{"tags":["/Water"],"summary":"Returns latest versions of all matching Waters in json format subject to caller is entitled to view Waters","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Water field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by WaterType, not in operator":{"description":"Filter by WaterType, not in operator","value":"WaterType,NOT_IN,A,B,C"},"Filter by WaterType, in operator":{"description":"Filter by WaterType, in operator","value":"WaterType,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Water fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Water field","schema":{},"examples":{"Sort by WaterType, descending order":{"description":"Sort by WaterType, descending order","value":"WaterType:DESC"},"Sort by WaterType, ascending order":{"description":"Sort by WaterType, ascending order","value":"WaterType:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Waters","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}},"/Water/{id}":{"get":{"tags":["/Water/{id}"],"summary":"Returns latest version of a specific Water in json format subject to caller is entitled to view Waters","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Water","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Water field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by WaterType, not in operator":{"description":"Filter by WaterType, not in operator","value":"WaterType,NOT_IN,A,B,C"},"Filter by WaterType, in operator":{"description":"Filter by WaterType, in operator","value":"WaterType,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Water fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Water field","schema":{},"examples":{"Sort by WaterType, descending order":{"description":"Sort by WaterType, descending order","value":"WaterType:DESC"},"Sort by WaterType, ascending order":{"description":"Sort by WaterType, ascending order","value":"WaterType:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Waters","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{}}}}}