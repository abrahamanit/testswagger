{"openapi":"3.0.1","paths":{"/Counterparty":{"get":{"tags":["/Counterparty"],"summary":"Returns latest versions of all matching Counterparties in json format, subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Counterparty","schema":{},"examples":{"Filter by WithholdingTaxExemptionReason, in operator":{"description":"Filter by WithholdingTaxExemptionReason, in operator","value":"WithholdingTaxExemptionReason,IN,A,B,C"},"Filter by WithholdingTaxExemptionReason, not in operator":{"description":"Filter by WithholdingTaxExemptionReason, not in operator","value":"WithholdingTaxExemptionReason,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Counterparty","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field. For possible fields, refer to the schema section for Counterparty","schema":{},"examples":{"Sort by WithholdingTaxExemptionReason, descending order":{"description":"Sort by WithholdingTaxExemptionReason, descending order","value":"WithholdingTaxExemptionReason:DESC"},"Sort by WithholdingTaxExemptionReason, ascending order":{"description":"Sort by WithholdingTaxExemptionReason, ascending order","value":"WithholdingTaxExemptionReason:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Counterparties","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty"],"summary":"Creates a new Counterparty subject to caller is entitled to create Counterparties","description":"Creates a new  Counterparty.\r\nThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [ShortName, Name]\r\n For possible entity Fields, refer to the schema section for Counterparty in json format, subject to caller is entitled to view Counterparties","operationId":"createEntity","parameters":[{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Counterparty. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}":{"get":{"tags":["/Counterparty/{Id}"],"summary":"Returns latest version of a specific Counterparty in json format, subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Counterparty","schema":{},"examples":{"Filter by WithholdingTaxExemptionReason, in operator":{"description":"Filter by WithholdingTaxExemptionReason, in operator","value":"WithholdingTaxExemptionReason,IN,A,B,C"},"Filter by WithholdingTaxExemptionReason, not in operator":{"description":"Filter by WithholdingTaxExemptionReason, not in operator","value":"WithholdingTaxExemptionReason,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Counterparty","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field. For possible fields, refer to the schema section for Counterparty","schema":{},"examples":{"Sort by WithholdingTaxExemptionReason, descending order":{"description":"Sort by WithholdingTaxExemptionReason, descending order","value":"WithholdingTaxExemptionReason:DESC"},"Sort by WithholdingTaxExemptionReason, ascending order":{"description":"Sort by WithholdingTaxExemptionReason, ascending order","value":"WithholdingTaxExemptionReason:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Addresses":{"get":{"tags":["/Counterparty/{Id}/Addresses"],"summary":"Returns latest versions of all matching Addresses belonging to the parent Counterparty in json format, subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Address","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Address","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field. For possible fields, refer to the schema section for Address","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Addresses belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/Addresses"],"summary":"Creates a new Address belonging to Counterparty subject to caller is entitled to create Addresses","description":"Creates a new  Address.\r\nAddress is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [AddressTypeId]\r\n For possible entity Fields, refer to the schema section for Address in json format, subject to caller is entitled to view Addresses","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Address. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Address for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Addresses/{AddressesId}":{"get":{"tags":["/Counterparty/{Id}/Addresses/{AddressesId}"],"summary":"Returns latest version of a specific Address belonging to the parent Counterparty in json format, subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"AddressesId","in":"path","description":"Id of Address","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Address","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Address","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field. For possible fields, refer to the schema section for Address","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Address belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BICs":{"get":{"tags":["/Counterparty/{Id}/BICs"],"summary":"Returns latest versions of all matching BIC Type Relations belonging to the parent Counterparty in json format, subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICTypeRelation","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field. For possible fields, refer to the schema section for BICTypeRelation","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICTypeRelation","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching BIC Type Relations belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/BICs"],"summary":"Creates a new BIC Type Relation belonging to Counterparty subject to caller is entitled to create BIC Type Relations","description":"Creates a new  BIC Type Relation.\r\nBIC Type Relation is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Type, BIC]\r\n For possible entity Fields, refer to the schema section for BICTypeRelation in json format, subject to caller is entitled to view BIC Type Relations","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the BIC Type Relation. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of BIC Type Relation for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BICs/{BiCsId}":{"get":{"tags":["/Counterparty/{Id}/BICs/{BiCsId}"],"summary":"Returns latest version of a specific BIC Type Relation belonging to the parent Counterparty in json format, subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"BiCsId","in":"path","description":"Id of BIC Type Relation","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BICTypeRelation","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field. For possible fields, refer to the schema section for BICTypeRelation","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BICTypeRelation","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific BIC Type Relation belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BankAccounts":{"get":{"tags":["/Counterparty/{Id}/BankAccounts"],"summary":"Returns latest versions of all matching Bank accounts belonging to the parent Counterparty in json format, subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BankAccount","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field. For possible fields, refer to the schema section for BankAccount","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BankAccount","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Bank accounts belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/BankAccounts"],"summary":"Creates a new Bank account belonging to Counterparty subject to caller is entitled to create Bank accounts","description":"Creates a new  Bank account.\r\nBank account is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Name]\r\n For possible entity Fields, refer to the schema section for BankAccount in json format, subject to caller is entitled to view Bank accounts","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Bank account. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Bank account for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BankAccounts/{BankAccountsId}":{"get":{"tags":["/Counterparty/{Id}/BankAccounts/{BankAccountsId}"],"summary":"Returns latest version of a specific Bank account belonging to the parent Counterparty in json format, subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"BankAccountsId","in":"path","description":"Id of Bank account","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BankAccount","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field. For possible fields, refer to the schema section for BankAccount","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BankAccount","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Bank account belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BusinessUnits":{"get":{"tags":["/Counterparty/{Id}/BusinessUnits"],"summary":"Returns latest versions of all matching Business Unit Relations belonging to the parent Counterparty in json format, subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field. For possible fields, refer to the schema section for BusinessUnitSubEntity","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnitSubEntity","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnitSubEntity","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Business Unit Relations belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/BusinessUnits"],"summary":"Creates a new Business Unit Relation belonging to Counterparty subject to caller is entitled to create Business Unit Relations","description":"Creates a new  Business Unit Relation.\r\nBusiness Unit Relation is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [BusinessUnit]\r\n For possible entity Fields, refer to the schema section for BusinessUnitSubEntity in json format, subject to caller is entitled to view Business Unit Relations","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Business Unit Relation. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Business Unit Relation for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}":{"get":{"tags":["/Counterparty/{Id}/BusinessUnits/{BusinessUnitsId}"],"summary":"Returns latest version of a specific Business Unit Relation belonging to the parent Counterparty in json format, subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"BusinessUnitsId","in":"path","description":"Id of Business Unit Relation","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field. For possible fields, refer to the schema section for BusinessUnitSubEntity","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for BusinessUnitSubEntity","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for BusinessUnitSubEntity","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Business Unit Relation belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/ClearingCodes":{"get":{"tags":["/Counterparty/{Id}/ClearingCodes"],"summary":"Returns latest versions of all matching Clearing codes belonging to the parent Counterparty in json format, subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field. For possible fields, refer to the schema section for ClearingCode","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCode","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCode","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Clearing codes belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/ClearingCodes"],"summary":"Creates a new Clearing code belonging to Counterparty subject to caller is entitled to create Clearing codes","description":"Creates a new  Clearing code.\r\nClearing code is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [ClearingFormat, Type, Code, ClearingSystem]\r\n For possible entity Fields, refer to the schema section for ClearingCode in json format, subject to caller is entitled to view Clearing codes","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Clearing code. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Clearing code for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}":{"get":{"tags":["/Counterparty/{Id}/ClearingCodes/{ClearingCodesId}"],"summary":"Returns latest version of a specific Clearing code belonging to the parent Counterparty in json format, subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"ClearingCodesId","in":"path","description":"Id of Clearing code","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field. For possible fields, refer to the schema section for ClearingCode","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for ClearingCode","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for ClearingCode","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Clearing code belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Contacts":{"get":{"tags":["/Counterparty/{Id}/Contacts"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Counterparty in json format, subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Contacts belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/Contacts"],"summary":"Creates a new Contact belonging to Counterparty subject to caller is entitled to create Contacts","description":"Creates a new  Contact.\r\nContact is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Name]\r\n For possible entity Fields, refer to the schema section for Contact in json format, subject to caller is entitled to view Contacts","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Contact. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Contact for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Contacts/{ContactsId}":{"get":{"tags":["/Counterparty/{Id}/Contacts/{ContactsId}"],"summary":"Returns latest version of a specific Contact belonging to the parent Counterparty in json format, subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"ContactsId","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Contact","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Contact","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field. For possible fields, refer to the schema section for Contact","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Contact belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/DepositoryCodes":{"get":{"tags":["/Counterparty/{Id}/DepositoryCodes"],"summary":"Returns latest versions of all matching Depository codes belonging to the parent Counterparty in json format, subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCode","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCode","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field. For possible fields, refer to the schema section for DepositoryCode","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Depository codes belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/DepositoryCodes"],"summary":"Creates a new Depository code belonging to Counterparty subject to caller is entitled to create Depository codes","description":"Creates a new  Depository code.\r\nDepository code is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Format, Code]\r\n For possible entity Fields, refer to the schema section for DepositoryCode in json format, subject to caller is entitled to view Depository codes","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Depository code. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Depository code for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}":{"get":{"tags":["/Counterparty/{Id}/DepositoryCodes/{DepositoryCodesId}"],"summary":"Returns latest version of a specific Depository code belonging to the parent Counterparty in json format, subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"DepositoryCodesId","in":"path","description":"Id of Depository code","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for DepositoryCode","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for DepositoryCode","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field. For possible fields, refer to the schema section for DepositoryCode","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Depository code belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Farms":{"get":{"tags":["/Counterparty/{Id}/Farms"],"summary":"Returns latest versions of all matching Farms belonging to the parent Counterparty in json format, subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field. For possible fields, refer to the schema section for Farm","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Farm","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Farm","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Farms belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/Farms"],"summary":"Creates a new Farm belonging to Counterparty subject to caller is entitled to create Farms","description":"Creates a new  Farm.\r\nFarm is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Name]\r\n For possible entity Fields, refer to the schema section for Farm in json format, subject to caller is entitled to view Farms","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Farm. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Farm for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Farms/{FarmsId}":{"get":{"tags":["/Counterparty/{Id}/Farms/{FarmsId}"],"summary":"Returns latest version of a specific Farm belonging to the parent Counterparty in json format, subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"FarmsId","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field. For possible fields, refer to the schema section for Farm","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Farm","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Farm","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Farm belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults":{"get":{"tags":["/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Farm in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"FarmsId","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Splits belonging to the parent Farm","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults"],"summary":"Creates a new Split belonging to Farm subject to caller is entitled to create Splits","description":"Creates a new  Split.\r\nSplit is a  FarmThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Counterparty, Percentage]\r\n For possible entity Fields, refer to the schema section for Split in json format, subject to caller is entitled to view Splits","operationId":"createEntity","parameters":[{"name":"FarmsId","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Split. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Split for the parent Farm","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}":{"get":{"tags":["/Counterparty/{Id}/Farms/{FarmsId}/SplitDefaults/{SplitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Farm in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"FarmsId","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"SplitDefaultsId","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Split belonging to the parent Farm","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/InvestmentManagers":{"get":{"tags":["/Counterparty/{Id}/InvestmentManagers"],"summary":"Returns latest versions of all matching Investment managers belonging to the parent Counterparty in json format, subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestmentManager","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field. For possible fields, refer to the schema section for InvestmentManager","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestmentManager","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Investment managers belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/InvestmentManagers"],"summary":"Creates a new Investment manager belonging to Counterparty subject to caller is entitled to create Investment managers","description":"Creates a new  Investment manager.\r\nInvestment manager is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [InvestmentManager]\r\n For possible entity Fields, refer to the schema section for InvestmentManager in json format, subject to caller is entitled to view Investment managers","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Investment manager. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Investment manager for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}":{"get":{"tags":["/Counterparty/{Id}/InvestmentManagers/{InvestmentManagersId}"],"summary":"Returns latest version of a specific Investment manager belonging to the parent Counterparty in json format, subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"InvestmentManagersId","in":"path","description":"Id of Investment manager","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for InvestmentManager","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field. For possible fields, refer to the schema section for InvestmentManager","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for InvestmentManager","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Investment manager belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/SWIFTFields":{"get":{"tags":["/Counterparty/{Id}/SWIFTFields"],"summary":"Returns latest versions of all matching SWIFT fieldses belonging to the parent Counterparty in json format, subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SWIFTFields","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SWIFTFields","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field. For possible fields, refer to the schema section for SWIFTFields","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching SWIFT fieldses belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/SWIFTFields"],"summary":"Creates a new SWIFT fields belonging to Counterparty subject to caller is entitled to create SWIFT fieldses","description":"Creates a new  SWIFT fields.\r\nSWIFT fields is a  CounterpartyFields required for creation are [ConfirmationFieldType]\r\n For possible entity Fields, refer to the schema section for SWIFTFields in json format, subject to caller is entitled to view SWIFT fieldses","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the SWIFT fields. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of SWIFT fields for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}":{"get":{"tags":["/Counterparty/{Id}/SWIFTFields/{SwIFTFieldsId}"],"summary":"Returns latest version of a specific SWIFT fields belonging to the parent Counterparty in json format, subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"SwIFTFieldsId","in":"path","description":"Id of SWIFT fields","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for SWIFTFields","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for SWIFTFields","schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field. For possible fields, refer to the schema section for SWIFTFields","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific SWIFT fields belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/Counterparty/{Id}/SplitDefaults":{"get":{"tags":["/Counterparty/{Id}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Counterparty in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  all matching Splits belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}},"post":{"tags":["/Counterparty/{Id}/SplitDefaults"],"summary":"Creates a new Split belonging to Counterparty subject to caller is entitled to create Splits","description":"Creates a new  Split.\r\nSplit is a  CounterpartyThe Id property is optional, if not provided it will auto generate an Id.\r\nFields required for creation are [Counterparty, Percentage]\r\n For possible entity Fields, refer to the schema section for Split in json format, subject to caller is entitled to view Splits","operationId":"createEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"description":"A json containing field/values to be set while creating the Split. Any subentity field (if any) would be ignored.","content":{"application/json":{}},"required":true},"responses":{"201":{"description":"Indicates successful  creation of Split for the parent Counterparty","headers":{"ETag":{"description":"ETag of the created entity in format rootEntityId:revisionId","style":"simple"},"Location":{"description":"Location of the created entity","style":"simple"}},"content":{"application/json":{}}},"202":{"description":"Request submitted for 4-eyes approval","content":{"application/json":{}}},"400":{"description":"Invalid input data","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}},"409":{"description":"Conflicting entity already exists","content":{"application/json":{}}},"500":{"description":"Internal server error / Request not processable / Four-Eyes request submission failed","content":{"application/json":{}}}}}},"/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}":{"get":{"tags":["/Counterparty/{Id}/SplitDefaults/{SplitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Counterparty in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"SplitDefaultsId","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values. For possible EntityFields, refer to the schema section for Split","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned.  For possible list of fields, refer to the schema section for Split","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field. For possible fields, refer to the schema section for Split","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  in receiving  the specific Split belonging to the parent Counterparty","headers":{"ETag":{"description":"ETag of the existing resource in format rootEntityId:revisionId if a specific resource is asked","style":"simple"},"Location":{"description":"Location of the existing resource if a specific resource is asked","style":"simple"}},"content":{"application/json":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}},"/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature":{"get":{"tags":["/binary/Counterparty/{Id}/Contacts/{ContactsId}/Signature"],"summary":"Returns latest version of the Signature of Contact, subject to caller's view entitlements","operationId":"downloadBinary","parameters":[{"name":"ContactsId","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"Id","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"responses":{"200":{"description":"Indicates successful  downloading of binary file Signature of Contact","headers":{"Location":{"description":"Location of the existing binary resource","style":"simple"}},"content":{"application/octet-stream":{}}},"400":{"description":"Invalid search request arguments","content":{"application/json":{}}},"403":{"description":"User action forbidden","content":{"application/json":{}}}}}}},"components":{"schemas":{"RestServiceError":{"properties":{"errCode":{},"ErrorMessage":{}}}}}}