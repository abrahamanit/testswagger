{"openapi":"3.0.1","paths":{"/Counterparty":{"get":{"tags":["/Counterparty"],"summary":"Returns latest versions of all matching Counterparties in json format, subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,NOT_IN,A,B,C"},"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field","schema":{},"examples":{"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order","value":"__RESERVED_ALL_CPTYS_HrcParent:DESC"},"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order","value":"__RESERVED_ALL_CPTYS_HrcParent:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}":{"get":{"tags":["/Counterparty/{id}"],"summary":"Returns latest version of a specific Counterparty in json format, subject to caller is entitled to view Counterparties","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Counterparty field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, not in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,NOT_IN,A,B,C"},"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator":{"description":"Filter by __RESERVED_ALL_CPTYS_HrcParent, in operator","value":"__RESERVED_ALL_CPTYS_HrcParent,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Counterparty fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Counterparty field","schema":{},"examples":{"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, descending order","value":"__RESERVED_ALL_CPTYS_HrcParent:DESC"},"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order":{"description":"Sort by __RESERVED_ALL_CPTYS_HrcParent, ascending order","value":"__RESERVED_ALL_CPTYS_HrcParent:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Counterparties","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Addresses":{"get":{"tags":["/Counterparty/{id}/Addresses"],"summary":"Returns latest versions of all matching Addresses belonging to the parent Counterparty in json format, subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Addresses/{addressesId}":{"get":{"tags":["/Counterparty/{id}/Addresses/{addressesId}"],"summary":"Returns latest version of a specific Address belonging to the parent Counterparty in json format, subject to caller is entitled to view Addresses","operationId":"getEntity","parameters":[{"name":"{addressesId}","in":"path","description":"Id of Address","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Address field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Town, not in operator":{"description":"Filter by Town, not in operator","value":"Town,NOT_IN,A,B,C"},"Filter by Town, in operator":{"description":"Filter by Town, in operator","value":"Town,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Address fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Address field","schema":{},"examples":{"Sort by Town, descending order":{"description":"Sort by Town, descending order","value":"Town:DESC"},"Sort by Town, ascending order":{"description":"Sort by Town, ascending order","value":"Town:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Addresses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BICs":{"get":{"tags":["/Counterparty/{id}/BICs"],"summary":"Returns latest versions of all matching BIC Type Relations belonging to the parent Counterparty in json format, subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BICs/{bICsId}":{"get":{"tags":["/Counterparty/{id}/BICs/{bICsId}"],"summary":"Returns latest version of a specific BIC Type Relation belonging to the parent Counterparty in json format, subject to caller is entitled to view BIC Type Relations","operationId":"getEntity","parameters":[{"name":"{bICsId}","in":"path","description":"Id of BIC Type Relation","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the BIC Type Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of BIC Type Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any BIC Type Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned BIC Type Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BankAccounts":{"get":{"tags":["/Counterparty/{id}/BankAccounts"],"summary":"Returns latest versions of all matching Bank accounts belonging to the parent Counterparty in json format, subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BankAccounts/{bankAccountsId}":{"get":{"tags":["/Counterparty/{id}/BankAccounts/{bankAccountsId}"],"summary":"Returns latest version of a specific Bank account belonging to the parent Counterparty in json format, subject to caller is entitled to view Bank accounts","operationId":"getEntity","parameters":[{"name":"{bankAccountsId}","in":"path","description":"Id of Bank account","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Bank account field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by SwiftCode, in operator":{"description":"Filter by SwiftCode, in operator","value":"SwiftCode,IN,A,B,C"},"Filter by SwiftCode, not in operator":{"description":"Filter by SwiftCode, not in operator","value":"SwiftCode,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Bank account fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Bank account field","schema":{},"examples":{"Sort by SwiftCode, ascending order":{"description":"Sort by SwiftCode, ascending order","value":"SwiftCode:ASC"},"Sort by SwiftCode, descending order":{"description":"Sort by SwiftCode, descending order","value":"SwiftCode:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Bank accounts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BusinessUnits":{"get":{"tags":["/Counterparty/{id}/BusinessUnits"],"summary":"Returns latest versions of all matching Business Unit Relations belonging to the parent Counterparty in json format, subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/BusinessUnits/{businessUnitsId}":{"get":{"tags":["/Counterparty/{id}/BusinessUnits/{businessUnitsId}"],"summary":"Returns latest version of a specific Business Unit Relation belonging to the parent Counterparty in json format, subject to caller is entitled to view Business Unit Relations","operationId":"getEntity","parameters":[{"name":"{businessUnitsId}","in":"path","description":"Id of Business Unit Relation","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Business Unit Relation field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Business Unit Relation fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Business Unit Relation field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Business Unit Relations","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/ClearingCodes":{"get":{"tags":["/Counterparty/{id}/ClearingCodes"],"summary":"Returns latest versions of all matching Clearing codes belonging to the parent Counterparty in json format, subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/ClearingCodes/{clearingCodesId}":{"get":{"tags":["/Counterparty/{id}/ClearingCodes/{clearingCodesId}"],"summary":"Returns latest version of a specific Clearing code belonging to the parent Counterparty in json format, subject to caller is entitled to view Clearing codes","operationId":"getEntity","parameters":[{"name":"{clearingCodesId}","in":"path","description":"Id of Clearing code","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Clearing code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Clearing code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Clearing code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Clearing codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Contacts":{"get":{"tags":["/Counterparty/{id}/Contacts"],"summary":"Returns latest versions of all matching Contacts belonging to the parent Counterparty in json format, subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Contacts/{contactsId}":{"get":{"tags":["/Counterparty/{id}/Contacts/{contactsId}"],"summary":"Returns latest version of a specific Contact belonging to the parent Counterparty in json format, subject to caller is entitled to view Contacts","operationId":"getEntity","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Contact field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Phone, in operator":{"description":"Filter by Phone, in operator","value":"Phone,IN,A,B,C"},"Filter by Phone, not in operator":{"description":"Filter by Phone, not in operator","value":"Phone,NOT_IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Contact fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Contact field","schema":{},"examples":{"Sort by Phone, descending order":{"description":"Sort by Phone, descending order","value":"Phone:DESC"},"Sort by Phone, ascending order":{"description":"Sort by Phone, ascending order","value":"Phone:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Contacts","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/DepositoryCodes":{"get":{"tags":["/Counterparty/{id}/DepositoryCodes"],"summary":"Returns latest versions of all matching Depository codes belonging to the parent Counterparty in json format, subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/DepositoryCodes/{depositoryCodesId}":{"get":{"tags":["/Counterparty/{id}/DepositoryCodes/{depositoryCodesId}"],"summary":"Returns latest version of a specific Depository code belonging to the parent Counterparty in json format, subject to caller is entitled to view Depository codes","operationId":"getEntity","parameters":[{"name":"{depositoryCodesId}","in":"path","description":"Id of Depository code","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Depository code field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Code, not in operator":{"description":"Filter by Code, not in operator","value":"Code,NOT_IN,A,B,C"},"Filter by Code, in operator":{"description":"Filter by Code, in operator","value":"Code,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Depository code fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Depository code field","schema":{},"examples":{"Sort by Code, descending order":{"description":"Sort by Code, descending order","value":"Code:DESC"},"Sort by Code, ascending order":{"description":"Sort by Code, ascending order","value":"Code:ASC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Depository codes","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Farms":{"get":{"tags":["/Counterparty/{id}/Farms"],"summary":"Returns latest versions of all matching Farms belonging to the parent Counterparty in json format, subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Farms/{farmsId}":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}"],"summary":"Returns latest version of a specific Farm belonging to the parent Counterparty in json format, subject to caller is entitled to view Farms","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Farm field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Name, not in operator":{"description":"Filter by Name, not in operator","value":"Name,NOT_IN,A,B,C"},"Filter by Name, in operator":{"description":"Filter by Name, in operator","value":"Name,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Farm fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Farm field","schema":{},"examples":{"Sort by Name, ascending order":{"description":"Sort by Name, ascending order","value":"Name:ASC"},"Sort by Name, descending order":{"description":"Sort by Name, descending order","value":"Name:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Farms","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Farms/{farmsId}/SplitDefaults":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Farm in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/Farms/{farmsId}/SplitDefaults/{splitDefaultsId}":{"get":{"tags":["/Counterparty/{id}/Farms/{farmsId}/SplitDefaults/{splitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Farm in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{farmsId}","in":"path","description":"Id of Farm","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{splitDefaultsId}","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/InvestmentManagers":{"get":{"tags":["/Counterparty/{id}/InvestmentManagers"],"summary":"Returns latest versions of all matching Investment managers belonging to the parent Counterparty in json format, subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/InvestmentManagers/{investmentManagersId}":{"get":{"tags":["/Counterparty/{id}/InvestmentManagers/{investmentManagersId}"],"summary":"Returns latest version of a specific Investment manager belonging to the parent Counterparty in json format, subject to caller is entitled to view Investment managers","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{investmentManagersId}","in":"path","description":"Id of Investment manager","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Investment manager field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Investment manager fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Investment manager field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Investment managers","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/SWIFTFields":{"get":{"tags":["/Counterparty/{id}/SWIFTFields"],"summary":"Returns latest versions of all matching SWIFT fieldses belonging to the parent Counterparty in json format, subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/SWIFTFields/{sWIFTFieldsId}":{"get":{"tags":["/Counterparty/{id}/SWIFTFields/{sWIFTFieldsId}"],"summary":"Returns latest version of a specific SWIFT fields belonging to the parent Counterparty in json format, subject to caller is entitled to view SWIFT fieldses","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{sWIFTFieldsId}","in":"path","description":"Id of SWIFT fields","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the SWIFT fields field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Field87Line5, not in operator":{"description":"Filter by Field87Line5, not in operator","value":"Field87Line5,NOT_IN,A,B,C"},"Filter by Field87Line5, in operator":{"description":"Filter by Field87Line5, in operator","value":"Field87Line5,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of SWIFT fields fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any SWIFT fields field","schema":{},"examples":{"Sort by Field87Line5, ascending order":{"description":"Sort by Field87Line5, ascending order","value":"Field87Line5:ASC"},"Sort by Field87Line5, descending order":{"description":"Sort by Field87Line5, descending order","value":"Field87Line5:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned SWIFT fieldses","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/SplitDefaults":{"get":{"tags":["/Counterparty/{id}/SplitDefaults"],"summary":"Returns latest versions of all matching Splits belonging to the parent Counterparty in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/Counterparty/{id}/SplitDefaults/{splitDefaultsId}":{"get":{"tags":["/Counterparty/{id}/SplitDefaults/{splitDefaultsId}"],"summary":"Returns latest version of a specific Split belonging to the parent Counterparty in json format, subject to caller is entitled to view Splits","operationId":"getEntity","parameters":[{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"{splitDefaultsId}","in":"path","description":"Id of Split","required":true,"schema":{}},{"name":"filter","in":"query","description":"Filters to be applied. This query parameter can be repeated to apply multiple filters. Format : EntityField,Operator,Value1,...ValueN. Where EntityField is any of the Split field. Operator is the operator symbol and value1..n refers to the operator value(s).  Multiple values can be passed separated by commas if Operator require/accepts multiple values.","schema":{},"examples":{"Filter by Id, not in operator":{"description":"Filter by Id, not in operator","value":"Id,NOT_IN,A,B,C"},"Filter by Id, in operator":{"description":"Filter by Id, in operator","value":"Id,IN,A,B,C"}}},{"name":"fields","in":"query","description":"Comma separated list of Split fields to be returned in the resultant json. If not provided, all fields will be returned","schema":{}},{"name":"sortBy","in":"query","description":"Sort by clause. This query parameter can be repeated to apply sorting on multiple filters. Sorting can be applied on any Split field","schema":{},"examples":{"Sort by Id, ascending order":{"description":"Sort by Id, ascending order","value":"Id:ASC"},"Sort by Id, descending order":{"description":"Sort by Id, descending order","value":"Id:DESC"}}},{"name":"maxResults","in":"query","description":"Maximum number of returned Splits","schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}},"/binary/Counterparty/{id}/Contacts/{contactsId}/Signature":{"get":{"tags":["/binary/Counterparty/{id}/Contacts/{contactsId}/Signature"],"summary":"Returns latest version of the Signature of Contact, subject to caller's view entitlements","operationId":"downloadBinary","parameters":[{"name":"{contactsId}","in":"path","description":"Id of Contact","required":true,"schema":{}},{"name":"{id}","in":"path","description":"Id of Counterparty","required":true,"schema":{}},{"name":"If-Match","in":"header","schema":{}}],"requestBody":{"content":{}},"responses":{"200":{"description":"Success"}}}}},"components":{"schemas":{"Rest4EyesMessage":{}}}}